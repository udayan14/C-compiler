
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftOROPERATORleftANDOPERATORleftEQUALCHECKUNEQUALleftLESSTHANEQLESSTHANGREATERTHANEQGREATERTHANleftPLUSMINUSleftTIMESDIVIDErightVALOFADDROFrightNOTrightUMINUSNUMBER FLOAT TYPE SEMICOLON EQUALS COMMA LPAREN RPAREN LBRACE RBRACE ANDOPERATOR OROPERATOR ADDROF NAME PLUS MINUS TIMES DIVIDE WHILE IF ELSE RETURN EQUALCHECK UNEQUAL LESSTHAN LESSTHANEQ GREATERTHAN GREATERTHANEQ NOT\n\tmaster : program\n\t \n\tprogram : function \n\t\t\t\t| function program\n\t\t\t\t| declaration program\n\t\n\tprogram : prototype program\n\t\n\tprototype : TYPE NAME LPAREN paramlist RPAREN SEMICOLON\n\t\n\tprototype : TYPE specialvar LPAREN paramlist RPAREN SEMICOLON\n\t\n\tallthestars : TIMES \n\t\t\t\t| TIMES allthestars\n\t\n\tfunction : TYPE NAME LPAREN paramlist RPAREN LBRACE fbody RBRACE\n\t\n\tfunction : TYPE specialvar LPAREN paramlist RPAREN LBRACE fbody RBRACE\n\t\n\tparamlist : \n\t\t\t| TYPE NAME paramlist2\n\t\t\t| TYPE specialvar paramlist2\n\t\n\tparamlist2 : \n\t\t\t|  COMMA TYPE NAME paramlist2\n\t\t\t|  COMMA TYPE specialvar paramlist2\n\t\n\tfbody : allstatement fbody\n\t\t\t| \n\t\n\tallstatement : statement\n\t\t\t\t| unmatchedstatement\n\t\n\tstatement : assignment\n\t\t\t| declaration\n\t\t\t| whileblock\n\t\t\t| ifblock\n\t\t\t| returnstatement\n\t\t\t| functioncall SEMICOLON\n\t\n\treturnstatement : RETURN expression SEMICOLON\n\t\n\treturnstatement : RETURN SEMICOLON\n\t\n\tfunctioncall : NAME LPAREN arguments RPAREN\n\t\n\targuments : expression \n\t\t\t\t| expression COMMA arguments\n\t\n\tstatement : SEMICOLON\n\t\n\tunmatchedstatement : IF LPAREN conditional RPAREN allstatement\n\t\t\t\t| IF LPAREN conditional RPAREN statement ELSE unmatchedstatement\n\t\t\t\t| IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement\n\t\n\tunmatchedstatement : IF LPAREN conditional RPAREN LBRACE fbody RBRACE\n\t\n\tifblock : IF LPAREN conditional RPAREN statement ELSE statement\n\t\t\t| IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE\n\t\t\t| IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE\n\t\n\tifblock : IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement\n\t\n\twhileblock : WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE\n\t\n\tconditional : LPAREN conditional RPAREN\n\t\n\tconditional : conditionbase\n\t\t\t\t| NOT LPAREN conditional RPAREN\n\t\t\t\t| conditional LESSTHANEQ conditional\n\t\t\t\t| conditional GREATERTHANEQ conditional\n\t\t\t\t| conditional UNEQUAL conditional\n\t\t\t\t| conditional EQUALCHECK conditional\n\t\t\t\t| conditional LESSTHAN conditional\n\t\t\t\t| conditional GREATERTHAN conditional\n\t\t\t\t| conditional ANDOPERATOR conditional\n\t\t\t\t| conditional OROPERATOR conditional\n\t\n\tconditionbase : CS LESSTHANEQ CS\n\t\t\t\t| CS GREATERTHANEQ CS\n\t\t\t\t| CS UNEQUAL CS\n\t\t\t\t| CS EQUALCHECK CS\n\t\t\t\t| CS LESSTHAN CS\n\t\t\t\t| CS GREATERTHAN CS\n\t\n\tCS : expression\n\t\t| NOT LPAREN expression RPAREN\n\t\n\t\tdeclaration : TYPE dlist1 SEMICOLON\n\t\n\tdlist1 : NAME  \n\t\t\t| NAME COMMA dlist1\n\t\n\tdlist1 : specialvar\n\t\t\t| specialvar  COMMA dlist1  \n\t\n\tspecialvar : TIMES specialvar %prec VALOF\n\t\n\tspecialvar : TIMES NAME %prec VALOF\n\t\n\tassignment : assignment_base SEMICOLON\n\t \n\tassignment_base : TIMES pointervar EQUALS expression\n\t\t\t| NAME EQUALS expression \n\t \n\texpression : functioncall\n\t\n\texpression : expression PLUS expression\n\t\t\t\t| expression MINUS expression\n\t\t\t\t| expression DIVIDE expression\n\t\n\texpression : expression TIMES expression\n\t\n\texpression : MINUS expression %prec UMINUS\n\t\n\texpression : LPAREN expression RPAREN\n\t\n\texpression : allnumbers\n\t\n\tallnumbers : FLOAT\n\t\n\tallnumbers : NUMBER\n\t\n\texpression : pointervar\n\t\n\tpointervar : TIMES pointervar %prec VALOF\n\t\n\tpointervar : ADDROF pointervar \n\t\n\tpointervar : NAME\n\t'
    
_lr_action_items = {'UNEQUAL':([59,61,63,64,65,67,74,84,85,92,93,94,96,98,100,106,107,108,109,110,120,121,131,134,135,136,137,138,139,140,141,142,144,145,146,147,148,149,150,151,158,159,],[-80,-85,-79,-82,-81,-72,-85,-84,-83,-77,-44,117,122,-60,117,-78,-75,-76,-73,-74,117,-60,-30,-51,-50,117,117,-47,-48,-46,-49,-43,-56,-58,-55,-59,-54,-57,117,-60,-45,-61,]),'NUMBER':([39,68,70,71,77,78,79,87,89,90,91,95,99,112,113,114,115,116,117,118,119,122,123,124,125,126,127,128,132,157,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'OROPERATOR':([59,61,63,64,65,67,74,84,85,92,93,94,98,100,106,107,108,109,110,120,131,134,135,136,137,138,139,140,141,142,144,145,146,147,148,149,150,158,159,],[-80,-85,-79,-82,-81,-72,-85,-84,-83,-77,-44,114,-60,114,-78,-75,-76,-73,-74,114,-30,-51,-50,-53,-52,-47,-48,-46,-49,-43,-56,-58,-55,-59,-54,-57,114,-45,-61,]),'WHILE':([18,32,37,41,42,43,44,45,48,49,54,55,60,72,73,88,130,133,152,153,154,160,162,164,165,166,167,169,170,171,172,173,175,],[-62,40,40,-21,-33,-24,-25,-20,-22,-23,40,-26,-29,-27,-69,-28,40,40,-20,40,-34,40,-42,-35,-38,40,-37,40,-39,-36,-41,40,-40,]),'GREATERTHANEQ':([59,61,63,64,65,67,74,84,85,92,93,94,96,98,100,106,107,108,109,110,120,121,131,134,135,136,137,138,139,140,141,142,144,145,146,147,148,149,150,151,158,159,],[-80,-85,-79,-82,-81,-72,-85,-84,-83,-77,-44,116,124,-60,116,-78,-75,-76,-73,-74,116,-60,-30,-51,-50,116,116,-47,116,-46,116,-43,-56,-58,-55,-59,-54,-57,116,-60,-45,-61,]),'RETURN':([18,32,37,41,42,43,44,45,48,49,54,55,60,72,73,88,130,133,152,153,154,160,162,164,165,166,167,169,170,171,172,173,175,],[-62,39,39,-21,-33,-24,-25,-20,-22,-23,39,-26,-29,-27,-69,-28,39,39,-20,39,-34,39,-42,-35,-38,39,-37,39,-39,-36,-41,39,-40,]),'MINUS':([39,59,61,63,64,65,67,68,69,70,71,74,77,78,79,84,85,86,87,89,90,91,92,95,98,99,101,103,106,107,108,109,110,112,113,114,115,116,117,118,119,121,122,123,124,125,126,127,128,129,131,132,151,157,163,],[70,-80,-85,-79,-82,-81,-72,70,91,70,70,-85,70,70,70,-84,-83,91,70,70,70,70,-77,70,91,70,91,91,-78,-75,-76,-73,-74,70,70,70,70,70,70,70,70,91,70,70,70,70,70,70,70,91,-30,70,91,70,91,]),'RBRACE':([18,32,37,41,42,43,44,45,48,49,51,54,55,58,60,72,73,80,88,133,152,153,154,156,161,162,164,165,166,167,168,170,171,172,173,174,175,],[-62,-19,-19,-21,-33,-24,-25,-20,-22,-23,76,-19,-26,83,-29,-27,-69,-18,-28,-19,-20,-19,-34,162,167,-42,-35,-38,-19,-37,170,-39,-36,-41,-19,175,-40,]),'RPAREN':([15,16,17,19,24,26,29,30,35,36,59,61,63,64,65,67,74,81,82,84,85,86,92,93,94,98,100,102,103,104,105,106,107,108,109,110,120,121,131,134,135,136,137,138,139,140,141,142,144,145,146,147,148,149,150,151,155,158,159,163,],[-12,-67,-68,-12,28,31,-15,-15,-14,-13,-80,-85,-79,-82,-81,-72,-85,-15,-15,-84,-83,106,-77,-44,111,-60,130,131,-31,-16,-17,-78,-75,-76,-73,-74,142,106,-30,-51,-50,-53,-52,-47,-48,-46,-49,-43,-56,-58,-55,-59,-54,-57,158,159,-32,-45,-61,159,]),'SEMICOLON':([10,12,13,16,17,18,21,22,23,27,28,31,32,37,39,41,42,43,44,45,46,47,48,49,54,55,59,60,61,63,64,65,67,69,72,73,74,84,85,88,92,101,106,107,108,109,110,129,130,131,133,152,153,154,160,162,164,165,166,167,169,170,171,172,173,175,],[-63,18,-65,-67,-68,-62,-65,-64,-63,-66,33,38,42,42,60,-21,-33,-24,-25,-20,72,73,-22,-23,42,-26,-80,-29,-85,-79,-82,-81,-72,88,-27,-69,-85,-84,-83,-28,-77,-71,-78,-75,-76,-73,-74,-70,42,-30,42,-20,42,-34,42,-42,-35,-38,42,-37,42,-39,-36,-41,42,-40,]),'COMMA':([10,13,16,17,21,23,29,30,59,61,63,64,65,67,74,81,82,84,85,92,103,106,107,108,109,110,131,],[14,20,-67,-68,20,14,34,34,-80,-85,-79,-82,-81,-72,-85,34,34,-84,-83,-77,132,-78,-75,-76,-73,-74,-30,]),'PLUS':([59,61,63,64,65,67,69,74,84,85,86,92,98,101,103,106,107,108,109,110,121,129,131,151,163,],[-80,-85,-79,-82,-81,-72,90,-85,-84,-83,90,-77,90,90,90,-78,-75,-76,-73,-74,90,90,-30,90,90,]),'LESSTHANEQ':([59,61,63,64,65,67,74,84,85,92,93,94,96,98,100,106,107,108,109,110,120,121,131,134,135,136,137,138,139,140,141,142,144,145,146,147,148,149,150,151,158,159,],[-80,-85,-79,-82,-81,-72,-85,-84,-83,-77,-44,118,126,-60,118,-78,-75,-76,-73,-74,118,-60,-30,-51,-50,118,118,-47,118,-46,118,-43,-56,-58,-55,-59,-54,-57,118,-60,-45,-61,]),'$end':([1,2,3,7,8,9,76,83,],[-2,-1,0,-3,-4,-5,-10,-11,]),'ADDROF':([39,50,62,66,68,70,71,77,78,79,87,89,90,91,95,99,112,113,114,115,116,117,118,119,122,123,124,125,126,127,128,132,157,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'DIVIDE':([59,61,63,64,65,67,69,74,84,85,86,92,98,101,103,106,107,108,109,110,121,129,131,151,163,],[-80,-85,-79,-82,-81,-72,87,-85,-84,-83,87,-77,87,87,87,-78,-75,-76,87,87,87,87,-30,87,87,]),'EQUALS':([53,74,75,84,85,],[78,-85,99,-84,-83,]),'TIMES':([6,11,14,18,20,25,32,37,39,41,42,43,44,45,48,49,50,54,55,56,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,77,78,79,84,85,86,87,88,89,90,91,92,95,98,99,101,103,106,107,108,109,110,112,113,114,115,116,117,118,119,121,122,123,124,125,126,127,128,129,130,131,132,133,151,152,153,154,157,160,162,163,164,165,166,167,169,170,171,172,173,175,],[11,11,11,-62,11,11,50,50,66,-21,-33,-24,-25,-20,-22,-23,66,50,-26,11,11,-80,-29,-85,66,-79,-82,-81,66,-72,66,89,66,66,-27,-69,-85,66,66,66,-84,-83,89,66,-28,66,66,66,-77,66,89,66,89,89,-78,-75,-76,89,89,66,66,66,66,66,66,66,66,89,66,66,66,66,66,66,66,89,50,-30,66,50,89,-20,50,-34,66,50,-42,89,-35,-38,50,-37,50,-39,-36,-41,50,-40,]),'ANDOPERATOR':([59,61,63,64,65,67,74,84,85,92,93,94,98,100,106,107,108,109,110,120,131,134,135,136,137,138,139,140,141,142,144,145,146,147,148,149,150,158,159,],[-80,-85,-79,-82,-81,-72,-85,-84,-83,-77,-44,115,-60,115,-78,-75,-76,-73,-74,115,-30,-51,-50,115,-52,-47,-48,-46,-49,-43,-56,-58,-55,-59,-54,-57,115,-45,-61,]),'GREATERTHAN':([59,61,63,64,65,67,74,84,85,92,93,94,96,98,100,106,107,108,109,110,120,121,131,134,135,136,137,138,139,140,141,142,144,145,146,147,148,149,150,151,158,159,],[-80,-85,-79,-82,-81,-72,-85,-84,-83,-77,-44,112,125,-60,112,-78,-75,-76,-73,-74,112,-60,-30,-51,-50,112,112,-47,112,-46,112,-43,-56,-58,-55,-59,-54,-57,112,-60,-45,-61,]),'LPAREN':([10,13,16,17,39,40,52,53,61,68,70,71,77,78,79,87,89,90,91,95,97,99,112,113,114,115,116,117,118,119,122,123,124,125,126,127,128,132,143,157,],[15,19,-67,-68,68,71,77,79,79,68,68,95,95,68,68,68,68,68,68,95,128,68,95,95,95,95,95,95,95,95,68,68,68,68,68,68,95,68,157,68,]),'ELSE':([18,42,43,44,48,49,55,60,72,73,88,152,162,165,167,170,172,175,],[-62,-33,-24,-25,-22,-23,-26,-29,-27,-69,-28,160,-42,-38,169,-39,-41,-40,]),'IF':([18,32,37,41,42,43,44,45,48,49,54,55,60,72,73,88,130,133,152,153,154,160,162,164,165,166,167,169,170,171,172,173,175,],[-62,52,52,-21,-33,-24,-25,-20,-22,-23,52,-26,-29,-27,-69,-28,52,52,-20,52,-34,52,-42,-35,-38,52,-37,52,-39,-36,-41,52,-40,]),'LBRACE':([28,31,111,130,160,169,],[32,37,133,153,166,173,]),'NAME':([6,11,14,18,20,25,32,37,39,41,42,43,44,45,48,49,50,54,55,56,57,60,62,66,68,70,71,72,73,77,78,79,87,88,89,90,91,95,99,112,113,114,115,116,117,118,119,122,123,124,125,126,127,128,130,132,133,152,153,154,157,160,162,164,165,166,167,169,170,171,172,173,175,],[10,17,23,-62,23,30,53,53,61,-21,-33,-24,-25,-20,-22,-23,74,53,-26,23,81,-29,74,74,61,61,61,-27,-69,61,61,61,61,-28,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,53,61,53,-20,53,-34,61,53,-42,-35,-38,53,-37,53,-39,-36,-41,53,-40,]),'FLOAT':([39,68,70,71,77,78,79,87,89,90,91,95,99,112,113,114,115,116,117,118,119,122,123,124,125,126,127,128,132,157,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'LESSTHAN':([59,61,63,64,65,67,74,84,85,92,93,94,96,98,100,106,107,108,109,110,120,121,131,134,135,136,137,138,139,140,141,142,144,145,146,147,148,149,150,151,158,159,],[-80,-85,-79,-82,-81,-72,-85,-84,-83,-77,-44,113,123,-60,113,-78,-75,-76,-73,-74,113,-60,-30,-51,-50,113,113,-47,113,-46,113,-43,-56,-58,-55,-59,-54,-57,113,-60,-45,-61,]),'NOT':([71,77,95,112,113,114,115,116,117,118,119,122,123,124,125,126,127,128,],[97,97,97,97,97,97,97,97,97,97,97,143,143,143,143,143,143,97,]),'EQUALCHECK':([59,61,63,64,65,67,74,84,85,92,93,94,96,98,100,106,107,108,109,110,120,121,131,134,135,136,137,138,139,140,141,142,144,145,146,147,148,149,150,151,158,159,],[-80,-85,-79,-82,-81,-72,-85,-84,-83,-77,-44,119,127,-60,119,-78,-75,-76,-73,-74,119,-60,-30,-51,-50,119,119,-47,-48,-46,-49,-43,-56,-58,-55,-59,-54,-57,119,-60,-45,-61,]),'TYPE':([0,1,4,5,15,18,19,32,33,34,37,38,41,42,43,44,45,48,49,54,55,60,72,73,76,83,88,130,133,152,153,154,160,162,164,165,166,167,169,170,171,172,173,175,],[6,6,6,6,25,-62,25,56,-6,57,56,-7,-21,-33,-24,-25,-20,-22,-23,56,-26,-29,-27,-69,-10,-11,-28,56,56,-20,56,-34,56,-42,-35,-38,56,-37,56,-39,-36,-41,56,-40,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,1,4,5,],[2,7,8,9,]),'conditionbase':([71,77,95,112,113,114,115,116,117,118,119,128,],[93,93,93,93,93,93,93,93,93,93,93,93,]),'declaration':([0,1,4,5,32,37,54,130,133,153,160,166,169,173,],[4,4,4,4,49,49,49,49,49,49,49,49,49,49,]),'unmatchedstatement':([32,37,54,130,133,153,160,166,169,173,],[41,41,41,41,41,41,164,41,171,41,]),'whileblock':([32,37,54,130,133,153,160,166,169,173,],[43,43,43,43,43,43,43,43,43,43,]),'ifblock':([32,37,54,130,133,153,160,166,169,173,],[44,44,44,44,44,44,44,44,44,44,]),'dlist1':([6,14,20,56,],[12,22,27,12,]),'master':([0,],[3,]),'arguments':([79,132,],[102,155,]),'statement':([32,37,54,130,133,153,160,166,169,173,],[45,45,45,152,45,45,165,45,172,45,]),'functioncall':([32,37,39,54,68,70,71,77,78,79,87,89,90,91,95,99,112,113,114,115,116,117,118,119,122,123,124,125,126,127,128,130,132,133,153,157,160,166,169,173,],[46,46,67,46,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,46,67,46,46,67,46,46,46,46,]),'assignment_base':([32,37,54,130,133,153,160,166,169,173,],[47,47,47,47,47,47,47,47,47,47,]),'prototype':([0,1,4,5,],[5,5,5,5,]),'function':([0,1,4,5,],[1,1,1,1,]),'conditional':([71,77,95,112,113,114,115,116,117,118,119,128,],[94,100,120,134,135,136,137,138,139,140,141,150,]),'pointervar':([39,50,62,66,68,70,71,77,78,79,87,89,90,91,95,99,112,113,114,115,116,117,118,119,122,123,124,125,126,127,128,132,157,],[64,75,84,85,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'assignment':([32,37,54,130,133,153,160,166,169,173,],[48,48,48,48,48,48,48,48,48,48,]),'allnumbers':([39,68,70,71,77,78,79,87,89,90,91,95,99,112,113,114,115,116,117,118,119,122,123,124,125,126,127,128,132,157,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'paramlist':([15,19,],[24,26,]),'fbody':([32,37,54,133,153,166,173,],[51,58,80,156,161,168,174,]),'CS':([71,77,95,112,113,114,115,116,117,118,119,122,123,124,125,126,127,128,],[96,96,96,96,96,96,96,96,96,96,96,144,145,146,147,148,149,96,]),'returnstatement':([32,37,54,130,133,153,160,166,169,173,],[55,55,55,55,55,55,55,55,55,55,]),'paramlist2':([29,30,81,82,],[35,36,104,105,]),'allstatement':([32,37,54,130,133,153,166,173,],[54,54,54,154,54,54,54,54,]),'specialvar':([6,11,14,20,25,56,57,],[13,16,21,21,29,21,82,]),'expression':([39,68,70,71,77,78,79,87,89,90,91,95,99,112,113,114,115,116,117,118,119,122,123,124,125,126,127,128,132,157,],[69,86,92,98,98,101,103,107,108,109,110,121,129,98,98,98,98,98,98,98,98,98,98,98,98,98,98,151,103,163,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> master","S'",1,None,None,None),
  ('master -> program','master',1,'p_masterprogram','Parser.py',356),
  ('program -> function','program',1,'p_program','Parser.py',381),
  ('program -> function program','program',2,'p_program','Parser.py',382),
  ('program -> declaration program','program',2,'p_program','Parser.py',383),
  ('program -> prototype program','program',2,'p_program1','Parser.py',413),
  ('prototype -> TYPE NAME LPAREN paramlist RPAREN SEMICOLON','prototype',6,'p_prototype','Parser.py',434),
  ('prototype -> TYPE specialvar LPAREN paramlist RPAREN SEMICOLON','prototype',6,'p_prototype_2','Parser.py',443),
  ('allthestars -> TIMES','allthestars',1,'p_function_stars','Parser.py',465),
  ('allthestars -> TIMES allthestars','allthestars',2,'p_function_stars','Parser.py',466),
  ('function -> TYPE NAME LPAREN paramlist RPAREN LBRACE fbody RBRACE','function',8,'p_function','Parser.py',487),
  ('function -> TYPE specialvar LPAREN paramlist RPAREN LBRACE fbody RBRACE','function',8,'p_function_2','Parser.py',540),
  ('paramlist -> <empty>','paramlist',0,'p_paramlist','Parser.py',547),
  ('paramlist -> TYPE NAME paramlist2','paramlist',3,'p_paramlist','Parser.py',548),
  ('paramlist -> TYPE specialvar paramlist2','paramlist',3,'p_paramlist','Parser.py',549),
  ('paramlist2 -> <empty>','paramlist2',0,'p_paramlist2','Parser.py',562),
  ('paramlist2 -> COMMA TYPE NAME paramlist2','paramlist2',4,'p_paramlist2','Parser.py',563),
  ('paramlist2 -> COMMA TYPE specialvar paramlist2','paramlist2',4,'p_paramlist2','Parser.py',564),
  ('fbody -> allstatement fbody','fbody',2,'p_fbody','Parser.py',576),
  ('fbody -> <empty>','fbody',0,'p_fbody','Parser.py',577),
  ('allstatement -> statement','allstatement',1,'p_allstatement_expr','Parser.py',600),
  ('allstatement -> unmatchedstatement','allstatement',1,'p_allstatement_expr','Parser.py',601),
  ('statement -> assignment','statement',1,'p_statement_expr','Parser.py',607),
  ('statement -> declaration','statement',1,'p_statement_expr','Parser.py',608),
  ('statement -> whileblock','statement',1,'p_statement_expr','Parser.py',609),
  ('statement -> ifblock','statement',1,'p_statement_expr','Parser.py',610),
  ('statement -> returnstatement','statement',1,'p_statement_expr','Parser.py',611),
  ('statement -> functioncall SEMICOLON','statement',2,'p_statement_expr','Parser.py',612),
  ('returnstatement -> RETURN expression SEMICOLON','returnstatement',3,'p_return_statement','Parser.py',618),
  ('returnstatement -> RETURN SEMICOLON','returnstatement',2,'p_return_statement_2','Parser.py',624),
  ('functioncall -> NAME LPAREN arguments RPAREN','functioncall',4,'p_function_call','Parser.py',630),
  ('arguments -> expression','arguments',1,'p_function_arguments','Parser.py',639),
  ('arguments -> expression COMMA arguments','arguments',3,'p_function_arguments','Parser.py',640),
  ('statement -> SEMICOLON','statement',1,'p_empty_statement','Parser.py',650),
  ('unmatchedstatement -> IF LPAREN conditional RPAREN allstatement','unmatchedstatement',5,'p_unmatchedstatement_expr1','Parser.py',656),
  ('unmatchedstatement -> IF LPAREN conditional RPAREN statement ELSE unmatchedstatement','unmatchedstatement',7,'p_unmatchedstatement_expr1','Parser.py',657),
  ('unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement','unmatchedstatement',9,'p_unmatchedstatement_expr1','Parser.py',658),
  ('unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE','unmatchedstatement',7,'p_unmatchedstatement_expr2','Parser.py',669),
  ('ifblock -> IF LPAREN conditional RPAREN statement ELSE statement','ifblock',7,'p_ifblock1','Parser.py',675),
  ('ifblock -> IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE','ifblock',9,'p_ifblock1','Parser.py',676),
  ('ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE','ifblock',11,'p_ifblock1','Parser.py',677),
  ('ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement','ifblock',9,'p_ifblock2','Parser.py',688),
  ('whileblock -> WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE','whileblock',7,'p_while','Parser.py',693),
  ('conditional -> LPAREN conditional RPAREN','conditional',3,'p_conditional1','Parser.py',699),
  ('conditional -> conditionbase','conditional',1,'p_conditional','Parser.py',705),
  ('conditional -> NOT LPAREN conditional RPAREN','conditional',4,'p_conditional','Parser.py',706),
  ('conditional -> conditional LESSTHANEQ conditional','conditional',3,'p_conditional','Parser.py',707),
  ('conditional -> conditional GREATERTHANEQ conditional','conditional',3,'p_conditional','Parser.py',708),
  ('conditional -> conditional UNEQUAL conditional','conditional',3,'p_conditional','Parser.py',709),
  ('conditional -> conditional EQUALCHECK conditional','conditional',3,'p_conditional','Parser.py',710),
  ('conditional -> conditional LESSTHAN conditional','conditional',3,'p_conditional','Parser.py',711),
  ('conditional -> conditional GREATERTHAN conditional','conditional',3,'p_conditional','Parser.py',712),
  ('conditional -> conditional ANDOPERATOR conditional','conditional',3,'p_conditional','Parser.py',713),
  ('conditional -> conditional OROPERATOR conditional','conditional',3,'p_conditional','Parser.py',714),
  ('conditionbase -> CS LESSTHANEQ CS','conditionbase',3,'p_conditionbase','Parser.py',740),
  ('conditionbase -> CS GREATERTHANEQ CS','conditionbase',3,'p_conditionbase','Parser.py',741),
  ('conditionbase -> CS UNEQUAL CS','conditionbase',3,'p_conditionbase','Parser.py',742),
  ('conditionbase -> CS EQUALCHECK CS','conditionbase',3,'p_conditionbase','Parser.py',743),
  ('conditionbase -> CS LESSTHAN CS','conditionbase',3,'p_conditionbase','Parser.py',744),
  ('conditionbase -> CS GREATERTHAN CS','conditionbase',3,'p_conditionbase','Parser.py',745),
  ('CS -> expression','CS',1,'p_cs','Parser.py',765),
  ('CS -> NOT LPAREN expression RPAREN','CS',4,'p_cs','Parser.py',766),
  ('declaration -> TYPE dlist1 SEMICOLON','declaration',3,'p_declaration1','Parser.py',774),
  ('dlist1 -> NAME','dlist1',1,'p_dlistname','Parser.py',781),
  ('dlist1 -> NAME COMMA dlist1','dlist1',3,'p_dlistname','Parser.py',782),
  ('dlist1 -> specialvar','dlist1',1,'p_dlistpointer','Parser.py',798),
  ('dlist1 -> specialvar COMMA dlist1','dlist1',3,'p_dlistpointer','Parser.py',799),
  ('specialvar -> TIMES specialvar','specialvar',2,'p_specialvar1','Parser.py',813),
  ('specialvar -> TIMES NAME','specialvar',2,'p_specialvar2','Parser.py',818),
  ('assignment -> assignment_base SEMICOLON','assignment',2,'p_assignment','Parser.py',823),
  ('assignment_base -> TIMES pointervar EQUALS expression','assignment_base',4,'p_assignment_base_pointer','Parser.py',832),
  ('assignment_base -> NAME EQUALS expression','assignment_base',3,'p_assignment_base_pointer','Parser.py',833),
  ('expression -> functioncall','expression',1,'p_expression_fcall','Parser.py',858),
  ('expression -> expression PLUS expression','expression',3,'p_expression1','Parser.py',864),
  ('expression -> expression MINUS expression','expression',3,'p_expression1','Parser.py',865),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression1','Parser.py',866),
  ('expression -> expression TIMES expression','expression',3,'p_expression_mul','Parser.py',883),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','Parser.py',891),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_paren','Parser.py',898),
  ('expression -> allnumbers','expression',1,'p_expression_base_number','Parser.py',906),
  ('allnumbers -> FLOAT','allnumbers',1,'p_allnumbers_float','Parser.py',914),
  ('allnumbers -> NUMBER','allnumbers',1,'p_allnumbers_int','Parser.py',921),
  ('expression -> pointervar','expression',1,'p_expression_base_pointer','Parser.py',928),
  ('pointervar -> TIMES pointervar','pointervar',2,'p_pointervar1','Parser.py',935),
  ('pointervar -> ADDROF pointervar','pointervar',2,'p_pointervar2','Parser.py',940),
  ('pointervar -> NAME','pointervar',1,'p_pointervar3','Parser.py',946),
]
