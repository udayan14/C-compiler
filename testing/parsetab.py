
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftOROPERATORleftANDOPERATORleftEQUALCHECKUNEQUALleftLESSTHANEQLESSTHANGREATERTHANEQGREATERTHANleftPLUSMINUSleftTIMESDIVIDErightVALOFADDROFrightNOTrightUMINUSNUMBER TYPE SEMICOLON EQUALS COMMA LPAREN RPAREN LBRACE RBRACE ANDOPERATOR OROPERATOR ADDROF NAME PLUS MINUS TIMES DIVIDE WHILE IF ELSE EQUALCHECK UNEQUAL LESSTHAN LESSTHANEQ GREATERTHAN GREATERTHANEQ NOT \n\tprogram : function \n\t\t\t\t| function program\n\t\n\tfunction : TYPE NAME LPAREN RPAREN LBRACE fbody RBRACE\n\t\n\tfbody : allstatement fbody\n\t\t\t| \n\t\n\tallstatement : statement\n\t\t\t\t| unmatchedstatement\n\t\n\tstatement : assignment\n\t\t\t| declaration\n\t\t\t| whileblock\n\t\t\t| ifblock\n\t\n\tstatement : SEMICOLON\n\t\n\tunmatchedstatement : IF LPAREN conditional RPAREN allstatement\n\t\t\t\t| IF LPAREN conditional RPAREN statement ELSE unmatchedstatement\n\t\t\t\t| IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement\n\t\n\tunmatchedstatement : IF LPAREN conditional RPAREN LBRACE fbody RBRACE\n\t\n\tifblock : IF LPAREN conditional RPAREN statement ELSE statement\n\t\t\t| IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE\n\t\t\t| IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE\n\t\n\tifblock : IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement\n\t\n\twhileblock : WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE\n\t\n\tconditional : LPAREN conditional RPAREN\n\t\n\tconditional : conditionbase\n\t\t\t\t| NOT LPAREN conditional RPAREN\n\t\t\t\t| conditional LESSTHANEQ conditional\n\t\t\t\t| conditional GREATERTHANEQ conditional\n\t\t\t\t| conditional UNEQUAL conditional\n\t\t\t\t| conditional EQUALCHECK conditional\n\t\t\t\t| conditional LESSTHAN conditional\n\t\t\t\t| conditional GREATERTHAN conditional\n\t\t\t\t| conditional ANDOPERATOR conditional\n\t\t\t\t| conditional OROPERATOR conditional\n\t\n\tconditionbase : CS LESSTHANEQ CS\n\t\t\t\t| CS GREATERTHANEQ CS\n\t\t\t\t| CS UNEQUAL CS\n\t\t\t\t| CS EQUALCHECK CS\n\t\t\t\t| CS LESSTHAN CS\n\t\t\t\t| CS GREATERTHAN CS\n\t\n\tCS : expression\n\t\t| NOT LPAREN expression RPAREN\n\t\n\t\tdeclaration : TYPE dlist1 SEMICOLON\n\t\n\tdlist1 : NAME  \n\t\t\t| NAME COMMA dlist1\n\t\n\tdlist1 : specialvar\n\t\t\t| specialvar  COMMA dlist1  \n\t\n\tspecialvar : TIMES specialvar %prec VALOF\n\t\t\t\t| TIMES NAME %prec VALOF\n\t\n\tassignment : assignment_base SEMICOLON\n\t \n\tassignment_base : TIMES pointervar EQUALS expression\n\t\t\t| NAME EQUALS expression \n\t \n\texpression : expression PLUS expression\n\t\t\t\t| expression MINUS expression\n\t\t\t\t| expression DIVIDE expression\n\t\n\texpression : expression TIMES expression\n\t\n\texpression : MINUS expression %prec UMINUS\n\t\n\texpression : LPAREN expression RPAREN\n\t\n\texpression : NUMBER\n\t\n\texpression : pointervar\n\t\n\tpointervar : TIMES pointervar %prec VALOF\n\t\n\tpointervar : ADDROF pointervar \n\t\n\tpointervar : NAME\n\t'
    
_lr_action_items = {'GREATERTHANEQ':([35,38,39,40,43,44,46,47,55,57,68,70,71,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,107,108,109,110,111,114,115,],[-61,59,-23,-39,-58,-57,72,72,-60,-59,-55,-39,72,-38,-34,-35,-33,-36,-37,-51,-54,-52,-53,-39,72,-56,-22,-26,72,-30,-25,-29,72,72,72,-40,-24,]),'NUMBER':([24,25,33,41,45,54,56,58,59,60,61,62,63,64,65,66,67,69,72,73,74,76,77,78,79,80,113,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'IF':([8,10,11,13,14,15,17,21,23,28,48,75,104,105,106,112,117,120,121,122,123,124,125,127,128,129,130,132,],[9,-8,-10,-6,-11,9,-9,-12,-7,-48,-41,9,9,-6,-13,9,9,-16,9,-17,-14,-21,9,9,-20,-15,-18,-19,]),'ADDROF':([22,24,25,33,34,37,41,45,54,56,58,59,60,61,62,63,64,65,66,67,69,72,73,74,76,77,78,79,80,113,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'PLUS':([35,40,43,44,53,55,57,68,70,84,85,93,94,95,96,97,99,119,],[-61,64,-58,-57,64,-60,-59,-55,64,64,64,-51,-54,-52,-53,64,-56,64,]),'LBRACE':([7,75,81,117,125,],[8,104,112,121,127,]),'LESSTHAN':([35,38,39,40,43,44,46,47,55,57,68,70,71,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,107,108,109,110,111,114,115,],[-61,63,-23,-39,-58,-57,77,77,-60,-59,-55,-39,77,-38,-34,-35,-33,-36,-37,-51,-54,-52,-53,-39,77,-56,-22,-26,77,-30,-25,-29,77,77,77,-40,-24,]),'WHILE':([8,10,11,13,14,15,17,21,23,28,48,75,104,105,106,112,117,120,121,122,123,124,125,127,128,129,130,132,],[12,-8,-10,-6,-11,12,-9,-12,-7,-48,-41,12,12,-6,-13,12,12,-16,12,-17,-14,-21,12,12,-20,-15,-18,-19,]),'ANDOPERATOR':([35,39,40,43,44,46,47,55,57,68,71,87,88,89,90,91,92,93,94,95,96,98,99,100,101,102,103,107,108,109,110,111,114,115,],[-61,-23,-39,-58,-57,79,79,-60,-59,-55,79,-38,-34,-35,-33,-36,-37,-51,-54,-52,-53,79,-56,-22,-26,-27,-30,-25,-29,-28,-31,79,-40,-24,]),'LPAREN':([5,9,12,24,25,33,41,42,45,54,56,58,59,60,61,62,63,64,65,66,67,69,72,73,74,76,77,78,79,80,86,113,],[6,24,25,45,45,54,54,69,45,54,54,54,54,54,54,54,54,54,54,54,54,45,45,45,45,45,45,45,45,45,113,54,]),'LESSTHANEQ':([35,38,39,40,43,44,46,47,55,57,68,70,71,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,107,108,109,110,111,114,115,],[-61,61,-23,-39,-58,-57,76,76,-60,-59,-55,-39,76,-38,-34,-35,-33,-36,-37,-51,-54,-52,-53,-39,76,-56,-22,-26,76,-30,-25,-29,76,76,76,-40,-24,]),'EQUALCHECK':([35,38,39,40,43,44,46,47,55,57,68,70,71,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,107,108,109,110,111,114,115,],[-61,62,-23,-39,-58,-57,78,78,-60,-59,-55,-39,78,-38,-34,-35,-33,-36,-37,-51,-54,-52,-53,-39,78,-56,-22,-26,-27,-30,-25,-29,-28,78,78,-40,-24,]),'EQUALS':([20,35,36,55,57,],[33,-61,56,-60,-59,]),'MINUS':([24,25,33,35,40,41,43,44,45,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,74,76,77,78,79,80,84,85,93,94,95,96,97,99,113,119,],[41,41,41,-61,66,41,-58,-57,41,66,41,-60,41,-59,41,41,41,41,41,41,41,41,41,41,-55,41,66,41,41,41,41,41,41,41,41,66,66,-51,-54,-52,-53,66,-56,41,66,]),'TIMES':([8,10,11,13,14,15,17,19,21,22,23,24,25,28,32,33,34,35,37,40,41,43,44,45,48,49,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,74,75,76,77,78,79,80,84,85,93,94,95,96,97,99,104,105,106,112,113,117,119,120,121,122,123,124,125,127,128,129,130,132,],[22,-8,-10,-6,-11,22,-9,32,-12,37,-7,37,37,-48,32,37,37,-61,37,65,37,-58,-57,37,-41,32,32,65,37,-60,37,-59,37,37,37,37,37,37,37,37,37,37,-55,37,65,37,37,37,22,37,37,37,37,37,65,65,65,-54,65,-53,65,-56,22,-6,-13,22,37,22,65,-16,22,-17,-14,-21,22,22,-20,-15,-18,-19,]),'NOT':([24,25,45,58,59,60,61,62,63,69,72,73,74,76,77,78,79,80,],[42,42,42,86,86,86,86,86,86,42,42,42,42,42,42,42,42,42,]),'UNEQUAL':([35,38,39,40,43,44,46,47,55,57,68,70,71,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,107,108,109,110,111,114,115,],[-61,60,-23,-39,-58,-57,73,73,-60,-59,-55,-39,73,-38,-34,-35,-33,-36,-37,-51,-54,-52,-53,-39,73,-56,-22,-26,-27,-30,-25,-29,-28,73,73,-40,-24,]),'GREATERTHAN':([35,38,39,40,43,44,46,47,55,57,68,70,71,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,107,108,109,110,111,114,115,],[-61,58,-23,-39,-58,-57,74,74,-60,-59,-55,-39,74,-38,-34,-35,-33,-36,-37,-51,-54,-52,-53,-39,74,-56,-22,-26,74,-30,-25,-29,74,74,74,-40,-24,]),'RPAREN':([6,35,39,40,43,44,46,47,55,57,68,70,71,84,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,107,108,109,110,111,114,115,119,],[7,-61,-23,-39,-58,-57,75,81,-60,-59,-55,99,100,99,-38,-34,-35,-33,-36,-37,-51,-54,-52,-53,114,115,-56,-22,-26,-27,-30,-25,-29,-28,-31,-32,-40,-24,114,]),'ELSE':([10,11,14,17,21,28,48,105,120,122,124,128,130,132,],[-8,-10,-11,-9,-12,-48,-41,117,125,-17,-21,-20,-18,-19,]),'NAME':([3,8,10,11,13,14,15,17,19,21,22,23,24,25,28,32,33,34,37,41,45,48,49,50,54,56,58,59,60,61,62,63,64,65,66,67,69,72,73,74,75,76,77,78,79,80,104,105,106,112,113,117,120,121,122,123,124,125,127,128,129,130,132,],[5,20,-8,-10,-6,-11,20,-9,31,-12,35,-7,35,35,-48,52,35,35,35,35,35,-41,31,31,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,20,35,35,35,35,35,20,-6,-13,20,35,20,-16,20,-17,-14,-21,20,20,-20,-15,-18,-19,]),'OROPERATOR':([35,39,40,43,44,46,47,55,57,68,71,87,88,89,90,91,92,93,94,95,96,98,99,100,101,102,103,107,108,109,110,111,114,115,],[-61,-23,-39,-58,-57,80,80,-60,-59,-55,80,-38,-34,-35,-33,-36,-37,-51,-54,-52,-53,80,-56,-22,-26,-27,-30,-25,-29,-28,-31,-32,-40,-24,]),'COMMA':([30,31,51,52,],[49,50,-46,-47,]),'RBRACE':([8,10,11,13,14,15,16,17,21,23,26,28,48,104,105,106,112,116,118,120,121,122,123,124,126,127,128,129,130,131,132,],[-5,-8,-10,-6,-11,-5,27,-9,-12,-7,-4,-48,-41,-5,-6,-13,-5,120,124,-16,-5,-17,-14,-21,130,-5,-20,-15,-18,132,-19,]),'SEMICOLON':([8,10,11,13,14,15,17,18,21,23,28,29,30,31,35,43,44,48,51,52,53,55,57,68,75,82,83,85,93,94,95,96,99,104,105,106,112,117,120,121,122,123,124,125,127,128,129,130,132,],[21,-8,-10,-6,-11,21,-9,28,-12,-7,-48,48,-44,-42,-61,-58,-57,-41,-46,-47,-50,-60,-59,-55,21,-45,-43,-49,-51,-54,-52,-53,-56,21,-6,-13,21,21,-16,21,-17,-14,-21,21,21,-20,-15,-18,-19,]),'$end':([1,2,4,27,],[0,-1,-2,-3,]),'TYPE':([0,2,8,10,11,13,14,15,17,21,23,27,28,48,75,104,105,106,112,117,120,121,122,123,124,125,127,128,129,130,132,],[3,3,19,-8,-10,-6,-11,19,-9,-12,-7,-3,-48,-41,19,19,-6,-13,19,19,-16,19,-17,-14,-21,19,19,-20,-15,-18,-19,]),'DIVIDE':([35,40,43,44,53,55,57,68,70,84,85,93,94,95,96,97,99,119,],[-61,67,-58,-57,67,-60,-59,-55,67,67,67,67,-54,67,-53,67,-56,67,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'allstatement':([8,15,75,104,112,121,127,],[15,15,106,15,15,15,15,]),'dlist1':([19,49,50,],[29,82,83,]),'fbody':([8,15,104,112,121,127,],[16,26,116,118,126,131,]),'CS':([24,25,45,58,59,60,61,62,63,69,72,73,74,76,77,78,79,80,],[38,38,38,87,88,89,90,91,92,38,38,38,38,38,38,38,38,38,]),'declaration':([8,15,75,104,112,117,121,125,127,],[17,17,17,17,17,17,17,17,17,]),'program':([0,2,],[1,4,]),'assignment_base':([8,15,75,104,112,117,121,125,127,],[18,18,18,18,18,18,18,18,18,]),'statement':([8,15,75,104,112,117,121,125,127,],[13,13,105,13,13,122,13,128,13,]),'assignment':([8,15,75,104,112,117,121,125,127,],[10,10,10,10,10,10,10,10,10,]),'whileblock':([8,15,75,104,112,117,121,125,127,],[11,11,11,11,11,11,11,11,11,]),'conditionbase':([24,25,45,69,72,73,74,76,77,78,79,80,],[39,39,39,39,39,39,39,39,39,39,39,39,]),'expression':([24,25,33,41,45,54,56,58,59,60,61,62,63,64,65,66,67,69,72,73,74,76,77,78,79,80,113,],[40,40,53,68,70,84,85,40,40,40,40,40,40,93,94,95,96,97,40,40,40,40,40,40,40,40,119,]),'conditional':([24,25,45,69,72,73,74,76,77,78,79,80,],[46,47,71,98,101,102,103,107,108,109,110,111,]),'specialvar':([19,32,49,50,],[30,51,30,30,]),'function':([0,2,],[2,2,]),'unmatchedstatement':([8,15,75,104,112,117,121,125,127,],[23,23,23,23,23,123,23,129,23,]),'pointervar':([22,24,25,33,34,37,41,45,54,56,58,59,60,61,62,63,64,65,66,67,69,72,73,74,76,77,78,79,80,113,],[36,43,43,43,55,57,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'ifblock':([8,15,75,104,112,117,121,125,127,],[14,14,14,14,14,14,14,14,14,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> function','program',1,'p_program','better.py',650),
  ('program -> function program','program',2,'p_program','better.py',651),
  ('function -> TYPE NAME LPAREN RPAREN LBRACE fbody RBRACE','function',7,'p_function','better.py',675),
  ('fbody -> allstatement fbody','fbody',2,'p_fbody','better.py',712),
  ('fbody -> <empty>','fbody',0,'p_fbody','better.py',713),
  ('allstatement -> statement','allstatement',1,'p_allstatement_expr','better.py',736),
  ('allstatement -> unmatchedstatement','allstatement',1,'p_allstatement_expr','better.py',737),
  ('statement -> assignment','statement',1,'p_statement_expr','better.py',743),
  ('statement -> declaration','statement',1,'p_statement_expr','better.py',744),
  ('statement -> whileblock','statement',1,'p_statement_expr','better.py',745),
  ('statement -> ifblock','statement',1,'p_statement_expr','better.py',746),
  ('statement -> SEMICOLON','statement',1,'p_empty_statement','better.py',752),
  ('unmatchedstatement -> IF LPAREN conditional RPAREN allstatement','unmatchedstatement',5,'p_unmatchedstatement_expr1','better.py',758),
  ('unmatchedstatement -> IF LPAREN conditional RPAREN statement ELSE unmatchedstatement','unmatchedstatement',7,'p_unmatchedstatement_expr1','better.py',759),
  ('unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement','unmatchedstatement',9,'p_unmatchedstatement_expr1','better.py',760),
  ('unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE','unmatchedstatement',7,'p_unmatchedstatement_expr2','better.py',771),
  ('ifblock -> IF LPAREN conditional RPAREN statement ELSE statement','ifblock',7,'p_ifblock1','better.py',777),
  ('ifblock -> IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE','ifblock',9,'p_ifblock1','better.py',778),
  ('ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE','ifblock',11,'p_ifblock1','better.py',779),
  ('ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement','ifblock',9,'p_ifblock2','better.py',790),
  ('whileblock -> WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE','whileblock',7,'p_while','better.py',795),
  ('conditional -> LPAREN conditional RPAREN','conditional',3,'p_conditional1','better.py',801),
  ('conditional -> conditionbase','conditional',1,'p_conditional','better.py',807),
  ('conditional -> NOT LPAREN conditional RPAREN','conditional',4,'p_conditional','better.py',808),
  ('conditional -> conditional LESSTHANEQ conditional','conditional',3,'p_conditional','better.py',809),
  ('conditional -> conditional GREATERTHANEQ conditional','conditional',3,'p_conditional','better.py',810),
  ('conditional -> conditional UNEQUAL conditional','conditional',3,'p_conditional','better.py',811),
  ('conditional -> conditional EQUALCHECK conditional','conditional',3,'p_conditional','better.py',812),
  ('conditional -> conditional LESSTHAN conditional','conditional',3,'p_conditional','better.py',813),
  ('conditional -> conditional GREATERTHAN conditional','conditional',3,'p_conditional','better.py',814),
  ('conditional -> conditional ANDOPERATOR conditional','conditional',3,'p_conditional','better.py',815),
  ('conditional -> conditional OROPERATOR conditional','conditional',3,'p_conditional','better.py',816),
  ('conditionbase -> CS LESSTHANEQ CS','conditionbase',3,'p_conditionbase','better.py',842),
  ('conditionbase -> CS GREATERTHANEQ CS','conditionbase',3,'p_conditionbase','better.py',843),
  ('conditionbase -> CS UNEQUAL CS','conditionbase',3,'p_conditionbase','better.py',844),
  ('conditionbase -> CS EQUALCHECK CS','conditionbase',3,'p_conditionbase','better.py',845),
  ('conditionbase -> CS LESSTHAN CS','conditionbase',3,'p_conditionbase','better.py',846),
  ('conditionbase -> CS GREATERTHAN CS','conditionbase',3,'p_conditionbase','better.py',847),
  ('CS -> expression','CS',1,'p_cs','better.py',867),
  ('CS -> NOT LPAREN expression RPAREN','CS',4,'p_cs','better.py',868),
  ('declaration -> TYPE dlist1 SEMICOLON','declaration',3,'p_declaration1','better.py',876),
  ('dlist1 -> NAME','dlist1',1,'p_dlistname','better.py',882),
  ('dlist1 -> NAME COMMA dlist1','dlist1',3,'p_dlistname','better.py',883),
  ('dlist1 -> specialvar','dlist1',1,'p_dlistpointer','better.py',890),
  ('dlist1 -> specialvar COMMA dlist1','dlist1',3,'p_dlistpointer','better.py',891),
  ('specialvar -> TIMES specialvar','specialvar',2,'p_specialvar','better.py',898),
  ('specialvar -> TIMES NAME','specialvar',2,'p_specialvar','better.py',899),
  ('assignment -> assignment_base SEMICOLON','assignment',2,'p_assignment','better.py',904),
  ('assignment_base -> TIMES pointervar EQUALS expression','assignment_base',4,'p_assignment_base_pointer','better.py',913),
  ('assignment_base -> NAME EQUALS expression','assignment_base',3,'p_assignment_base_pointer','better.py',914),
  ('expression -> expression PLUS expression','expression',3,'p_expression1','better.py',934),
  ('expression -> expression MINUS expression','expression',3,'p_expression1','better.py',935),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression1','better.py',936),
  ('expression -> expression TIMES expression','expression',3,'p_expression_mul','better.py',953),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','better.py',961),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_paren','better.py',968),
  ('expression -> NUMBER','expression',1,'p_expression_base_number','better.py',974),
  ('expression -> pointervar','expression',1,'p_expression_base_pointer','better.py',980),
  ('pointervar -> TIMES pointervar','pointervar',2,'p_pointervar1','better.py',987),
  ('pointervar -> ADDROF pointervar','pointervar',2,'p_pointervar2','better.py',993),
  ('pointervar -> NAME','pointervar',1,'p_pointervar3','better.py',1000),
]
