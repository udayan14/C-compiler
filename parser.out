Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> master
Rule 1     master -> program
Rule 2     program -> function
Rule 3     program -> function program
Rule 4     program -> declaration program
Rule 5     program -> prototype program
Rule 6     prototype -> TYPE NAME LPAREN paramlist RPAREN SEMICOLON
Rule 7     allthestars -> TIMES
Rule 8     allthestars -> TIMES allthestars
Rule 9     function -> TYPE NAME LPAREN paramlist RPAREN LBRACE fbody RBRACE
Rule 10    paramlist -> <empty>
Rule 11    paramlist -> TYPE NAME paramlist2
Rule 12    paramlist -> TYPE specialvar paramlist2
Rule 13    paramlist2 -> <empty>
Rule 14    paramlist2 -> COMMA TYPE NAME paramlist2
Rule 15    paramlist2 -> COMMA TYPE specialvar paramlist2
Rule 16    fbody -> allstatement fbody
Rule 17    fbody -> <empty>
Rule 18    allstatement -> statement
Rule 19    allstatement -> unmatchedstatement
Rule 20    statement -> assignment
Rule 21    statement -> declaration
Rule 22    statement -> whileblock
Rule 23    statement -> ifblock
Rule 24    statement -> returnstatement
Rule 25    statement -> functioncall SEMICOLON
Rule 26    returnstatement -> RETURN expression SEMICOLON
Rule 27    functioncall -> NAME LPAREN arguments RPAREN
Rule 28    arguments -> expression
Rule 29    arguments -> expression COMMA arguments
Rule 30    statement -> SEMICOLON
Rule 31    unmatchedstatement -> IF LPAREN conditional RPAREN allstatement
Rule 32    unmatchedstatement -> IF LPAREN conditional RPAREN statement ELSE unmatchedstatement
Rule 33    unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement
Rule 34    unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE
Rule 35    ifblock -> IF LPAREN conditional RPAREN statement ELSE statement
Rule 36    ifblock -> IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE
Rule 37    ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE
Rule 38    ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement
Rule 39    whileblock -> WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE
Rule 40    conditional -> LPAREN conditional RPAREN
Rule 41    conditional -> conditionbase
Rule 42    conditional -> NOT LPAREN conditional RPAREN
Rule 43    conditional -> conditional LESSTHANEQ conditional
Rule 44    conditional -> conditional GREATERTHANEQ conditional
Rule 45    conditional -> conditional UNEQUAL conditional
Rule 46    conditional -> conditional EQUALCHECK conditional
Rule 47    conditional -> conditional LESSTHAN conditional
Rule 48    conditional -> conditional GREATERTHAN conditional
Rule 49    conditional -> conditional ANDOPERATOR conditional
Rule 50    conditional -> conditional OROPERATOR conditional
Rule 51    conditionbase -> CS LESSTHANEQ CS
Rule 52    conditionbase -> CS GREATERTHANEQ CS
Rule 53    conditionbase -> CS UNEQUAL CS
Rule 54    conditionbase -> CS EQUALCHECK CS
Rule 55    conditionbase -> CS LESSTHAN CS
Rule 56    conditionbase -> CS GREATERTHAN CS
Rule 57    CS -> expression
Rule 58    CS -> NOT LPAREN expression RPAREN
Rule 59    declaration -> TYPE dlist1 SEMICOLON
Rule 60    dlist1 -> NAME
Rule 61    dlist1 -> NAME COMMA dlist1
Rule 62    dlist1 -> specialvar
Rule 63    dlist1 -> specialvar COMMA dlist1
Rule 64    specialvar -> TIMES specialvar
Rule 65    specialvar -> TIMES NAME
Rule 66    assignment -> assignment_base SEMICOLON
Rule 67    assignment_base -> TIMES pointervar EQUALS expression
Rule 68    assignment_base -> NAME EQUALS expression
Rule 69    expression -> functioncall
Rule 70    expression -> expression PLUS expression
Rule 71    expression -> expression MINUS expression
Rule 72    expression -> expression DIVIDE expression
Rule 73    expression -> expression TIMES expression
Rule 74    expression -> MINUS expression
Rule 75    expression -> LPAREN expression RPAREN
Rule 76    expression -> allnumbers
Rule 77    allnumbers -> FLOAT
Rule 78    allnumbers -> NUMBER
Rule 79    expression -> pointervar
Rule 80    pointervar -> TIMES pointervar
Rule 81    pointervar -> ADDROF pointervar
Rule 82    pointervar -> NAME

Terminals, with rules where they appear

ADDROF               : 81
ANDOPERATOR          : 49
COMMA                : 14 15 29 61 63
DIVIDE               : 72
ELSE                 : 32 33 35 36 37 38
EQUALCHECK           : 46 54
EQUALS               : 67 68
FLOAT                : 77
GREATERTHAN          : 48 56
GREATERTHANEQ        : 44 52
IF                   : 31 32 33 34 35 36 37 38
LBRACE               : 9 33 34 36 37 37 38 39
LESSTHAN             : 47 55
LESSTHANEQ           : 43 51
LPAREN               : 6 9 27 31 32 33 34 35 36 37 38 39 40 42 58 75
MINUS                : 71 74
NAME                 : 6 9 11 14 27 60 61 65 68 82
NOT                  : 42 58
NUMBER               : 78
OROPERATOR           : 50
PLUS                 : 70
RBRACE               : 9 33 34 36 37 37 38 39
RETURN               : 26
RPAREN               : 6 9 27 31 32 33 34 35 36 37 38 39 40 42 58 75
SEMICOLON            : 6 25 26 30 59 66
TIMES                : 7 8 64 65 67 73 80
TYPE                 : 6 9 11 12 14 15 59
UNEQUAL              : 45 53
WHILE                : 39
error                : 

Nonterminals, with rules where they appear

CS                   : 51 51 52 52 53 53 54 54 55 55 56 56
allnumbers           : 76
allstatement         : 16 31
allthestars          : 8
arguments            : 27 29
assignment           : 20
assignment_base      : 66
conditional          : 31 32 33 34 35 36 37 38 39 40 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50
conditionbase        : 41
declaration          : 4 21
dlist1               : 59 61 63
expression           : 26 28 29 57 58 67 68 70 70 71 71 72 72 73 73 74 75
fbody                : 9 16 33 34 36 37 37 38 39
function             : 2 3
functioncall         : 25 69
ifblock              : 23
master               : 0
paramlist            : 6 9
paramlist2           : 11 12 14 15
pointervar           : 67 79 80 81
program              : 1 3 4 5
prototype            : 5
returnstatement      : 24
specialvar           : 12 15 62 63 64
statement            : 18 32 35 35 36 38
unmatchedstatement   : 19 32 33
whileblock           : 22

Parsing method: LALR

state 0

    (0) S' -> . master
    (1) master -> . program
    (2) program -> . function
    (3) program -> . function program
    (4) program -> . declaration program
    (5) program -> . prototype program
    (9) function -> . TYPE NAME LPAREN paramlist RPAREN LBRACE fbody RBRACE
    (59) declaration -> . TYPE dlist1 SEMICOLON
    (6) prototype -> . TYPE NAME LPAREN paramlist RPAREN SEMICOLON

    TYPE            shift and go to state 6

    function                       shift and go to state 1
    program                        shift and go to state 2
    master                         shift and go to state 3
    declaration                    shift and go to state 4
    prototype                      shift and go to state 5

state 1

    (2) program -> function .
    (3) program -> function . program
    (2) program -> . function
    (3) program -> . function program
    (4) program -> . declaration program
    (5) program -> . prototype program
    (9) function -> . TYPE NAME LPAREN paramlist RPAREN LBRACE fbody RBRACE
    (59) declaration -> . TYPE dlist1 SEMICOLON
    (6) prototype -> . TYPE NAME LPAREN paramlist RPAREN SEMICOLON

    $end            reduce using rule 2 (program -> function .)
    TYPE            shift and go to state 6

    function                       shift and go to state 1
    declaration                    shift and go to state 4
    program                        shift and go to state 7
    prototype                      shift and go to state 5

state 2

    (1) master -> program .

    $end            reduce using rule 1 (master -> program .)


state 3

    (0) S' -> master .



state 4

    (4) program -> declaration . program
    (2) program -> . function
    (3) program -> . function program
    (4) program -> . declaration program
    (5) program -> . prototype program
    (9) function -> . TYPE NAME LPAREN paramlist RPAREN LBRACE fbody RBRACE
    (59) declaration -> . TYPE dlist1 SEMICOLON
    (6) prototype -> . TYPE NAME LPAREN paramlist RPAREN SEMICOLON

    TYPE            shift and go to state 6

    function                       shift and go to state 1
    declaration                    shift and go to state 4
    program                        shift and go to state 8
    prototype                      shift and go to state 5

state 5

    (5) program -> prototype . program
    (2) program -> . function
    (3) program -> . function program
    (4) program -> . declaration program
    (5) program -> . prototype program
    (9) function -> . TYPE NAME LPAREN paramlist RPAREN LBRACE fbody RBRACE
    (59) declaration -> . TYPE dlist1 SEMICOLON
    (6) prototype -> . TYPE NAME LPAREN paramlist RPAREN SEMICOLON

    TYPE            shift and go to state 6

    function                       shift and go to state 1
    declaration                    shift and go to state 4
    program                        shift and go to state 9
    prototype                      shift and go to state 5

state 6

    (9) function -> TYPE . NAME LPAREN paramlist RPAREN LBRACE fbody RBRACE
    (59) declaration -> TYPE . dlist1 SEMICOLON
    (6) prototype -> TYPE . NAME LPAREN paramlist RPAREN SEMICOLON
    (60) dlist1 -> . NAME
    (61) dlist1 -> . NAME COMMA dlist1
    (62) dlist1 -> . specialvar
    (63) dlist1 -> . specialvar COMMA dlist1
    (64) specialvar -> . TIMES specialvar
    (65) specialvar -> . TIMES NAME

    NAME            shift and go to state 10
    TIMES           shift and go to state 11

    specialvar                     shift and go to state 13
    dlist1                         shift and go to state 12

state 7

    (3) program -> function program .

    $end            reduce using rule 3 (program -> function program .)


state 8

    (4) program -> declaration program .

    $end            reduce using rule 4 (program -> declaration program .)


state 9

    (5) program -> prototype program .

    $end            reduce using rule 5 (program -> prototype program .)


state 10

    (9) function -> TYPE NAME . LPAREN paramlist RPAREN LBRACE fbody RBRACE
    (6) prototype -> TYPE NAME . LPAREN paramlist RPAREN SEMICOLON
    (60) dlist1 -> NAME .
    (61) dlist1 -> NAME . COMMA dlist1

    LPAREN          shift and go to state 15
    SEMICOLON       reduce using rule 60 (dlist1 -> NAME .)
    COMMA           shift and go to state 14


state 11

    (64) specialvar -> TIMES . specialvar
    (65) specialvar -> TIMES . NAME
    (64) specialvar -> . TIMES specialvar
    (65) specialvar -> . TIMES NAME

    NAME            shift and go to state 17
    TIMES           shift and go to state 11

    specialvar                     shift and go to state 16

state 12

    (59) declaration -> TYPE dlist1 . SEMICOLON

    SEMICOLON       shift and go to state 18


state 13

    (62) dlist1 -> specialvar .
    (63) dlist1 -> specialvar . COMMA dlist1

    SEMICOLON       reduce using rule 62 (dlist1 -> specialvar .)
    COMMA           shift and go to state 19


state 14

    (61) dlist1 -> NAME COMMA . dlist1
    (60) dlist1 -> . NAME
    (61) dlist1 -> . NAME COMMA dlist1
    (62) dlist1 -> . specialvar
    (63) dlist1 -> . specialvar COMMA dlist1
    (64) specialvar -> . TIMES specialvar
    (65) specialvar -> . TIMES NAME

    NAME            shift and go to state 21
    TIMES           shift and go to state 11

    specialvar                     shift and go to state 13
    dlist1                         shift and go to state 20

state 15

    (9) function -> TYPE NAME LPAREN . paramlist RPAREN LBRACE fbody RBRACE
    (6) prototype -> TYPE NAME LPAREN . paramlist RPAREN SEMICOLON
    (10) paramlist -> .
    (11) paramlist -> . TYPE NAME paramlist2
    (12) paramlist -> . TYPE specialvar paramlist2

    RPAREN          reduce using rule 10 (paramlist -> .)
    TYPE            shift and go to state 23

    paramlist                      shift and go to state 22

state 16

    (64) specialvar -> TIMES specialvar .

    COMMA           reduce using rule 64 (specialvar -> TIMES specialvar .)
    SEMICOLON       reduce using rule 64 (specialvar -> TIMES specialvar .)
    RPAREN          reduce using rule 64 (specialvar -> TIMES specialvar .)


state 17

    (65) specialvar -> TIMES NAME .

    COMMA           reduce using rule 65 (specialvar -> TIMES NAME .)
    SEMICOLON       reduce using rule 65 (specialvar -> TIMES NAME .)
    RPAREN          reduce using rule 65 (specialvar -> TIMES NAME .)


state 18

    (59) declaration -> TYPE dlist1 SEMICOLON .

    ELSE            reduce using rule 59 (declaration -> TYPE dlist1 SEMICOLON .)
    SEMICOLON       reduce using rule 59 (declaration -> TYPE dlist1 SEMICOLON .)
    IF              reduce using rule 59 (declaration -> TYPE dlist1 SEMICOLON .)
    TYPE            reduce using rule 59 (declaration -> TYPE dlist1 SEMICOLON .)
    WHILE           reduce using rule 59 (declaration -> TYPE dlist1 SEMICOLON .)
    RETURN          reduce using rule 59 (declaration -> TYPE dlist1 SEMICOLON .)
    NAME            reduce using rule 59 (declaration -> TYPE dlist1 SEMICOLON .)
    TIMES           reduce using rule 59 (declaration -> TYPE dlist1 SEMICOLON .)
    RBRACE          reduce using rule 59 (declaration -> TYPE dlist1 SEMICOLON .)


state 19

    (63) dlist1 -> specialvar COMMA . dlist1
    (60) dlist1 -> . NAME
    (61) dlist1 -> . NAME COMMA dlist1
    (62) dlist1 -> . specialvar
    (63) dlist1 -> . specialvar COMMA dlist1
    (64) specialvar -> . TIMES specialvar
    (65) specialvar -> . TIMES NAME

    NAME            shift and go to state 21
    TIMES           shift and go to state 11

    specialvar                     shift and go to state 13
    dlist1                         shift and go to state 24

state 20

    (61) dlist1 -> NAME COMMA dlist1 .

    SEMICOLON       reduce using rule 61 (dlist1 -> NAME COMMA dlist1 .)


state 21

    (60) dlist1 -> NAME .
    (61) dlist1 -> NAME . COMMA dlist1

    SEMICOLON       reduce using rule 60 (dlist1 -> NAME .)
    COMMA           shift and go to state 14


state 22

    (9) function -> TYPE NAME LPAREN paramlist . RPAREN LBRACE fbody RBRACE
    (6) prototype -> TYPE NAME LPAREN paramlist . RPAREN SEMICOLON

    RPAREN          shift and go to state 25


state 23

    (11) paramlist -> TYPE . NAME paramlist2
    (12) paramlist -> TYPE . specialvar paramlist2
    (64) specialvar -> . TIMES specialvar
    (65) specialvar -> . TIMES NAME

    NAME            shift and go to state 27
    TIMES           shift and go to state 11

    specialvar                     shift and go to state 26

state 24

    (63) dlist1 -> specialvar COMMA dlist1 .

    SEMICOLON       reduce using rule 63 (dlist1 -> specialvar COMMA dlist1 .)


state 25

    (9) function -> TYPE NAME LPAREN paramlist RPAREN . LBRACE fbody RBRACE
    (6) prototype -> TYPE NAME LPAREN paramlist RPAREN . SEMICOLON

    LBRACE          shift and go to state 28
    SEMICOLON       shift and go to state 29


state 26

    (12) paramlist -> TYPE specialvar . paramlist2
    (13) paramlist2 -> .
    (14) paramlist2 -> . COMMA TYPE NAME paramlist2
    (15) paramlist2 -> . COMMA TYPE specialvar paramlist2

    RPAREN          reduce using rule 13 (paramlist2 -> .)
    COMMA           shift and go to state 30

    paramlist2                     shift and go to state 31

state 27

    (11) paramlist -> TYPE NAME . paramlist2
    (13) paramlist2 -> .
    (14) paramlist2 -> . COMMA TYPE NAME paramlist2
    (15) paramlist2 -> . COMMA TYPE specialvar paramlist2

    RPAREN          reduce using rule 13 (paramlist2 -> .)
    COMMA           shift and go to state 30

    paramlist2                     shift and go to state 32

state 28

    (9) function -> TYPE NAME LPAREN paramlist RPAREN LBRACE . fbody RBRACE
    (16) fbody -> . allstatement fbody
    (17) fbody -> .
    (18) allstatement -> . statement
    (19) allstatement -> . unmatchedstatement
    (20) statement -> . assignment
    (21) statement -> . declaration
    (22) statement -> . whileblock
    (23) statement -> . ifblock
    (24) statement -> . returnstatement
    (25) statement -> . functioncall SEMICOLON
    (30) statement -> . SEMICOLON
    (31) unmatchedstatement -> . IF LPAREN conditional RPAREN allstatement
    (32) unmatchedstatement -> . IF LPAREN conditional RPAREN statement ELSE unmatchedstatement
    (33) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement
    (34) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE
    (66) assignment -> . assignment_base SEMICOLON
    (59) declaration -> . TYPE dlist1 SEMICOLON
    (39) whileblock -> . WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE
    (35) ifblock -> . IF LPAREN conditional RPAREN statement ELSE statement
    (36) ifblock -> . IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE
    (37) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE
    (38) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement
    (26) returnstatement -> . RETURN expression SEMICOLON
    (27) functioncall -> . NAME LPAREN arguments RPAREN
    (67) assignment_base -> . TIMES pointervar EQUALS expression
    (68) assignment_base -> . NAME EQUALS expression

    RBRACE          reduce using rule 17 (fbody -> .)
    SEMICOLON       shift and go to state 36
    IF              shift and go to state 46
    TYPE            shift and go to state 50
    WHILE           shift and go to state 34
    RETURN          shift and go to state 33
    NAME            shift and go to state 47
    TIMES           shift and go to state 44

    unmatchedstatement             shift and go to state 35
    assignment                     shift and go to state 42
    declaration                    shift and go to state 43
    whileblock                     shift and go to state 37
    ifblock                        shift and go to state 38
    allstatement                   shift and go to state 48
    statement                      shift and go to state 39
    fbody                          shift and go to state 45
    functioncall                   shift and go to state 40
    returnstatement                shift and go to state 49
    assignment_base                shift and go to state 41

state 29

    (6) prototype -> TYPE NAME LPAREN paramlist RPAREN SEMICOLON .

    TYPE            reduce using rule 6 (prototype -> TYPE NAME LPAREN paramlist RPAREN SEMICOLON .)


state 30

    (14) paramlist2 -> COMMA . TYPE NAME paramlist2
    (15) paramlist2 -> COMMA . TYPE specialvar paramlist2

    TYPE            shift and go to state 51


state 31

    (12) paramlist -> TYPE specialvar paramlist2 .

    RPAREN          reduce using rule 12 (paramlist -> TYPE specialvar paramlist2 .)


state 32

    (11) paramlist -> TYPE NAME paramlist2 .

    RPAREN          reduce using rule 11 (paramlist -> TYPE NAME paramlist2 .)


state 33

    (26) returnstatement -> RETURN . expression SEMICOLON
    (69) expression -> . functioncall
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . MINUS expression
    (75) expression -> . LPAREN expression RPAREN
    (76) expression -> . allnumbers
    (79) expression -> . pointervar
    (27) functioncall -> . NAME LPAREN arguments RPAREN
    (77) allnumbers -> . FLOAT
    (78) allnumbers -> . NUMBER
    (80) pointervar -> . TIMES pointervar
    (81) pointervar -> . ADDROF pointervar
    (82) pointervar -> . NAME

    MINUS           shift and go to state 62
    LPAREN          shift and go to state 60
    NAME            shift and go to state 53
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 57
    TIMES           shift and go to state 58
    ADDROF          shift and go to state 54

    functioncall                   shift and go to state 59
    pointervar                     shift and go to state 56
    allnumbers                     shift and go to state 55
    expression                     shift and go to state 61

state 34

    (39) whileblock -> WHILE . LPAREN conditional RPAREN LBRACE fbody RBRACE

    LPAREN          shift and go to state 63


state 35

    (19) allstatement -> unmatchedstatement .

    SEMICOLON       reduce using rule 19 (allstatement -> unmatchedstatement .)
    IF              reduce using rule 19 (allstatement -> unmatchedstatement .)
    TYPE            reduce using rule 19 (allstatement -> unmatchedstatement .)
    WHILE           reduce using rule 19 (allstatement -> unmatchedstatement .)
    RETURN          reduce using rule 19 (allstatement -> unmatchedstatement .)
    NAME            reduce using rule 19 (allstatement -> unmatchedstatement .)
    TIMES           reduce using rule 19 (allstatement -> unmatchedstatement .)
    RBRACE          reduce using rule 19 (allstatement -> unmatchedstatement .)


state 36

    (30) statement -> SEMICOLON .

    SEMICOLON       reduce using rule 30 (statement -> SEMICOLON .)
    IF              reduce using rule 30 (statement -> SEMICOLON .)
    TYPE            reduce using rule 30 (statement -> SEMICOLON .)
    WHILE           reduce using rule 30 (statement -> SEMICOLON .)
    RETURN          reduce using rule 30 (statement -> SEMICOLON .)
    NAME            reduce using rule 30 (statement -> SEMICOLON .)
    TIMES           reduce using rule 30 (statement -> SEMICOLON .)
    RBRACE          reduce using rule 30 (statement -> SEMICOLON .)
    ELSE            reduce using rule 30 (statement -> SEMICOLON .)


state 37

    (22) statement -> whileblock .

    SEMICOLON       reduce using rule 22 (statement -> whileblock .)
    IF              reduce using rule 22 (statement -> whileblock .)
    TYPE            reduce using rule 22 (statement -> whileblock .)
    WHILE           reduce using rule 22 (statement -> whileblock .)
    RETURN          reduce using rule 22 (statement -> whileblock .)
    NAME            reduce using rule 22 (statement -> whileblock .)
    TIMES           reduce using rule 22 (statement -> whileblock .)
    RBRACE          reduce using rule 22 (statement -> whileblock .)
    ELSE            reduce using rule 22 (statement -> whileblock .)


state 38

    (23) statement -> ifblock .

    SEMICOLON       reduce using rule 23 (statement -> ifblock .)
    IF              reduce using rule 23 (statement -> ifblock .)
    TYPE            reduce using rule 23 (statement -> ifblock .)
    WHILE           reduce using rule 23 (statement -> ifblock .)
    RETURN          reduce using rule 23 (statement -> ifblock .)
    NAME            reduce using rule 23 (statement -> ifblock .)
    TIMES           reduce using rule 23 (statement -> ifblock .)
    RBRACE          reduce using rule 23 (statement -> ifblock .)
    ELSE            reduce using rule 23 (statement -> ifblock .)


state 39

    (18) allstatement -> statement .

    SEMICOLON       reduce using rule 18 (allstatement -> statement .)
    IF              reduce using rule 18 (allstatement -> statement .)
    TYPE            reduce using rule 18 (allstatement -> statement .)
    WHILE           reduce using rule 18 (allstatement -> statement .)
    RETURN          reduce using rule 18 (allstatement -> statement .)
    NAME            reduce using rule 18 (allstatement -> statement .)
    TIMES           reduce using rule 18 (allstatement -> statement .)
    RBRACE          reduce using rule 18 (allstatement -> statement .)


state 40

    (25) statement -> functioncall . SEMICOLON

    SEMICOLON       shift and go to state 64


state 41

    (66) assignment -> assignment_base . SEMICOLON

    SEMICOLON       shift and go to state 65


state 42

    (20) statement -> assignment .

    SEMICOLON       reduce using rule 20 (statement -> assignment .)
    IF              reduce using rule 20 (statement -> assignment .)
    TYPE            reduce using rule 20 (statement -> assignment .)
    WHILE           reduce using rule 20 (statement -> assignment .)
    RETURN          reduce using rule 20 (statement -> assignment .)
    NAME            reduce using rule 20 (statement -> assignment .)
    TIMES           reduce using rule 20 (statement -> assignment .)
    RBRACE          reduce using rule 20 (statement -> assignment .)
    ELSE            reduce using rule 20 (statement -> assignment .)


state 43

    (21) statement -> declaration .

    SEMICOLON       reduce using rule 21 (statement -> declaration .)
    IF              reduce using rule 21 (statement -> declaration .)
    TYPE            reduce using rule 21 (statement -> declaration .)
    WHILE           reduce using rule 21 (statement -> declaration .)
    RETURN          reduce using rule 21 (statement -> declaration .)
    NAME            reduce using rule 21 (statement -> declaration .)
    TIMES           reduce using rule 21 (statement -> declaration .)
    RBRACE          reduce using rule 21 (statement -> declaration .)
    ELSE            reduce using rule 21 (statement -> declaration .)


state 44

    (67) assignment_base -> TIMES . pointervar EQUALS expression
    (80) pointervar -> . TIMES pointervar
    (81) pointervar -> . ADDROF pointervar
    (82) pointervar -> . NAME

    TIMES           shift and go to state 58
    ADDROF          shift and go to state 54
    NAME            shift and go to state 66

    pointervar                     shift and go to state 67

state 45

    (9) function -> TYPE NAME LPAREN paramlist RPAREN LBRACE fbody . RBRACE

    RBRACE          shift and go to state 68


state 46

    (31) unmatchedstatement -> IF . LPAREN conditional RPAREN allstatement
    (32) unmatchedstatement -> IF . LPAREN conditional RPAREN statement ELSE unmatchedstatement
    (33) unmatchedstatement -> IF . LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement
    (34) unmatchedstatement -> IF . LPAREN conditional RPAREN LBRACE fbody RBRACE
    (35) ifblock -> IF . LPAREN conditional RPAREN statement ELSE statement
    (36) ifblock -> IF . LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE
    (37) ifblock -> IF . LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE
    (38) ifblock -> IF . LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement

    LPAREN          shift and go to state 69


state 47

    (27) functioncall -> NAME . LPAREN arguments RPAREN
    (68) assignment_base -> NAME . EQUALS expression

    LPAREN          shift and go to state 71
    EQUALS          shift and go to state 70


state 48

    (16) fbody -> allstatement . fbody
    (16) fbody -> . allstatement fbody
    (17) fbody -> .
    (18) allstatement -> . statement
    (19) allstatement -> . unmatchedstatement
    (20) statement -> . assignment
    (21) statement -> . declaration
    (22) statement -> . whileblock
    (23) statement -> . ifblock
    (24) statement -> . returnstatement
    (25) statement -> . functioncall SEMICOLON
    (30) statement -> . SEMICOLON
    (31) unmatchedstatement -> . IF LPAREN conditional RPAREN allstatement
    (32) unmatchedstatement -> . IF LPAREN conditional RPAREN statement ELSE unmatchedstatement
    (33) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement
    (34) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE
    (66) assignment -> . assignment_base SEMICOLON
    (59) declaration -> . TYPE dlist1 SEMICOLON
    (39) whileblock -> . WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE
    (35) ifblock -> . IF LPAREN conditional RPAREN statement ELSE statement
    (36) ifblock -> . IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE
    (37) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE
    (38) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement
    (26) returnstatement -> . RETURN expression SEMICOLON
    (27) functioncall -> . NAME LPAREN arguments RPAREN
    (67) assignment_base -> . TIMES pointervar EQUALS expression
    (68) assignment_base -> . NAME EQUALS expression

    RBRACE          reduce using rule 17 (fbody -> .)
    SEMICOLON       shift and go to state 36
    IF              shift and go to state 46
    TYPE            shift and go to state 50
    WHILE           shift and go to state 34
    RETURN          shift and go to state 33
    NAME            shift and go to state 47
    TIMES           shift and go to state 44

    unmatchedstatement             shift and go to state 35
    assignment                     shift and go to state 42
    fbody                          shift and go to state 72
    whileblock                     shift and go to state 37
    ifblock                        shift and go to state 38
    allstatement                   shift and go to state 48
    statement                      shift and go to state 39
    declaration                    shift and go to state 43
    functioncall                   shift and go to state 40
    returnstatement                shift and go to state 49
    assignment_base                shift and go to state 41

state 49

    (24) statement -> returnstatement .

    SEMICOLON       reduce using rule 24 (statement -> returnstatement .)
    IF              reduce using rule 24 (statement -> returnstatement .)
    TYPE            reduce using rule 24 (statement -> returnstatement .)
    WHILE           reduce using rule 24 (statement -> returnstatement .)
    RETURN          reduce using rule 24 (statement -> returnstatement .)
    NAME            reduce using rule 24 (statement -> returnstatement .)
    TIMES           reduce using rule 24 (statement -> returnstatement .)
    RBRACE          reduce using rule 24 (statement -> returnstatement .)
    ELSE            reduce using rule 24 (statement -> returnstatement .)


state 50

    (59) declaration -> TYPE . dlist1 SEMICOLON
    (60) dlist1 -> . NAME
    (61) dlist1 -> . NAME COMMA dlist1
    (62) dlist1 -> . specialvar
    (63) dlist1 -> . specialvar COMMA dlist1
    (64) specialvar -> . TIMES specialvar
    (65) specialvar -> . TIMES NAME

    NAME            shift and go to state 21
    TIMES           shift and go to state 11

    specialvar                     shift and go to state 13
    dlist1                         shift and go to state 12

state 51

    (14) paramlist2 -> COMMA TYPE . NAME paramlist2
    (15) paramlist2 -> COMMA TYPE . specialvar paramlist2
    (64) specialvar -> . TIMES specialvar
    (65) specialvar -> . TIMES NAME

    NAME            shift and go to state 73
    TIMES           shift and go to state 11

    specialvar                     shift and go to state 74

state 52

    (77) allnumbers -> FLOAT .

    PLUS            reduce using rule 77 (allnumbers -> FLOAT .)
    MINUS           reduce using rule 77 (allnumbers -> FLOAT .)
    DIVIDE          reduce using rule 77 (allnumbers -> FLOAT .)
    TIMES           reduce using rule 77 (allnumbers -> FLOAT .)
    RPAREN          reduce using rule 77 (allnumbers -> FLOAT .)
    LESSTHANEQ      reduce using rule 77 (allnumbers -> FLOAT .)
    GREATERTHANEQ   reduce using rule 77 (allnumbers -> FLOAT .)
    UNEQUAL         reduce using rule 77 (allnumbers -> FLOAT .)
    EQUALCHECK      reduce using rule 77 (allnumbers -> FLOAT .)
    LESSTHAN        reduce using rule 77 (allnumbers -> FLOAT .)
    GREATERTHAN     reduce using rule 77 (allnumbers -> FLOAT .)
    ANDOPERATOR     reduce using rule 77 (allnumbers -> FLOAT .)
    OROPERATOR      reduce using rule 77 (allnumbers -> FLOAT .)
    SEMICOLON       reduce using rule 77 (allnumbers -> FLOAT .)
    COMMA           reduce using rule 77 (allnumbers -> FLOAT .)


state 53

    (27) functioncall -> NAME . LPAREN arguments RPAREN
    (82) pointervar -> NAME .

    LPAREN          shift and go to state 71
    RPAREN          reduce using rule 82 (pointervar -> NAME .)
    PLUS            reduce using rule 82 (pointervar -> NAME .)
    MINUS           reduce using rule 82 (pointervar -> NAME .)
    DIVIDE          reduce using rule 82 (pointervar -> NAME .)
    TIMES           reduce using rule 82 (pointervar -> NAME .)
    LESSTHANEQ      reduce using rule 82 (pointervar -> NAME .)
    GREATERTHANEQ   reduce using rule 82 (pointervar -> NAME .)
    UNEQUAL         reduce using rule 82 (pointervar -> NAME .)
    EQUALCHECK      reduce using rule 82 (pointervar -> NAME .)
    LESSTHAN        reduce using rule 82 (pointervar -> NAME .)
    GREATERTHAN     reduce using rule 82 (pointervar -> NAME .)
    ANDOPERATOR     reduce using rule 82 (pointervar -> NAME .)
    OROPERATOR      reduce using rule 82 (pointervar -> NAME .)
    SEMICOLON       reduce using rule 82 (pointervar -> NAME .)
    COMMA           reduce using rule 82 (pointervar -> NAME .)


state 54

    (81) pointervar -> ADDROF . pointervar
    (80) pointervar -> . TIMES pointervar
    (81) pointervar -> . ADDROF pointervar
    (82) pointervar -> . NAME

    TIMES           shift and go to state 58
    ADDROF          shift and go to state 54
    NAME            shift and go to state 66

    pointervar                     shift and go to state 75

state 55

    (76) expression -> allnumbers .

    PLUS            reduce using rule 76 (expression -> allnumbers .)
    MINUS           reduce using rule 76 (expression -> allnumbers .)
    DIVIDE          reduce using rule 76 (expression -> allnumbers .)
    TIMES           reduce using rule 76 (expression -> allnumbers .)
    LESSTHANEQ      reduce using rule 76 (expression -> allnumbers .)
    GREATERTHANEQ   reduce using rule 76 (expression -> allnumbers .)
    UNEQUAL         reduce using rule 76 (expression -> allnumbers .)
    EQUALCHECK      reduce using rule 76 (expression -> allnumbers .)
    LESSTHAN        reduce using rule 76 (expression -> allnumbers .)
    GREATERTHAN     reduce using rule 76 (expression -> allnumbers .)
    COMMA           reduce using rule 76 (expression -> allnumbers .)
    RPAREN          reduce using rule 76 (expression -> allnumbers .)
    SEMICOLON       reduce using rule 76 (expression -> allnumbers .)
    ANDOPERATOR     reduce using rule 76 (expression -> allnumbers .)
    OROPERATOR      reduce using rule 76 (expression -> allnumbers .)


state 56

    (79) expression -> pointervar .

    PLUS            reduce using rule 79 (expression -> pointervar .)
    MINUS           reduce using rule 79 (expression -> pointervar .)
    DIVIDE          reduce using rule 79 (expression -> pointervar .)
    TIMES           reduce using rule 79 (expression -> pointervar .)
    LESSTHANEQ      reduce using rule 79 (expression -> pointervar .)
    GREATERTHANEQ   reduce using rule 79 (expression -> pointervar .)
    UNEQUAL         reduce using rule 79 (expression -> pointervar .)
    EQUALCHECK      reduce using rule 79 (expression -> pointervar .)
    LESSTHAN        reduce using rule 79 (expression -> pointervar .)
    GREATERTHAN     reduce using rule 79 (expression -> pointervar .)
    COMMA           reduce using rule 79 (expression -> pointervar .)
    RPAREN          reduce using rule 79 (expression -> pointervar .)
    SEMICOLON       reduce using rule 79 (expression -> pointervar .)
    ANDOPERATOR     reduce using rule 79 (expression -> pointervar .)
    OROPERATOR      reduce using rule 79 (expression -> pointervar .)


state 57

    (78) allnumbers -> NUMBER .

    PLUS            reduce using rule 78 (allnumbers -> NUMBER .)
    MINUS           reduce using rule 78 (allnumbers -> NUMBER .)
    DIVIDE          reduce using rule 78 (allnumbers -> NUMBER .)
    TIMES           reduce using rule 78 (allnumbers -> NUMBER .)
    RPAREN          reduce using rule 78 (allnumbers -> NUMBER .)
    LESSTHANEQ      reduce using rule 78 (allnumbers -> NUMBER .)
    GREATERTHANEQ   reduce using rule 78 (allnumbers -> NUMBER .)
    UNEQUAL         reduce using rule 78 (allnumbers -> NUMBER .)
    EQUALCHECK      reduce using rule 78 (allnumbers -> NUMBER .)
    LESSTHAN        reduce using rule 78 (allnumbers -> NUMBER .)
    GREATERTHAN     reduce using rule 78 (allnumbers -> NUMBER .)
    ANDOPERATOR     reduce using rule 78 (allnumbers -> NUMBER .)
    OROPERATOR      reduce using rule 78 (allnumbers -> NUMBER .)
    SEMICOLON       reduce using rule 78 (allnumbers -> NUMBER .)
    COMMA           reduce using rule 78 (allnumbers -> NUMBER .)


state 58

    (80) pointervar -> TIMES . pointervar
    (80) pointervar -> . TIMES pointervar
    (81) pointervar -> . ADDROF pointervar
    (82) pointervar -> . NAME

    TIMES           shift and go to state 58
    ADDROF          shift and go to state 54
    NAME            shift and go to state 66

    pointervar                     shift and go to state 76

state 59

    (69) expression -> functioncall .

    PLUS            reduce using rule 69 (expression -> functioncall .)
    MINUS           reduce using rule 69 (expression -> functioncall .)
    DIVIDE          reduce using rule 69 (expression -> functioncall .)
    TIMES           reduce using rule 69 (expression -> functioncall .)
    LESSTHANEQ      reduce using rule 69 (expression -> functioncall .)
    GREATERTHANEQ   reduce using rule 69 (expression -> functioncall .)
    UNEQUAL         reduce using rule 69 (expression -> functioncall .)
    EQUALCHECK      reduce using rule 69 (expression -> functioncall .)
    LESSTHAN        reduce using rule 69 (expression -> functioncall .)
    GREATERTHAN     reduce using rule 69 (expression -> functioncall .)
    COMMA           reduce using rule 69 (expression -> functioncall .)
    RPAREN          reduce using rule 69 (expression -> functioncall .)
    SEMICOLON       reduce using rule 69 (expression -> functioncall .)
    ANDOPERATOR     reduce using rule 69 (expression -> functioncall .)
    OROPERATOR      reduce using rule 69 (expression -> functioncall .)


state 60

    (75) expression -> LPAREN . expression RPAREN
    (69) expression -> . functioncall
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . MINUS expression
    (75) expression -> . LPAREN expression RPAREN
    (76) expression -> . allnumbers
    (79) expression -> . pointervar
    (27) functioncall -> . NAME LPAREN arguments RPAREN
    (77) allnumbers -> . FLOAT
    (78) allnumbers -> . NUMBER
    (80) pointervar -> . TIMES pointervar
    (81) pointervar -> . ADDROF pointervar
    (82) pointervar -> . NAME

    MINUS           shift and go to state 62
    LPAREN          shift and go to state 60
    NAME            shift and go to state 53
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 57
    TIMES           shift and go to state 58
    ADDROF          shift and go to state 54

    functioncall                   shift and go to state 59
    pointervar                     shift and go to state 56
    allnumbers                     shift and go to state 55
    expression                     shift and go to state 77

state 61

    (26) returnstatement -> RETURN expression . SEMICOLON
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . TIMES expression

    SEMICOLON       shift and go to state 79
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    DIVIDE          shift and go to state 78
    TIMES           shift and go to state 80


state 62

    (74) expression -> MINUS . expression
    (69) expression -> . functioncall
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . MINUS expression
    (75) expression -> . LPAREN expression RPAREN
    (76) expression -> . allnumbers
    (79) expression -> . pointervar
    (27) functioncall -> . NAME LPAREN arguments RPAREN
    (77) allnumbers -> . FLOAT
    (78) allnumbers -> . NUMBER
    (80) pointervar -> . TIMES pointervar
    (81) pointervar -> . ADDROF pointervar
    (82) pointervar -> . NAME

    MINUS           shift and go to state 62
    LPAREN          shift and go to state 60
    NAME            shift and go to state 53
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 57
    TIMES           shift and go to state 58
    ADDROF          shift and go to state 54

    functioncall                   shift and go to state 59
    pointervar                     shift and go to state 56
    allnumbers                     shift and go to state 55
    expression                     shift and go to state 83

state 63

    (39) whileblock -> WHILE LPAREN . conditional RPAREN LBRACE fbody RBRACE
    (40) conditional -> . LPAREN conditional RPAREN
    (41) conditional -> . conditionbase
    (42) conditional -> . NOT LPAREN conditional RPAREN
    (43) conditional -> . conditional LESSTHANEQ conditional
    (44) conditional -> . conditional GREATERTHANEQ conditional
    (45) conditional -> . conditional UNEQUAL conditional
    (46) conditional -> . conditional EQUALCHECK conditional
    (47) conditional -> . conditional LESSTHAN conditional
    (48) conditional -> . conditional GREATERTHAN conditional
    (49) conditional -> . conditional ANDOPERATOR conditional
    (50) conditional -> . conditional OROPERATOR conditional
    (51) conditionbase -> . CS LESSTHANEQ CS
    (52) conditionbase -> . CS GREATERTHANEQ CS
    (53) conditionbase -> . CS UNEQUAL CS
    (54) conditionbase -> . CS EQUALCHECK CS
    (55) conditionbase -> . CS LESSTHAN CS
    (56) conditionbase -> . CS GREATERTHAN CS
    (57) CS -> . expression
    (58) CS -> . NOT LPAREN expression RPAREN
    (69) expression -> . functioncall
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . MINUS expression
    (75) expression -> . LPAREN expression RPAREN
    (76) expression -> . allnumbers
    (79) expression -> . pointervar
    (27) functioncall -> . NAME LPAREN arguments RPAREN
    (77) allnumbers -> . FLOAT
    (78) allnumbers -> . NUMBER
    (80) pointervar -> . TIMES pointervar
    (81) pointervar -> . ADDROF pointervar
    (82) pointervar -> . NAME

    LPAREN          shift and go to state 86
    NOT             shift and go to state 88
    MINUS           shift and go to state 62
    NAME            shift and go to state 53
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 57
    TIMES           shift and go to state 58
    ADDROF          shift and go to state 54

    allnumbers                     shift and go to state 55
    pointervar                     shift and go to state 56
    conditionbase                  shift and go to state 84
    conditional                    shift and go to state 85
    functioncall                   shift and go to state 59
    CS                             shift and go to state 87
    expression                     shift and go to state 89

state 64

    (25) statement -> functioncall SEMICOLON .

    SEMICOLON       reduce using rule 25 (statement -> functioncall SEMICOLON .)
    IF              reduce using rule 25 (statement -> functioncall SEMICOLON .)
    TYPE            reduce using rule 25 (statement -> functioncall SEMICOLON .)
    WHILE           reduce using rule 25 (statement -> functioncall SEMICOLON .)
    RETURN          reduce using rule 25 (statement -> functioncall SEMICOLON .)
    NAME            reduce using rule 25 (statement -> functioncall SEMICOLON .)
    TIMES           reduce using rule 25 (statement -> functioncall SEMICOLON .)
    RBRACE          reduce using rule 25 (statement -> functioncall SEMICOLON .)
    ELSE            reduce using rule 25 (statement -> functioncall SEMICOLON .)


state 65

    (66) assignment -> assignment_base SEMICOLON .

    SEMICOLON       reduce using rule 66 (assignment -> assignment_base SEMICOLON .)
    IF              reduce using rule 66 (assignment -> assignment_base SEMICOLON .)
    TYPE            reduce using rule 66 (assignment -> assignment_base SEMICOLON .)
    WHILE           reduce using rule 66 (assignment -> assignment_base SEMICOLON .)
    RETURN          reduce using rule 66 (assignment -> assignment_base SEMICOLON .)
    NAME            reduce using rule 66 (assignment -> assignment_base SEMICOLON .)
    TIMES           reduce using rule 66 (assignment -> assignment_base SEMICOLON .)
    RBRACE          reduce using rule 66 (assignment -> assignment_base SEMICOLON .)
    ELSE            reduce using rule 66 (assignment -> assignment_base SEMICOLON .)


state 66

    (82) pointervar -> NAME .

    SEMICOLON       reduce using rule 82 (pointervar -> NAME .)
    PLUS            reduce using rule 82 (pointervar -> NAME .)
    MINUS           reduce using rule 82 (pointervar -> NAME .)
    DIVIDE          reduce using rule 82 (pointervar -> NAME .)
    TIMES           reduce using rule 82 (pointervar -> NAME .)
    EQUALS          reduce using rule 82 (pointervar -> NAME .)
    RPAREN          reduce using rule 82 (pointervar -> NAME .)
    LESSTHANEQ      reduce using rule 82 (pointervar -> NAME .)
    GREATERTHANEQ   reduce using rule 82 (pointervar -> NAME .)
    UNEQUAL         reduce using rule 82 (pointervar -> NAME .)
    EQUALCHECK      reduce using rule 82 (pointervar -> NAME .)
    LESSTHAN        reduce using rule 82 (pointervar -> NAME .)
    GREATERTHAN     reduce using rule 82 (pointervar -> NAME .)
    COMMA           reduce using rule 82 (pointervar -> NAME .)
    ANDOPERATOR     reduce using rule 82 (pointervar -> NAME .)
    OROPERATOR      reduce using rule 82 (pointervar -> NAME .)


state 67

    (67) assignment_base -> TIMES pointervar . EQUALS expression

    EQUALS          shift and go to state 90


state 68

    (9) function -> TYPE NAME LPAREN paramlist RPAREN LBRACE fbody RBRACE .

    TYPE            reduce using rule 9 (function -> TYPE NAME LPAREN paramlist RPAREN LBRACE fbody RBRACE .)
    $end            reduce using rule 9 (function -> TYPE NAME LPAREN paramlist RPAREN LBRACE fbody RBRACE .)


state 69

    (31) unmatchedstatement -> IF LPAREN . conditional RPAREN allstatement
    (32) unmatchedstatement -> IF LPAREN . conditional RPAREN statement ELSE unmatchedstatement
    (33) unmatchedstatement -> IF LPAREN . conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement
    (34) unmatchedstatement -> IF LPAREN . conditional RPAREN LBRACE fbody RBRACE
    (35) ifblock -> IF LPAREN . conditional RPAREN statement ELSE statement
    (36) ifblock -> IF LPAREN . conditional RPAREN statement ELSE LBRACE fbody RBRACE
    (37) ifblock -> IF LPAREN . conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE
    (38) ifblock -> IF LPAREN . conditional RPAREN LBRACE fbody RBRACE ELSE statement
    (40) conditional -> . LPAREN conditional RPAREN
    (41) conditional -> . conditionbase
    (42) conditional -> . NOT LPAREN conditional RPAREN
    (43) conditional -> . conditional LESSTHANEQ conditional
    (44) conditional -> . conditional GREATERTHANEQ conditional
    (45) conditional -> . conditional UNEQUAL conditional
    (46) conditional -> . conditional EQUALCHECK conditional
    (47) conditional -> . conditional LESSTHAN conditional
    (48) conditional -> . conditional GREATERTHAN conditional
    (49) conditional -> . conditional ANDOPERATOR conditional
    (50) conditional -> . conditional OROPERATOR conditional
    (51) conditionbase -> . CS LESSTHANEQ CS
    (52) conditionbase -> . CS GREATERTHANEQ CS
    (53) conditionbase -> . CS UNEQUAL CS
    (54) conditionbase -> . CS EQUALCHECK CS
    (55) conditionbase -> . CS LESSTHAN CS
    (56) conditionbase -> . CS GREATERTHAN CS
    (57) CS -> . expression
    (58) CS -> . NOT LPAREN expression RPAREN
    (69) expression -> . functioncall
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . MINUS expression
    (75) expression -> . LPAREN expression RPAREN
    (76) expression -> . allnumbers
    (79) expression -> . pointervar
    (27) functioncall -> . NAME LPAREN arguments RPAREN
    (77) allnumbers -> . FLOAT
    (78) allnumbers -> . NUMBER
    (80) pointervar -> . TIMES pointervar
    (81) pointervar -> . ADDROF pointervar
    (82) pointervar -> . NAME

    LPAREN          shift and go to state 86
    NOT             shift and go to state 88
    MINUS           shift and go to state 62
    NAME            shift and go to state 53
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 57
    TIMES           shift and go to state 58
    ADDROF          shift and go to state 54

    allnumbers                     shift and go to state 55
    pointervar                     shift and go to state 56
    conditionbase                  shift and go to state 84
    conditional                    shift and go to state 91
    CS                             shift and go to state 87
    functioncall                   shift and go to state 59
    expression                     shift and go to state 89

state 70

    (68) assignment_base -> NAME EQUALS . expression
    (69) expression -> . functioncall
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . MINUS expression
    (75) expression -> . LPAREN expression RPAREN
    (76) expression -> . allnumbers
    (79) expression -> . pointervar
    (27) functioncall -> . NAME LPAREN arguments RPAREN
    (77) allnumbers -> . FLOAT
    (78) allnumbers -> . NUMBER
    (80) pointervar -> . TIMES pointervar
    (81) pointervar -> . ADDROF pointervar
    (82) pointervar -> . NAME

    MINUS           shift and go to state 62
    LPAREN          shift and go to state 60
    NAME            shift and go to state 53
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 57
    TIMES           shift and go to state 58
    ADDROF          shift and go to state 54

    functioncall                   shift and go to state 59
    pointervar                     shift and go to state 56
    allnumbers                     shift and go to state 55
    expression                     shift and go to state 92

state 71

    (27) functioncall -> NAME LPAREN . arguments RPAREN
    (28) arguments -> . expression
    (29) arguments -> . expression COMMA arguments
    (69) expression -> . functioncall
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . MINUS expression
    (75) expression -> . LPAREN expression RPAREN
    (76) expression -> . allnumbers
    (79) expression -> . pointervar
    (27) functioncall -> . NAME LPAREN arguments RPAREN
    (77) allnumbers -> . FLOAT
    (78) allnumbers -> . NUMBER
    (80) pointervar -> . TIMES pointervar
    (81) pointervar -> . ADDROF pointervar
    (82) pointervar -> . NAME

    MINUS           shift and go to state 62
    LPAREN          shift and go to state 60
    NAME            shift and go to state 53
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 57
    TIMES           shift and go to state 58
    ADDROF          shift and go to state 54

    functioncall                   shift and go to state 59
    pointervar                     shift and go to state 56
    allnumbers                     shift and go to state 55
    expression                     shift and go to state 94
    arguments                      shift and go to state 93

state 72

    (16) fbody -> allstatement fbody .

    RBRACE          reduce using rule 16 (fbody -> allstatement fbody .)


state 73

    (14) paramlist2 -> COMMA TYPE NAME . paramlist2
    (13) paramlist2 -> .
    (14) paramlist2 -> . COMMA TYPE NAME paramlist2
    (15) paramlist2 -> . COMMA TYPE specialvar paramlist2

    RPAREN          reduce using rule 13 (paramlist2 -> .)
    COMMA           shift and go to state 30

    paramlist2                     shift and go to state 95

state 74

    (15) paramlist2 -> COMMA TYPE specialvar . paramlist2
    (13) paramlist2 -> .
    (14) paramlist2 -> . COMMA TYPE NAME paramlist2
    (15) paramlist2 -> . COMMA TYPE specialvar paramlist2

    RPAREN          reduce using rule 13 (paramlist2 -> .)
    COMMA           shift and go to state 30

    paramlist2                     shift and go to state 96

state 75

    (81) pointervar -> ADDROF pointervar .

    RPAREN          reduce using rule 81 (pointervar -> ADDROF pointervar .)
    PLUS            reduce using rule 81 (pointervar -> ADDROF pointervar .)
    MINUS           reduce using rule 81 (pointervar -> ADDROF pointervar .)
    DIVIDE          reduce using rule 81 (pointervar -> ADDROF pointervar .)
    TIMES           reduce using rule 81 (pointervar -> ADDROF pointervar .)
    LESSTHANEQ      reduce using rule 81 (pointervar -> ADDROF pointervar .)
    GREATERTHANEQ   reduce using rule 81 (pointervar -> ADDROF pointervar .)
    UNEQUAL         reduce using rule 81 (pointervar -> ADDROF pointervar .)
    EQUALCHECK      reduce using rule 81 (pointervar -> ADDROF pointervar .)
    LESSTHAN        reduce using rule 81 (pointervar -> ADDROF pointervar .)
    GREATERTHAN     reduce using rule 81 (pointervar -> ADDROF pointervar .)
    ANDOPERATOR     reduce using rule 81 (pointervar -> ADDROF pointervar .)
    OROPERATOR      reduce using rule 81 (pointervar -> ADDROF pointervar .)
    SEMICOLON       reduce using rule 81 (pointervar -> ADDROF pointervar .)
    EQUALS          reduce using rule 81 (pointervar -> ADDROF pointervar .)
    COMMA           reduce using rule 81 (pointervar -> ADDROF pointervar .)


state 76

    (80) pointervar -> TIMES pointervar .

    RPAREN          reduce using rule 80 (pointervar -> TIMES pointervar .)
    PLUS            reduce using rule 80 (pointervar -> TIMES pointervar .)
    MINUS           reduce using rule 80 (pointervar -> TIMES pointervar .)
    DIVIDE          reduce using rule 80 (pointervar -> TIMES pointervar .)
    TIMES           reduce using rule 80 (pointervar -> TIMES pointervar .)
    LESSTHANEQ      reduce using rule 80 (pointervar -> TIMES pointervar .)
    GREATERTHANEQ   reduce using rule 80 (pointervar -> TIMES pointervar .)
    UNEQUAL         reduce using rule 80 (pointervar -> TIMES pointervar .)
    EQUALCHECK      reduce using rule 80 (pointervar -> TIMES pointervar .)
    LESSTHAN        reduce using rule 80 (pointervar -> TIMES pointervar .)
    GREATERTHAN     reduce using rule 80 (pointervar -> TIMES pointervar .)
    ANDOPERATOR     reduce using rule 80 (pointervar -> TIMES pointervar .)
    OROPERATOR      reduce using rule 80 (pointervar -> TIMES pointervar .)
    SEMICOLON       reduce using rule 80 (pointervar -> TIMES pointervar .)
    EQUALS          reduce using rule 80 (pointervar -> TIMES pointervar .)
    COMMA           reduce using rule 80 (pointervar -> TIMES pointervar .)


state 77

    (75) expression -> LPAREN expression . RPAREN
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . TIMES expression

    RPAREN          shift and go to state 97
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    DIVIDE          shift and go to state 78
    TIMES           shift and go to state 80


state 78

    (72) expression -> expression DIVIDE . expression
    (69) expression -> . functioncall
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . MINUS expression
    (75) expression -> . LPAREN expression RPAREN
    (76) expression -> . allnumbers
    (79) expression -> . pointervar
    (27) functioncall -> . NAME LPAREN arguments RPAREN
    (77) allnumbers -> . FLOAT
    (78) allnumbers -> . NUMBER
    (80) pointervar -> . TIMES pointervar
    (81) pointervar -> . ADDROF pointervar
    (82) pointervar -> . NAME

    MINUS           shift and go to state 62
    LPAREN          shift and go to state 60
    NAME            shift and go to state 53
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 57
    TIMES           shift and go to state 58
    ADDROF          shift and go to state 54

    functioncall                   shift and go to state 59
    pointervar                     shift and go to state 56
    allnumbers                     shift and go to state 55
    expression                     shift and go to state 98

state 79

    (26) returnstatement -> RETURN expression SEMICOLON .

    SEMICOLON       reduce using rule 26 (returnstatement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 26 (returnstatement -> RETURN expression SEMICOLON .)
    TYPE            reduce using rule 26 (returnstatement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 26 (returnstatement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 26 (returnstatement -> RETURN expression SEMICOLON .)
    NAME            reduce using rule 26 (returnstatement -> RETURN expression SEMICOLON .)
    TIMES           reduce using rule 26 (returnstatement -> RETURN expression SEMICOLON .)
    RBRACE          reduce using rule 26 (returnstatement -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 26 (returnstatement -> RETURN expression SEMICOLON .)


state 80

    (73) expression -> expression TIMES . expression
    (69) expression -> . functioncall
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . MINUS expression
    (75) expression -> . LPAREN expression RPAREN
    (76) expression -> . allnumbers
    (79) expression -> . pointervar
    (27) functioncall -> . NAME LPAREN arguments RPAREN
    (77) allnumbers -> . FLOAT
    (78) allnumbers -> . NUMBER
    (80) pointervar -> . TIMES pointervar
    (81) pointervar -> . ADDROF pointervar
    (82) pointervar -> . NAME

    MINUS           shift and go to state 62
    LPAREN          shift and go to state 60
    NAME            shift and go to state 53
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 57
    TIMES           shift and go to state 58
    ADDROF          shift and go to state 54

    functioncall                   shift and go to state 59
    pointervar                     shift and go to state 56
    allnumbers                     shift and go to state 55
    expression                     shift and go to state 99

state 81

    (70) expression -> expression PLUS . expression
    (69) expression -> . functioncall
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . MINUS expression
    (75) expression -> . LPAREN expression RPAREN
    (76) expression -> . allnumbers
    (79) expression -> . pointervar
    (27) functioncall -> . NAME LPAREN arguments RPAREN
    (77) allnumbers -> . FLOAT
    (78) allnumbers -> . NUMBER
    (80) pointervar -> . TIMES pointervar
    (81) pointervar -> . ADDROF pointervar
    (82) pointervar -> . NAME

    MINUS           shift and go to state 62
    LPAREN          shift and go to state 60
    NAME            shift and go to state 53
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 57
    TIMES           shift and go to state 58
    ADDROF          shift and go to state 54

    functioncall                   shift and go to state 59
    pointervar                     shift and go to state 56
    allnumbers                     shift and go to state 55
    expression                     shift and go to state 100

state 82

    (71) expression -> expression MINUS . expression
    (69) expression -> . functioncall
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . MINUS expression
    (75) expression -> . LPAREN expression RPAREN
    (76) expression -> . allnumbers
    (79) expression -> . pointervar
    (27) functioncall -> . NAME LPAREN arguments RPAREN
    (77) allnumbers -> . FLOAT
    (78) allnumbers -> . NUMBER
    (80) pointervar -> . TIMES pointervar
    (81) pointervar -> . ADDROF pointervar
    (82) pointervar -> . NAME

    MINUS           shift and go to state 62
    LPAREN          shift and go to state 60
    NAME            shift and go to state 53
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 57
    TIMES           shift and go to state 58
    ADDROF          shift and go to state 54

    functioncall                   shift and go to state 59
    pointervar                     shift and go to state 56
    allnumbers                     shift and go to state 55
    expression                     shift and go to state 101

state 83

    (74) expression -> MINUS expression .
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . TIMES expression

    PLUS            reduce using rule 74 (expression -> MINUS expression .)
    MINUS           reduce using rule 74 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 74 (expression -> MINUS expression .)
    TIMES           reduce using rule 74 (expression -> MINUS expression .)
    LESSTHANEQ      reduce using rule 74 (expression -> MINUS expression .)
    GREATERTHANEQ   reduce using rule 74 (expression -> MINUS expression .)
    UNEQUAL         reduce using rule 74 (expression -> MINUS expression .)
    EQUALCHECK      reduce using rule 74 (expression -> MINUS expression .)
    LESSTHAN        reduce using rule 74 (expression -> MINUS expression .)
    GREATERTHAN     reduce using rule 74 (expression -> MINUS expression .)
    COMMA           reduce using rule 74 (expression -> MINUS expression .)
    RPAREN          reduce using rule 74 (expression -> MINUS expression .)
    SEMICOLON       reduce using rule 74 (expression -> MINUS expression .)
    ANDOPERATOR     reduce using rule 74 (expression -> MINUS expression .)
    OROPERATOR      reduce using rule 74 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 81 ]
  ! MINUS           [ shift and go to state 82 ]
  ! DIVIDE          [ shift and go to state 78 ]
  ! TIMES           [ shift and go to state 80 ]


state 84

    (41) conditional -> conditionbase .

    RPAREN          reduce using rule 41 (conditional -> conditionbase .)
    LESSTHANEQ      reduce using rule 41 (conditional -> conditionbase .)
    GREATERTHANEQ   reduce using rule 41 (conditional -> conditionbase .)
    UNEQUAL         reduce using rule 41 (conditional -> conditionbase .)
    EQUALCHECK      reduce using rule 41 (conditional -> conditionbase .)
    LESSTHAN        reduce using rule 41 (conditional -> conditionbase .)
    GREATERTHAN     reduce using rule 41 (conditional -> conditionbase .)
    ANDOPERATOR     reduce using rule 41 (conditional -> conditionbase .)
    OROPERATOR      reduce using rule 41 (conditional -> conditionbase .)


state 85

    (39) whileblock -> WHILE LPAREN conditional . RPAREN LBRACE fbody RBRACE
    (43) conditional -> conditional . LESSTHANEQ conditional
    (44) conditional -> conditional . GREATERTHANEQ conditional
    (45) conditional -> conditional . UNEQUAL conditional
    (46) conditional -> conditional . EQUALCHECK conditional
    (47) conditional -> conditional . LESSTHAN conditional
    (48) conditional -> conditional . GREATERTHAN conditional
    (49) conditional -> conditional . ANDOPERATOR conditional
    (50) conditional -> conditional . OROPERATOR conditional

    RPAREN          shift and go to state 102
    LESSTHANEQ      shift and go to state 109
    GREATERTHANEQ   shift and go to state 107
    UNEQUAL         shift and go to state 108
    EQUALCHECK      shift and go to state 110
    LESSTHAN        shift and go to state 104
    GREATERTHAN     shift and go to state 103
    ANDOPERATOR     shift and go to state 106
    OROPERATOR      shift and go to state 105


state 86

    (40) conditional -> LPAREN . conditional RPAREN
    (75) expression -> LPAREN . expression RPAREN
    (40) conditional -> . LPAREN conditional RPAREN
    (41) conditional -> . conditionbase
    (42) conditional -> . NOT LPAREN conditional RPAREN
    (43) conditional -> . conditional LESSTHANEQ conditional
    (44) conditional -> . conditional GREATERTHANEQ conditional
    (45) conditional -> . conditional UNEQUAL conditional
    (46) conditional -> . conditional EQUALCHECK conditional
    (47) conditional -> . conditional LESSTHAN conditional
    (48) conditional -> . conditional GREATERTHAN conditional
    (49) conditional -> . conditional ANDOPERATOR conditional
    (50) conditional -> . conditional OROPERATOR conditional
    (69) expression -> . functioncall
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . MINUS expression
    (75) expression -> . LPAREN expression RPAREN
    (76) expression -> . allnumbers
    (79) expression -> . pointervar
    (51) conditionbase -> . CS LESSTHANEQ CS
    (52) conditionbase -> . CS GREATERTHANEQ CS
    (53) conditionbase -> . CS UNEQUAL CS
    (54) conditionbase -> . CS EQUALCHECK CS
    (55) conditionbase -> . CS LESSTHAN CS
    (56) conditionbase -> . CS GREATERTHAN CS
    (27) functioncall -> . NAME LPAREN arguments RPAREN
    (77) allnumbers -> . FLOAT
    (78) allnumbers -> . NUMBER
    (80) pointervar -> . TIMES pointervar
    (81) pointervar -> . ADDROF pointervar
    (82) pointervar -> . NAME
    (57) CS -> . expression
    (58) CS -> . NOT LPAREN expression RPAREN

    LPAREN          shift and go to state 86
    NOT             shift and go to state 88
    MINUS           shift and go to state 62
    NAME            shift and go to state 53
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 57
    TIMES           shift and go to state 58
    ADDROF          shift and go to state 54

    allnumbers                     shift and go to state 55
    pointervar                     shift and go to state 56
    conditionbase                  shift and go to state 84
    conditional                    shift and go to state 111
    functioncall                   shift and go to state 59
    CS                             shift and go to state 87
    expression                     shift and go to state 112

state 87

    (51) conditionbase -> CS . LESSTHANEQ CS
    (52) conditionbase -> CS . GREATERTHANEQ CS
    (53) conditionbase -> CS . UNEQUAL CS
    (54) conditionbase -> CS . EQUALCHECK CS
    (55) conditionbase -> CS . LESSTHAN CS
    (56) conditionbase -> CS . GREATERTHAN CS

    LESSTHANEQ      shift and go to state 117
    GREATERTHANEQ   shift and go to state 115
    UNEQUAL         shift and go to state 113
    EQUALCHECK      shift and go to state 118
    LESSTHAN        shift and go to state 114
    GREATERTHAN     shift and go to state 116


state 88

    (42) conditional -> NOT . LPAREN conditional RPAREN
    (58) CS -> NOT . LPAREN expression RPAREN

    LPAREN          shift and go to state 119


state 89

    (57) CS -> expression .
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . TIMES expression

    RPAREN          reduce using rule 57 (CS -> expression .)
    LESSTHANEQ      reduce using rule 57 (CS -> expression .)
    GREATERTHANEQ   reduce using rule 57 (CS -> expression .)
    UNEQUAL         reduce using rule 57 (CS -> expression .)
    EQUALCHECK      reduce using rule 57 (CS -> expression .)
    LESSTHAN        reduce using rule 57 (CS -> expression .)
    GREATERTHAN     reduce using rule 57 (CS -> expression .)
    ANDOPERATOR     reduce using rule 57 (CS -> expression .)
    OROPERATOR      reduce using rule 57 (CS -> expression .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    DIVIDE          shift and go to state 78
    TIMES           shift and go to state 80


state 90

    (67) assignment_base -> TIMES pointervar EQUALS . expression
    (69) expression -> . functioncall
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . MINUS expression
    (75) expression -> . LPAREN expression RPAREN
    (76) expression -> . allnumbers
    (79) expression -> . pointervar
    (27) functioncall -> . NAME LPAREN arguments RPAREN
    (77) allnumbers -> . FLOAT
    (78) allnumbers -> . NUMBER
    (80) pointervar -> . TIMES pointervar
    (81) pointervar -> . ADDROF pointervar
    (82) pointervar -> . NAME

    MINUS           shift and go to state 62
    LPAREN          shift and go to state 60
    NAME            shift and go to state 53
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 57
    TIMES           shift and go to state 58
    ADDROF          shift and go to state 54

    expression                     shift and go to state 120
    allnumbers                     shift and go to state 55
    pointervar                     shift and go to state 56
    functioncall                   shift and go to state 59

state 91

    (31) unmatchedstatement -> IF LPAREN conditional . RPAREN allstatement
    (32) unmatchedstatement -> IF LPAREN conditional . RPAREN statement ELSE unmatchedstatement
    (33) unmatchedstatement -> IF LPAREN conditional . RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement
    (34) unmatchedstatement -> IF LPAREN conditional . RPAREN LBRACE fbody RBRACE
    (35) ifblock -> IF LPAREN conditional . RPAREN statement ELSE statement
    (36) ifblock -> IF LPAREN conditional . RPAREN statement ELSE LBRACE fbody RBRACE
    (37) ifblock -> IF LPAREN conditional . RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE
    (38) ifblock -> IF LPAREN conditional . RPAREN LBRACE fbody RBRACE ELSE statement
    (43) conditional -> conditional . LESSTHANEQ conditional
    (44) conditional -> conditional . GREATERTHANEQ conditional
    (45) conditional -> conditional . UNEQUAL conditional
    (46) conditional -> conditional . EQUALCHECK conditional
    (47) conditional -> conditional . LESSTHAN conditional
    (48) conditional -> conditional . GREATERTHAN conditional
    (49) conditional -> conditional . ANDOPERATOR conditional
    (50) conditional -> conditional . OROPERATOR conditional

    RPAREN          shift and go to state 121
    LESSTHANEQ      shift and go to state 109
    GREATERTHANEQ   shift and go to state 107
    UNEQUAL         shift and go to state 108
    EQUALCHECK      shift and go to state 110
    LESSTHAN        shift and go to state 104
    GREATERTHAN     shift and go to state 103
    ANDOPERATOR     shift and go to state 106
    OROPERATOR      shift and go to state 105


state 92

    (68) assignment_base -> NAME EQUALS expression .
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . TIMES expression

    SEMICOLON       reduce using rule 68 (assignment_base -> NAME EQUALS expression .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    DIVIDE          shift and go to state 78
    TIMES           shift and go to state 80


state 93

    (27) functioncall -> NAME LPAREN arguments . RPAREN

    RPAREN          shift and go to state 122


state 94

    (28) arguments -> expression .
    (29) arguments -> expression . COMMA arguments
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . TIMES expression

    RPAREN          reduce using rule 28 (arguments -> expression .)
    COMMA           shift and go to state 123
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    DIVIDE          shift and go to state 78
    TIMES           shift and go to state 80


state 95

    (14) paramlist2 -> COMMA TYPE NAME paramlist2 .

    RPAREN          reduce using rule 14 (paramlist2 -> COMMA TYPE NAME paramlist2 .)


state 96

    (15) paramlist2 -> COMMA TYPE specialvar paramlist2 .

    RPAREN          reduce using rule 15 (paramlist2 -> COMMA TYPE specialvar paramlist2 .)


state 97

    (75) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 75 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 75 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 75 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 75 (expression -> LPAREN expression RPAREN .)
    LESSTHANEQ      reduce using rule 75 (expression -> LPAREN expression RPAREN .)
    GREATERTHANEQ   reduce using rule 75 (expression -> LPAREN expression RPAREN .)
    UNEQUAL         reduce using rule 75 (expression -> LPAREN expression RPAREN .)
    EQUALCHECK      reduce using rule 75 (expression -> LPAREN expression RPAREN .)
    LESSTHAN        reduce using rule 75 (expression -> LPAREN expression RPAREN .)
    GREATERTHAN     reduce using rule 75 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 75 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 75 (expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 75 (expression -> LPAREN expression RPAREN .)
    ANDOPERATOR     reduce using rule 75 (expression -> LPAREN expression RPAREN .)
    OROPERATOR      reduce using rule 75 (expression -> LPAREN expression RPAREN .)


state 98

    (72) expression -> expression DIVIDE expression .
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . TIMES expression

    PLUS            reduce using rule 72 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 72 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 72 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 72 (expression -> expression DIVIDE expression .)
    LESSTHANEQ      reduce using rule 72 (expression -> expression DIVIDE expression .)
    GREATERTHANEQ   reduce using rule 72 (expression -> expression DIVIDE expression .)
    UNEQUAL         reduce using rule 72 (expression -> expression DIVIDE expression .)
    EQUALCHECK      reduce using rule 72 (expression -> expression DIVIDE expression .)
    LESSTHAN        reduce using rule 72 (expression -> expression DIVIDE expression .)
    GREATERTHAN     reduce using rule 72 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 72 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 72 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 72 (expression -> expression DIVIDE expression .)
    ANDOPERATOR     reduce using rule 72 (expression -> expression DIVIDE expression .)
    OROPERATOR      reduce using rule 72 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 81 ]
  ! MINUS           [ shift and go to state 82 ]
  ! DIVIDE          [ shift and go to state 78 ]
  ! TIMES           [ shift and go to state 80 ]


state 99

    (73) expression -> expression TIMES expression .
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . TIMES expression

    PLUS            reduce using rule 73 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 73 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 73 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 73 (expression -> expression TIMES expression .)
    LESSTHANEQ      reduce using rule 73 (expression -> expression TIMES expression .)
    GREATERTHANEQ   reduce using rule 73 (expression -> expression TIMES expression .)
    UNEQUAL         reduce using rule 73 (expression -> expression TIMES expression .)
    EQUALCHECK      reduce using rule 73 (expression -> expression TIMES expression .)
    LESSTHAN        reduce using rule 73 (expression -> expression TIMES expression .)
    GREATERTHAN     reduce using rule 73 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 73 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 73 (expression -> expression TIMES expression .)
    SEMICOLON       reduce using rule 73 (expression -> expression TIMES expression .)
    ANDOPERATOR     reduce using rule 73 (expression -> expression TIMES expression .)
    OROPERATOR      reduce using rule 73 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 81 ]
  ! MINUS           [ shift and go to state 82 ]
  ! DIVIDE          [ shift and go to state 78 ]
  ! TIMES           [ shift and go to state 80 ]


state 100

    (70) expression -> expression PLUS expression .
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . TIMES expression

    PLUS            reduce using rule 70 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 70 (expression -> expression PLUS expression .)
    LESSTHANEQ      reduce using rule 70 (expression -> expression PLUS expression .)
    GREATERTHANEQ   reduce using rule 70 (expression -> expression PLUS expression .)
    UNEQUAL         reduce using rule 70 (expression -> expression PLUS expression .)
    EQUALCHECK      reduce using rule 70 (expression -> expression PLUS expression .)
    LESSTHAN        reduce using rule 70 (expression -> expression PLUS expression .)
    GREATERTHAN     reduce using rule 70 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 70 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 70 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 70 (expression -> expression PLUS expression .)
    ANDOPERATOR     reduce using rule 70 (expression -> expression PLUS expression .)
    OROPERATOR      reduce using rule 70 (expression -> expression PLUS expression .)
    DIVIDE          shift and go to state 78
    TIMES           shift and go to state 80

  ! DIVIDE          [ reduce using rule 70 (expression -> expression PLUS expression .) ]
  ! TIMES           [ reduce using rule 70 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 81 ]
  ! MINUS           [ shift and go to state 82 ]


state 101

    (71) expression -> expression MINUS expression .
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . TIMES expression

    PLUS            reduce using rule 71 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 71 (expression -> expression MINUS expression .)
    LESSTHANEQ      reduce using rule 71 (expression -> expression MINUS expression .)
    GREATERTHANEQ   reduce using rule 71 (expression -> expression MINUS expression .)
    UNEQUAL         reduce using rule 71 (expression -> expression MINUS expression .)
    EQUALCHECK      reduce using rule 71 (expression -> expression MINUS expression .)
    LESSTHAN        reduce using rule 71 (expression -> expression MINUS expression .)
    GREATERTHAN     reduce using rule 71 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 71 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 71 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 71 (expression -> expression MINUS expression .)
    ANDOPERATOR     reduce using rule 71 (expression -> expression MINUS expression .)
    OROPERATOR      reduce using rule 71 (expression -> expression MINUS expression .)
    DIVIDE          shift and go to state 78
    TIMES           shift and go to state 80

  ! DIVIDE          [ reduce using rule 71 (expression -> expression MINUS expression .) ]
  ! TIMES           [ reduce using rule 71 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 81 ]
  ! MINUS           [ shift and go to state 82 ]


state 102

    (39) whileblock -> WHILE LPAREN conditional RPAREN . LBRACE fbody RBRACE

    LBRACE          shift and go to state 124


state 103

    (48) conditional -> conditional GREATERTHAN . conditional
    (40) conditional -> . LPAREN conditional RPAREN
    (41) conditional -> . conditionbase
    (42) conditional -> . NOT LPAREN conditional RPAREN
    (43) conditional -> . conditional LESSTHANEQ conditional
    (44) conditional -> . conditional GREATERTHANEQ conditional
    (45) conditional -> . conditional UNEQUAL conditional
    (46) conditional -> . conditional EQUALCHECK conditional
    (47) conditional -> . conditional LESSTHAN conditional
    (48) conditional -> . conditional GREATERTHAN conditional
    (49) conditional -> . conditional ANDOPERATOR conditional
    (50) conditional -> . conditional OROPERATOR conditional
    (51) conditionbase -> . CS LESSTHANEQ CS
    (52) conditionbase -> . CS GREATERTHANEQ CS
    (53) conditionbase -> . CS UNEQUAL CS
    (54) conditionbase -> . CS EQUALCHECK CS
    (55) conditionbase -> . CS LESSTHAN CS
    (56) conditionbase -> . CS GREATERTHAN CS
    (57) CS -> . expression
    (58) CS -> . NOT LPAREN expression RPAREN
    (69) expression -> . functioncall
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . MINUS expression
    (75) expression -> . LPAREN expression RPAREN
    (76) expression -> . allnumbers
    (79) expression -> . pointervar
    (27) functioncall -> . NAME LPAREN arguments RPAREN
    (77) allnumbers -> . FLOAT
    (78) allnumbers -> . NUMBER
    (80) pointervar -> . TIMES pointervar
    (81) pointervar -> . ADDROF pointervar
    (82) pointervar -> . NAME

    LPAREN          shift and go to state 86
    NOT             shift and go to state 88
    MINUS           shift and go to state 62
    NAME            shift and go to state 53
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 57
    TIMES           shift and go to state 58
    ADDROF          shift and go to state 54

    allnumbers                     shift and go to state 55
    pointervar                     shift and go to state 56
    conditionbase                  shift and go to state 84
    conditional                    shift and go to state 125
    functioncall                   shift and go to state 59
    CS                             shift and go to state 87
    expression                     shift and go to state 89

state 104

    (47) conditional -> conditional LESSTHAN . conditional
    (40) conditional -> . LPAREN conditional RPAREN
    (41) conditional -> . conditionbase
    (42) conditional -> . NOT LPAREN conditional RPAREN
    (43) conditional -> . conditional LESSTHANEQ conditional
    (44) conditional -> . conditional GREATERTHANEQ conditional
    (45) conditional -> . conditional UNEQUAL conditional
    (46) conditional -> . conditional EQUALCHECK conditional
    (47) conditional -> . conditional LESSTHAN conditional
    (48) conditional -> . conditional GREATERTHAN conditional
    (49) conditional -> . conditional ANDOPERATOR conditional
    (50) conditional -> . conditional OROPERATOR conditional
    (51) conditionbase -> . CS LESSTHANEQ CS
    (52) conditionbase -> . CS GREATERTHANEQ CS
    (53) conditionbase -> . CS UNEQUAL CS
    (54) conditionbase -> . CS EQUALCHECK CS
    (55) conditionbase -> . CS LESSTHAN CS
    (56) conditionbase -> . CS GREATERTHAN CS
    (57) CS -> . expression
    (58) CS -> . NOT LPAREN expression RPAREN
    (69) expression -> . functioncall
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . MINUS expression
    (75) expression -> . LPAREN expression RPAREN
    (76) expression -> . allnumbers
    (79) expression -> . pointervar
    (27) functioncall -> . NAME LPAREN arguments RPAREN
    (77) allnumbers -> . FLOAT
    (78) allnumbers -> . NUMBER
    (80) pointervar -> . TIMES pointervar
    (81) pointervar -> . ADDROF pointervar
    (82) pointervar -> . NAME

    LPAREN          shift and go to state 86
    NOT             shift and go to state 88
    MINUS           shift and go to state 62
    NAME            shift and go to state 53
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 57
    TIMES           shift and go to state 58
    ADDROF          shift and go to state 54

    allnumbers                     shift and go to state 55
    pointervar                     shift and go to state 56
    conditionbase                  shift and go to state 84
    conditional                    shift and go to state 126
    functioncall                   shift and go to state 59
    CS                             shift and go to state 87
    expression                     shift and go to state 89

state 105

    (50) conditional -> conditional OROPERATOR . conditional
    (40) conditional -> . LPAREN conditional RPAREN
    (41) conditional -> . conditionbase
    (42) conditional -> . NOT LPAREN conditional RPAREN
    (43) conditional -> . conditional LESSTHANEQ conditional
    (44) conditional -> . conditional GREATERTHANEQ conditional
    (45) conditional -> . conditional UNEQUAL conditional
    (46) conditional -> . conditional EQUALCHECK conditional
    (47) conditional -> . conditional LESSTHAN conditional
    (48) conditional -> . conditional GREATERTHAN conditional
    (49) conditional -> . conditional ANDOPERATOR conditional
    (50) conditional -> . conditional OROPERATOR conditional
    (51) conditionbase -> . CS LESSTHANEQ CS
    (52) conditionbase -> . CS GREATERTHANEQ CS
    (53) conditionbase -> . CS UNEQUAL CS
    (54) conditionbase -> . CS EQUALCHECK CS
    (55) conditionbase -> . CS LESSTHAN CS
    (56) conditionbase -> . CS GREATERTHAN CS
    (57) CS -> . expression
    (58) CS -> . NOT LPAREN expression RPAREN
    (69) expression -> . functioncall
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . MINUS expression
    (75) expression -> . LPAREN expression RPAREN
    (76) expression -> . allnumbers
    (79) expression -> . pointervar
    (27) functioncall -> . NAME LPAREN arguments RPAREN
    (77) allnumbers -> . FLOAT
    (78) allnumbers -> . NUMBER
    (80) pointervar -> . TIMES pointervar
    (81) pointervar -> . ADDROF pointervar
    (82) pointervar -> . NAME

    LPAREN          shift and go to state 86
    NOT             shift and go to state 88
    MINUS           shift and go to state 62
    NAME            shift and go to state 53
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 57
    TIMES           shift and go to state 58
    ADDROF          shift and go to state 54

    allnumbers                     shift and go to state 55
    pointervar                     shift and go to state 56
    conditionbase                  shift and go to state 84
    conditional                    shift and go to state 127
    functioncall                   shift and go to state 59
    CS                             shift and go to state 87
    expression                     shift and go to state 89

state 106

    (49) conditional -> conditional ANDOPERATOR . conditional
    (40) conditional -> . LPAREN conditional RPAREN
    (41) conditional -> . conditionbase
    (42) conditional -> . NOT LPAREN conditional RPAREN
    (43) conditional -> . conditional LESSTHANEQ conditional
    (44) conditional -> . conditional GREATERTHANEQ conditional
    (45) conditional -> . conditional UNEQUAL conditional
    (46) conditional -> . conditional EQUALCHECK conditional
    (47) conditional -> . conditional LESSTHAN conditional
    (48) conditional -> . conditional GREATERTHAN conditional
    (49) conditional -> . conditional ANDOPERATOR conditional
    (50) conditional -> . conditional OROPERATOR conditional
    (51) conditionbase -> . CS LESSTHANEQ CS
    (52) conditionbase -> . CS GREATERTHANEQ CS
    (53) conditionbase -> . CS UNEQUAL CS
    (54) conditionbase -> . CS EQUALCHECK CS
    (55) conditionbase -> . CS LESSTHAN CS
    (56) conditionbase -> . CS GREATERTHAN CS
    (57) CS -> . expression
    (58) CS -> . NOT LPAREN expression RPAREN
    (69) expression -> . functioncall
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . MINUS expression
    (75) expression -> . LPAREN expression RPAREN
    (76) expression -> . allnumbers
    (79) expression -> . pointervar
    (27) functioncall -> . NAME LPAREN arguments RPAREN
    (77) allnumbers -> . FLOAT
    (78) allnumbers -> . NUMBER
    (80) pointervar -> . TIMES pointervar
    (81) pointervar -> . ADDROF pointervar
    (82) pointervar -> . NAME

    LPAREN          shift and go to state 86
    NOT             shift and go to state 88
    MINUS           shift and go to state 62
    NAME            shift and go to state 53
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 57
    TIMES           shift and go to state 58
    ADDROF          shift and go to state 54

    allnumbers                     shift and go to state 55
    pointervar                     shift and go to state 56
    conditionbase                  shift and go to state 84
    conditional                    shift and go to state 128
    functioncall                   shift and go to state 59
    CS                             shift and go to state 87
    expression                     shift and go to state 89

state 107

    (44) conditional -> conditional GREATERTHANEQ . conditional
    (40) conditional -> . LPAREN conditional RPAREN
    (41) conditional -> . conditionbase
    (42) conditional -> . NOT LPAREN conditional RPAREN
    (43) conditional -> . conditional LESSTHANEQ conditional
    (44) conditional -> . conditional GREATERTHANEQ conditional
    (45) conditional -> . conditional UNEQUAL conditional
    (46) conditional -> . conditional EQUALCHECK conditional
    (47) conditional -> . conditional LESSTHAN conditional
    (48) conditional -> . conditional GREATERTHAN conditional
    (49) conditional -> . conditional ANDOPERATOR conditional
    (50) conditional -> . conditional OROPERATOR conditional
    (51) conditionbase -> . CS LESSTHANEQ CS
    (52) conditionbase -> . CS GREATERTHANEQ CS
    (53) conditionbase -> . CS UNEQUAL CS
    (54) conditionbase -> . CS EQUALCHECK CS
    (55) conditionbase -> . CS LESSTHAN CS
    (56) conditionbase -> . CS GREATERTHAN CS
    (57) CS -> . expression
    (58) CS -> . NOT LPAREN expression RPAREN
    (69) expression -> . functioncall
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . MINUS expression
    (75) expression -> . LPAREN expression RPAREN
    (76) expression -> . allnumbers
    (79) expression -> . pointervar
    (27) functioncall -> . NAME LPAREN arguments RPAREN
    (77) allnumbers -> . FLOAT
    (78) allnumbers -> . NUMBER
    (80) pointervar -> . TIMES pointervar
    (81) pointervar -> . ADDROF pointervar
    (82) pointervar -> . NAME

    LPAREN          shift and go to state 86
    NOT             shift and go to state 88
    MINUS           shift and go to state 62
    NAME            shift and go to state 53
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 57
    TIMES           shift and go to state 58
    ADDROF          shift and go to state 54

    allnumbers                     shift and go to state 55
    pointervar                     shift and go to state 56
    conditionbase                  shift and go to state 84
    conditional                    shift and go to state 129
    functioncall                   shift and go to state 59
    CS                             shift and go to state 87
    expression                     shift and go to state 89

state 108

    (45) conditional -> conditional UNEQUAL . conditional
    (40) conditional -> . LPAREN conditional RPAREN
    (41) conditional -> . conditionbase
    (42) conditional -> . NOT LPAREN conditional RPAREN
    (43) conditional -> . conditional LESSTHANEQ conditional
    (44) conditional -> . conditional GREATERTHANEQ conditional
    (45) conditional -> . conditional UNEQUAL conditional
    (46) conditional -> . conditional EQUALCHECK conditional
    (47) conditional -> . conditional LESSTHAN conditional
    (48) conditional -> . conditional GREATERTHAN conditional
    (49) conditional -> . conditional ANDOPERATOR conditional
    (50) conditional -> . conditional OROPERATOR conditional
    (51) conditionbase -> . CS LESSTHANEQ CS
    (52) conditionbase -> . CS GREATERTHANEQ CS
    (53) conditionbase -> . CS UNEQUAL CS
    (54) conditionbase -> . CS EQUALCHECK CS
    (55) conditionbase -> . CS LESSTHAN CS
    (56) conditionbase -> . CS GREATERTHAN CS
    (57) CS -> . expression
    (58) CS -> . NOT LPAREN expression RPAREN
    (69) expression -> . functioncall
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . MINUS expression
    (75) expression -> . LPAREN expression RPAREN
    (76) expression -> . allnumbers
    (79) expression -> . pointervar
    (27) functioncall -> . NAME LPAREN arguments RPAREN
    (77) allnumbers -> . FLOAT
    (78) allnumbers -> . NUMBER
    (80) pointervar -> . TIMES pointervar
    (81) pointervar -> . ADDROF pointervar
    (82) pointervar -> . NAME

    LPAREN          shift and go to state 86
    NOT             shift and go to state 88
    MINUS           shift and go to state 62
    NAME            shift and go to state 53
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 57
    TIMES           shift and go to state 58
    ADDROF          shift and go to state 54

    allnumbers                     shift and go to state 55
    pointervar                     shift and go to state 56
    conditionbase                  shift and go to state 84
    conditional                    shift and go to state 130
    functioncall                   shift and go to state 59
    CS                             shift and go to state 87
    expression                     shift and go to state 89

state 109

    (43) conditional -> conditional LESSTHANEQ . conditional
    (40) conditional -> . LPAREN conditional RPAREN
    (41) conditional -> . conditionbase
    (42) conditional -> . NOT LPAREN conditional RPAREN
    (43) conditional -> . conditional LESSTHANEQ conditional
    (44) conditional -> . conditional GREATERTHANEQ conditional
    (45) conditional -> . conditional UNEQUAL conditional
    (46) conditional -> . conditional EQUALCHECK conditional
    (47) conditional -> . conditional LESSTHAN conditional
    (48) conditional -> . conditional GREATERTHAN conditional
    (49) conditional -> . conditional ANDOPERATOR conditional
    (50) conditional -> . conditional OROPERATOR conditional
    (51) conditionbase -> . CS LESSTHANEQ CS
    (52) conditionbase -> . CS GREATERTHANEQ CS
    (53) conditionbase -> . CS UNEQUAL CS
    (54) conditionbase -> . CS EQUALCHECK CS
    (55) conditionbase -> . CS LESSTHAN CS
    (56) conditionbase -> . CS GREATERTHAN CS
    (57) CS -> . expression
    (58) CS -> . NOT LPAREN expression RPAREN
    (69) expression -> . functioncall
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . MINUS expression
    (75) expression -> . LPAREN expression RPAREN
    (76) expression -> . allnumbers
    (79) expression -> . pointervar
    (27) functioncall -> . NAME LPAREN arguments RPAREN
    (77) allnumbers -> . FLOAT
    (78) allnumbers -> . NUMBER
    (80) pointervar -> . TIMES pointervar
    (81) pointervar -> . ADDROF pointervar
    (82) pointervar -> . NAME

    LPAREN          shift and go to state 86
    NOT             shift and go to state 88
    MINUS           shift and go to state 62
    NAME            shift and go to state 53
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 57
    TIMES           shift and go to state 58
    ADDROF          shift and go to state 54

    allnumbers                     shift and go to state 55
    pointervar                     shift and go to state 56
    conditionbase                  shift and go to state 84
    conditional                    shift and go to state 131
    functioncall                   shift and go to state 59
    CS                             shift and go to state 87
    expression                     shift and go to state 89

state 110

    (46) conditional -> conditional EQUALCHECK . conditional
    (40) conditional -> . LPAREN conditional RPAREN
    (41) conditional -> . conditionbase
    (42) conditional -> . NOT LPAREN conditional RPAREN
    (43) conditional -> . conditional LESSTHANEQ conditional
    (44) conditional -> . conditional GREATERTHANEQ conditional
    (45) conditional -> . conditional UNEQUAL conditional
    (46) conditional -> . conditional EQUALCHECK conditional
    (47) conditional -> . conditional LESSTHAN conditional
    (48) conditional -> . conditional GREATERTHAN conditional
    (49) conditional -> . conditional ANDOPERATOR conditional
    (50) conditional -> . conditional OROPERATOR conditional
    (51) conditionbase -> . CS LESSTHANEQ CS
    (52) conditionbase -> . CS GREATERTHANEQ CS
    (53) conditionbase -> . CS UNEQUAL CS
    (54) conditionbase -> . CS EQUALCHECK CS
    (55) conditionbase -> . CS LESSTHAN CS
    (56) conditionbase -> . CS GREATERTHAN CS
    (57) CS -> . expression
    (58) CS -> . NOT LPAREN expression RPAREN
    (69) expression -> . functioncall
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . MINUS expression
    (75) expression -> . LPAREN expression RPAREN
    (76) expression -> . allnumbers
    (79) expression -> . pointervar
    (27) functioncall -> . NAME LPAREN arguments RPAREN
    (77) allnumbers -> . FLOAT
    (78) allnumbers -> . NUMBER
    (80) pointervar -> . TIMES pointervar
    (81) pointervar -> . ADDROF pointervar
    (82) pointervar -> . NAME

    LPAREN          shift and go to state 86
    NOT             shift and go to state 88
    MINUS           shift and go to state 62
    NAME            shift and go to state 53
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 57
    TIMES           shift and go to state 58
    ADDROF          shift and go to state 54

    allnumbers                     shift and go to state 55
    pointervar                     shift and go to state 56
    conditionbase                  shift and go to state 84
    conditional                    shift and go to state 132
    functioncall                   shift and go to state 59
    CS                             shift and go to state 87
    expression                     shift and go to state 89

state 111

    (40) conditional -> LPAREN conditional . RPAREN
    (43) conditional -> conditional . LESSTHANEQ conditional
    (44) conditional -> conditional . GREATERTHANEQ conditional
    (45) conditional -> conditional . UNEQUAL conditional
    (46) conditional -> conditional . EQUALCHECK conditional
    (47) conditional -> conditional . LESSTHAN conditional
    (48) conditional -> conditional . GREATERTHAN conditional
    (49) conditional -> conditional . ANDOPERATOR conditional
    (50) conditional -> conditional . OROPERATOR conditional

    RPAREN          shift and go to state 133
    LESSTHANEQ      shift and go to state 109
    GREATERTHANEQ   shift and go to state 107
    UNEQUAL         shift and go to state 108
    EQUALCHECK      shift and go to state 110
    LESSTHAN        shift and go to state 104
    GREATERTHAN     shift and go to state 103
    ANDOPERATOR     shift and go to state 106
    OROPERATOR      shift and go to state 105


state 112

    (75) expression -> LPAREN expression . RPAREN
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . TIMES expression
    (57) CS -> expression .

    RPAREN          shift and go to state 97
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    DIVIDE          shift and go to state 78
    TIMES           shift and go to state 80
    LESSTHANEQ      reduce using rule 57 (CS -> expression .)
    GREATERTHANEQ   reduce using rule 57 (CS -> expression .)
    UNEQUAL         reduce using rule 57 (CS -> expression .)
    EQUALCHECK      reduce using rule 57 (CS -> expression .)
    LESSTHAN        reduce using rule 57 (CS -> expression .)
    GREATERTHAN     reduce using rule 57 (CS -> expression .)


state 113

    (53) conditionbase -> CS UNEQUAL . CS
    (57) CS -> . expression
    (58) CS -> . NOT LPAREN expression RPAREN
    (69) expression -> . functioncall
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . MINUS expression
    (75) expression -> . LPAREN expression RPAREN
    (76) expression -> . allnumbers
    (79) expression -> . pointervar
    (27) functioncall -> . NAME LPAREN arguments RPAREN
    (77) allnumbers -> . FLOAT
    (78) allnumbers -> . NUMBER
    (80) pointervar -> . TIMES pointervar
    (81) pointervar -> . ADDROF pointervar
    (82) pointervar -> . NAME

    NOT             shift and go to state 134
    MINUS           shift and go to state 62
    LPAREN          shift and go to state 60
    NAME            shift and go to state 53
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 57
    TIMES           shift and go to state 58
    ADDROF          shift and go to state 54

    pointervar                     shift and go to state 56
    allnumbers                     shift and go to state 55
    functioncall                   shift and go to state 59
    CS                             shift and go to state 135
    expression                     shift and go to state 89

state 114

    (55) conditionbase -> CS LESSTHAN . CS
    (57) CS -> . expression
    (58) CS -> . NOT LPAREN expression RPAREN
    (69) expression -> . functioncall
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . MINUS expression
    (75) expression -> . LPAREN expression RPAREN
    (76) expression -> . allnumbers
    (79) expression -> . pointervar
    (27) functioncall -> . NAME LPAREN arguments RPAREN
    (77) allnumbers -> . FLOAT
    (78) allnumbers -> . NUMBER
    (80) pointervar -> . TIMES pointervar
    (81) pointervar -> . ADDROF pointervar
    (82) pointervar -> . NAME

    NOT             shift and go to state 134
    MINUS           shift and go to state 62
    LPAREN          shift and go to state 60
    NAME            shift and go to state 53
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 57
    TIMES           shift and go to state 58
    ADDROF          shift and go to state 54

    pointervar                     shift and go to state 56
    allnumbers                     shift and go to state 55
    functioncall                   shift and go to state 59
    CS                             shift and go to state 136
    expression                     shift and go to state 89

state 115

    (52) conditionbase -> CS GREATERTHANEQ . CS
    (57) CS -> . expression
    (58) CS -> . NOT LPAREN expression RPAREN
    (69) expression -> . functioncall
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . MINUS expression
    (75) expression -> . LPAREN expression RPAREN
    (76) expression -> . allnumbers
    (79) expression -> . pointervar
    (27) functioncall -> . NAME LPAREN arguments RPAREN
    (77) allnumbers -> . FLOAT
    (78) allnumbers -> . NUMBER
    (80) pointervar -> . TIMES pointervar
    (81) pointervar -> . ADDROF pointervar
    (82) pointervar -> . NAME

    NOT             shift and go to state 134
    MINUS           shift and go to state 62
    LPAREN          shift and go to state 60
    NAME            shift and go to state 53
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 57
    TIMES           shift and go to state 58
    ADDROF          shift and go to state 54

    pointervar                     shift and go to state 56
    allnumbers                     shift and go to state 55
    functioncall                   shift and go to state 59
    CS                             shift and go to state 137
    expression                     shift and go to state 89

state 116

    (56) conditionbase -> CS GREATERTHAN . CS
    (57) CS -> . expression
    (58) CS -> . NOT LPAREN expression RPAREN
    (69) expression -> . functioncall
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . MINUS expression
    (75) expression -> . LPAREN expression RPAREN
    (76) expression -> . allnumbers
    (79) expression -> . pointervar
    (27) functioncall -> . NAME LPAREN arguments RPAREN
    (77) allnumbers -> . FLOAT
    (78) allnumbers -> . NUMBER
    (80) pointervar -> . TIMES pointervar
    (81) pointervar -> . ADDROF pointervar
    (82) pointervar -> . NAME

    NOT             shift and go to state 134
    MINUS           shift and go to state 62
    LPAREN          shift and go to state 60
    NAME            shift and go to state 53
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 57
    TIMES           shift and go to state 58
    ADDROF          shift and go to state 54

    pointervar                     shift and go to state 56
    allnumbers                     shift and go to state 55
    functioncall                   shift and go to state 59
    CS                             shift and go to state 138
    expression                     shift and go to state 89

state 117

    (51) conditionbase -> CS LESSTHANEQ . CS
    (57) CS -> . expression
    (58) CS -> . NOT LPAREN expression RPAREN
    (69) expression -> . functioncall
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . MINUS expression
    (75) expression -> . LPAREN expression RPAREN
    (76) expression -> . allnumbers
    (79) expression -> . pointervar
    (27) functioncall -> . NAME LPAREN arguments RPAREN
    (77) allnumbers -> . FLOAT
    (78) allnumbers -> . NUMBER
    (80) pointervar -> . TIMES pointervar
    (81) pointervar -> . ADDROF pointervar
    (82) pointervar -> . NAME

    NOT             shift and go to state 134
    MINUS           shift and go to state 62
    LPAREN          shift and go to state 60
    NAME            shift and go to state 53
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 57
    TIMES           shift and go to state 58
    ADDROF          shift and go to state 54

    pointervar                     shift and go to state 56
    allnumbers                     shift and go to state 55
    functioncall                   shift and go to state 59
    CS                             shift and go to state 139
    expression                     shift and go to state 89

state 118

    (54) conditionbase -> CS EQUALCHECK . CS
    (57) CS -> . expression
    (58) CS -> . NOT LPAREN expression RPAREN
    (69) expression -> . functioncall
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . MINUS expression
    (75) expression -> . LPAREN expression RPAREN
    (76) expression -> . allnumbers
    (79) expression -> . pointervar
    (27) functioncall -> . NAME LPAREN arguments RPAREN
    (77) allnumbers -> . FLOAT
    (78) allnumbers -> . NUMBER
    (80) pointervar -> . TIMES pointervar
    (81) pointervar -> . ADDROF pointervar
    (82) pointervar -> . NAME

    NOT             shift and go to state 134
    MINUS           shift and go to state 62
    LPAREN          shift and go to state 60
    NAME            shift and go to state 53
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 57
    TIMES           shift and go to state 58
    ADDROF          shift and go to state 54

    pointervar                     shift and go to state 56
    allnumbers                     shift and go to state 55
    functioncall                   shift and go to state 59
    CS                             shift and go to state 140
    expression                     shift and go to state 89

state 119

    (42) conditional -> NOT LPAREN . conditional RPAREN
    (58) CS -> NOT LPAREN . expression RPAREN
    (40) conditional -> . LPAREN conditional RPAREN
    (41) conditional -> . conditionbase
    (42) conditional -> . NOT LPAREN conditional RPAREN
    (43) conditional -> . conditional LESSTHANEQ conditional
    (44) conditional -> . conditional GREATERTHANEQ conditional
    (45) conditional -> . conditional UNEQUAL conditional
    (46) conditional -> . conditional EQUALCHECK conditional
    (47) conditional -> . conditional LESSTHAN conditional
    (48) conditional -> . conditional GREATERTHAN conditional
    (49) conditional -> . conditional ANDOPERATOR conditional
    (50) conditional -> . conditional OROPERATOR conditional
    (69) expression -> . functioncall
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . MINUS expression
    (75) expression -> . LPAREN expression RPAREN
    (76) expression -> . allnumbers
    (79) expression -> . pointervar
    (51) conditionbase -> . CS LESSTHANEQ CS
    (52) conditionbase -> . CS GREATERTHANEQ CS
    (53) conditionbase -> . CS UNEQUAL CS
    (54) conditionbase -> . CS EQUALCHECK CS
    (55) conditionbase -> . CS LESSTHAN CS
    (56) conditionbase -> . CS GREATERTHAN CS
    (27) functioncall -> . NAME LPAREN arguments RPAREN
    (77) allnumbers -> . FLOAT
    (78) allnumbers -> . NUMBER
    (80) pointervar -> . TIMES pointervar
    (81) pointervar -> . ADDROF pointervar
    (82) pointervar -> . NAME
    (57) CS -> . expression
    (58) CS -> . NOT LPAREN expression RPAREN

    LPAREN          shift and go to state 86
    NOT             shift and go to state 88
    MINUS           shift and go to state 62
    NAME            shift and go to state 53
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 57
    TIMES           shift and go to state 58
    ADDROF          shift and go to state 54

    allnumbers                     shift and go to state 55
    pointervar                     shift and go to state 56
    conditionbase                  shift and go to state 84
    conditional                    shift and go to state 141
    functioncall                   shift and go to state 59
    CS                             shift and go to state 87
    expression                     shift and go to state 142

state 120

    (67) assignment_base -> TIMES pointervar EQUALS expression .
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . TIMES expression

    SEMICOLON       reduce using rule 67 (assignment_base -> TIMES pointervar EQUALS expression .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    DIVIDE          shift and go to state 78
    TIMES           shift and go to state 80


state 121

    (31) unmatchedstatement -> IF LPAREN conditional RPAREN . allstatement
    (32) unmatchedstatement -> IF LPAREN conditional RPAREN . statement ELSE unmatchedstatement
    (33) unmatchedstatement -> IF LPAREN conditional RPAREN . LBRACE fbody RBRACE ELSE unmatchedstatement
    (34) unmatchedstatement -> IF LPAREN conditional RPAREN . LBRACE fbody RBRACE
    (35) ifblock -> IF LPAREN conditional RPAREN . statement ELSE statement
    (36) ifblock -> IF LPAREN conditional RPAREN . statement ELSE LBRACE fbody RBRACE
    (37) ifblock -> IF LPAREN conditional RPAREN . LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE
    (38) ifblock -> IF LPAREN conditional RPAREN . LBRACE fbody RBRACE ELSE statement
    (18) allstatement -> . statement
    (19) allstatement -> . unmatchedstatement
    (20) statement -> . assignment
    (21) statement -> . declaration
    (22) statement -> . whileblock
    (23) statement -> . ifblock
    (24) statement -> . returnstatement
    (25) statement -> . functioncall SEMICOLON
    (30) statement -> . SEMICOLON
    (31) unmatchedstatement -> . IF LPAREN conditional RPAREN allstatement
    (32) unmatchedstatement -> . IF LPAREN conditional RPAREN statement ELSE unmatchedstatement
    (33) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement
    (34) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE
    (66) assignment -> . assignment_base SEMICOLON
    (59) declaration -> . TYPE dlist1 SEMICOLON
    (39) whileblock -> . WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE
    (35) ifblock -> . IF LPAREN conditional RPAREN statement ELSE statement
    (36) ifblock -> . IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE
    (37) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE
    (38) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement
    (26) returnstatement -> . RETURN expression SEMICOLON
    (27) functioncall -> . NAME LPAREN arguments RPAREN
    (67) assignment_base -> . TIMES pointervar EQUALS expression
    (68) assignment_base -> . NAME EQUALS expression

    LBRACE          shift and go to state 144
    SEMICOLON       shift and go to state 36
    IF              shift and go to state 46
    TYPE            shift and go to state 50
    WHILE           shift and go to state 34
    RETURN          shift and go to state 33
    NAME            shift and go to state 47
    TIMES           shift and go to state 44

    unmatchedstatement             shift and go to state 35
    declaration                    shift and go to state 43
    assignment                     shift and go to state 42
    whileblock                     shift and go to state 37
    ifblock                        shift and go to state 38
    allstatement                   shift and go to state 145
    statement                      shift and go to state 143
    functioncall                   shift and go to state 40
    returnstatement                shift and go to state 49
    assignment_base                shift and go to state 41

state 122

    (27) functioncall -> NAME LPAREN arguments RPAREN .

    COMMA           reduce using rule 27 (functioncall -> NAME LPAREN arguments RPAREN .)
    PLUS            reduce using rule 27 (functioncall -> NAME LPAREN arguments RPAREN .)
    MINUS           reduce using rule 27 (functioncall -> NAME LPAREN arguments RPAREN .)
    DIVIDE          reduce using rule 27 (functioncall -> NAME LPAREN arguments RPAREN .)
    TIMES           reduce using rule 27 (functioncall -> NAME LPAREN arguments RPAREN .)
    RPAREN          reduce using rule 27 (functioncall -> NAME LPAREN arguments RPAREN .)
    SEMICOLON       reduce using rule 27 (functioncall -> NAME LPAREN arguments RPAREN .)
    LESSTHANEQ      reduce using rule 27 (functioncall -> NAME LPAREN arguments RPAREN .)
    GREATERTHANEQ   reduce using rule 27 (functioncall -> NAME LPAREN arguments RPAREN .)
    UNEQUAL         reduce using rule 27 (functioncall -> NAME LPAREN arguments RPAREN .)
    EQUALCHECK      reduce using rule 27 (functioncall -> NAME LPAREN arguments RPAREN .)
    LESSTHAN        reduce using rule 27 (functioncall -> NAME LPAREN arguments RPAREN .)
    GREATERTHAN     reduce using rule 27 (functioncall -> NAME LPAREN arguments RPAREN .)
    ANDOPERATOR     reduce using rule 27 (functioncall -> NAME LPAREN arguments RPAREN .)
    OROPERATOR      reduce using rule 27 (functioncall -> NAME LPAREN arguments RPAREN .)


state 123

    (29) arguments -> expression COMMA . arguments
    (28) arguments -> . expression
    (29) arguments -> . expression COMMA arguments
    (69) expression -> . functioncall
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . MINUS expression
    (75) expression -> . LPAREN expression RPAREN
    (76) expression -> . allnumbers
    (79) expression -> . pointervar
    (27) functioncall -> . NAME LPAREN arguments RPAREN
    (77) allnumbers -> . FLOAT
    (78) allnumbers -> . NUMBER
    (80) pointervar -> . TIMES pointervar
    (81) pointervar -> . ADDROF pointervar
    (82) pointervar -> . NAME

    MINUS           shift and go to state 62
    LPAREN          shift and go to state 60
    NAME            shift and go to state 53
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 57
    TIMES           shift and go to state 58
    ADDROF          shift and go to state 54

    functioncall                   shift and go to state 59
    pointervar                     shift and go to state 56
    allnumbers                     shift and go to state 55
    expression                     shift and go to state 94
    arguments                      shift and go to state 146

state 124

    (39) whileblock -> WHILE LPAREN conditional RPAREN LBRACE . fbody RBRACE
    (16) fbody -> . allstatement fbody
    (17) fbody -> .
    (18) allstatement -> . statement
    (19) allstatement -> . unmatchedstatement
    (20) statement -> . assignment
    (21) statement -> . declaration
    (22) statement -> . whileblock
    (23) statement -> . ifblock
    (24) statement -> . returnstatement
    (25) statement -> . functioncall SEMICOLON
    (30) statement -> . SEMICOLON
    (31) unmatchedstatement -> . IF LPAREN conditional RPAREN allstatement
    (32) unmatchedstatement -> . IF LPAREN conditional RPAREN statement ELSE unmatchedstatement
    (33) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement
    (34) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE
    (66) assignment -> . assignment_base SEMICOLON
    (59) declaration -> . TYPE dlist1 SEMICOLON
    (39) whileblock -> . WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE
    (35) ifblock -> . IF LPAREN conditional RPAREN statement ELSE statement
    (36) ifblock -> . IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE
    (37) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE
    (38) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement
    (26) returnstatement -> . RETURN expression SEMICOLON
    (27) functioncall -> . NAME LPAREN arguments RPAREN
    (67) assignment_base -> . TIMES pointervar EQUALS expression
    (68) assignment_base -> . NAME EQUALS expression

    RBRACE          reduce using rule 17 (fbody -> .)
    SEMICOLON       shift and go to state 36
    IF              shift and go to state 46
    TYPE            shift and go to state 50
    WHILE           shift and go to state 34
    RETURN          shift and go to state 33
    NAME            shift and go to state 47
    TIMES           shift and go to state 44

    unmatchedstatement             shift and go to state 35
    declaration                    shift and go to state 43
    assignment                     shift and go to state 42
    whileblock                     shift and go to state 37
    ifblock                        shift and go to state 38
    allstatement                   shift and go to state 48
    statement                      shift and go to state 39
    fbody                          shift and go to state 147
    functioncall                   shift and go to state 40
    returnstatement                shift and go to state 49
    assignment_base                shift and go to state 41

state 125

    (48) conditional -> conditional GREATERTHAN conditional .
    (43) conditional -> conditional . LESSTHANEQ conditional
    (44) conditional -> conditional . GREATERTHANEQ conditional
    (45) conditional -> conditional . UNEQUAL conditional
    (46) conditional -> conditional . EQUALCHECK conditional
    (47) conditional -> conditional . LESSTHAN conditional
    (48) conditional -> conditional . GREATERTHAN conditional
    (49) conditional -> conditional . ANDOPERATOR conditional
    (50) conditional -> conditional . OROPERATOR conditional

    RPAREN          reduce using rule 48 (conditional -> conditional GREATERTHAN conditional .)
    LESSTHANEQ      reduce using rule 48 (conditional -> conditional GREATERTHAN conditional .)
    GREATERTHANEQ   reduce using rule 48 (conditional -> conditional GREATERTHAN conditional .)
    UNEQUAL         reduce using rule 48 (conditional -> conditional GREATERTHAN conditional .)
    EQUALCHECK      reduce using rule 48 (conditional -> conditional GREATERTHAN conditional .)
    LESSTHAN        reduce using rule 48 (conditional -> conditional GREATERTHAN conditional .)
    GREATERTHAN     reduce using rule 48 (conditional -> conditional GREATERTHAN conditional .)
    ANDOPERATOR     reduce using rule 48 (conditional -> conditional GREATERTHAN conditional .)
    OROPERATOR      reduce using rule 48 (conditional -> conditional GREATERTHAN conditional .)

  ! LESSTHANEQ      [ shift and go to state 109 ]
  ! GREATERTHANEQ   [ shift and go to state 107 ]
  ! UNEQUAL         [ shift and go to state 108 ]
  ! EQUALCHECK      [ shift and go to state 110 ]
  ! LESSTHAN        [ shift and go to state 104 ]
  ! GREATERTHAN     [ shift and go to state 103 ]
  ! ANDOPERATOR     [ shift and go to state 106 ]
  ! OROPERATOR      [ shift and go to state 105 ]


state 126

    (47) conditional -> conditional LESSTHAN conditional .
    (43) conditional -> conditional . LESSTHANEQ conditional
    (44) conditional -> conditional . GREATERTHANEQ conditional
    (45) conditional -> conditional . UNEQUAL conditional
    (46) conditional -> conditional . EQUALCHECK conditional
    (47) conditional -> conditional . LESSTHAN conditional
    (48) conditional -> conditional . GREATERTHAN conditional
    (49) conditional -> conditional . ANDOPERATOR conditional
    (50) conditional -> conditional . OROPERATOR conditional

    RPAREN          reduce using rule 47 (conditional -> conditional LESSTHAN conditional .)
    LESSTHANEQ      reduce using rule 47 (conditional -> conditional LESSTHAN conditional .)
    GREATERTHANEQ   reduce using rule 47 (conditional -> conditional LESSTHAN conditional .)
    UNEQUAL         reduce using rule 47 (conditional -> conditional LESSTHAN conditional .)
    EQUALCHECK      reduce using rule 47 (conditional -> conditional LESSTHAN conditional .)
    LESSTHAN        reduce using rule 47 (conditional -> conditional LESSTHAN conditional .)
    GREATERTHAN     reduce using rule 47 (conditional -> conditional LESSTHAN conditional .)
    ANDOPERATOR     reduce using rule 47 (conditional -> conditional LESSTHAN conditional .)
    OROPERATOR      reduce using rule 47 (conditional -> conditional LESSTHAN conditional .)

  ! LESSTHANEQ      [ shift and go to state 109 ]
  ! GREATERTHANEQ   [ shift and go to state 107 ]
  ! UNEQUAL         [ shift and go to state 108 ]
  ! EQUALCHECK      [ shift and go to state 110 ]
  ! LESSTHAN        [ shift and go to state 104 ]
  ! GREATERTHAN     [ shift and go to state 103 ]
  ! ANDOPERATOR     [ shift and go to state 106 ]
  ! OROPERATOR      [ shift and go to state 105 ]


state 127

    (50) conditional -> conditional OROPERATOR conditional .
    (43) conditional -> conditional . LESSTHANEQ conditional
    (44) conditional -> conditional . GREATERTHANEQ conditional
    (45) conditional -> conditional . UNEQUAL conditional
    (46) conditional -> conditional . EQUALCHECK conditional
    (47) conditional -> conditional . LESSTHAN conditional
    (48) conditional -> conditional . GREATERTHAN conditional
    (49) conditional -> conditional . ANDOPERATOR conditional
    (50) conditional -> conditional . OROPERATOR conditional

    RPAREN          reduce using rule 50 (conditional -> conditional OROPERATOR conditional .)
    OROPERATOR      reduce using rule 50 (conditional -> conditional OROPERATOR conditional .)
    LESSTHANEQ      shift and go to state 109
    GREATERTHANEQ   shift and go to state 107
    UNEQUAL         shift and go to state 108
    EQUALCHECK      shift and go to state 110
    LESSTHAN        shift and go to state 104
    GREATERTHAN     shift and go to state 103
    ANDOPERATOR     shift and go to state 106

  ! LESSTHANEQ      [ reduce using rule 50 (conditional -> conditional OROPERATOR conditional .) ]
  ! GREATERTHANEQ   [ reduce using rule 50 (conditional -> conditional OROPERATOR conditional .) ]
  ! UNEQUAL         [ reduce using rule 50 (conditional -> conditional OROPERATOR conditional .) ]
  ! EQUALCHECK      [ reduce using rule 50 (conditional -> conditional OROPERATOR conditional .) ]
  ! LESSTHAN        [ reduce using rule 50 (conditional -> conditional OROPERATOR conditional .) ]
  ! GREATERTHAN     [ reduce using rule 50 (conditional -> conditional OROPERATOR conditional .) ]
  ! ANDOPERATOR     [ reduce using rule 50 (conditional -> conditional OROPERATOR conditional .) ]
  ! OROPERATOR      [ shift and go to state 105 ]


state 128

    (49) conditional -> conditional ANDOPERATOR conditional .
    (43) conditional -> conditional . LESSTHANEQ conditional
    (44) conditional -> conditional . GREATERTHANEQ conditional
    (45) conditional -> conditional . UNEQUAL conditional
    (46) conditional -> conditional . EQUALCHECK conditional
    (47) conditional -> conditional . LESSTHAN conditional
    (48) conditional -> conditional . GREATERTHAN conditional
    (49) conditional -> conditional . ANDOPERATOR conditional
    (50) conditional -> conditional . OROPERATOR conditional

    RPAREN          reduce using rule 49 (conditional -> conditional ANDOPERATOR conditional .)
    ANDOPERATOR     reduce using rule 49 (conditional -> conditional ANDOPERATOR conditional .)
    OROPERATOR      reduce using rule 49 (conditional -> conditional ANDOPERATOR conditional .)
    LESSTHANEQ      shift and go to state 109
    GREATERTHANEQ   shift and go to state 107
    UNEQUAL         shift and go to state 108
    EQUALCHECK      shift and go to state 110
    LESSTHAN        shift and go to state 104
    GREATERTHAN     shift and go to state 103

  ! LESSTHANEQ      [ reduce using rule 49 (conditional -> conditional ANDOPERATOR conditional .) ]
  ! GREATERTHANEQ   [ reduce using rule 49 (conditional -> conditional ANDOPERATOR conditional .) ]
  ! UNEQUAL         [ reduce using rule 49 (conditional -> conditional ANDOPERATOR conditional .) ]
  ! EQUALCHECK      [ reduce using rule 49 (conditional -> conditional ANDOPERATOR conditional .) ]
  ! LESSTHAN        [ reduce using rule 49 (conditional -> conditional ANDOPERATOR conditional .) ]
  ! GREATERTHAN     [ reduce using rule 49 (conditional -> conditional ANDOPERATOR conditional .) ]
  ! ANDOPERATOR     [ shift and go to state 106 ]
  ! OROPERATOR      [ shift and go to state 105 ]


state 129

    (44) conditional -> conditional GREATERTHANEQ conditional .
    (43) conditional -> conditional . LESSTHANEQ conditional
    (44) conditional -> conditional . GREATERTHANEQ conditional
    (45) conditional -> conditional . UNEQUAL conditional
    (46) conditional -> conditional . EQUALCHECK conditional
    (47) conditional -> conditional . LESSTHAN conditional
    (48) conditional -> conditional . GREATERTHAN conditional
    (49) conditional -> conditional . ANDOPERATOR conditional
    (50) conditional -> conditional . OROPERATOR conditional

    RPAREN          reduce using rule 44 (conditional -> conditional GREATERTHANEQ conditional .)
    LESSTHANEQ      reduce using rule 44 (conditional -> conditional GREATERTHANEQ conditional .)
    GREATERTHANEQ   reduce using rule 44 (conditional -> conditional GREATERTHANEQ conditional .)
    UNEQUAL         reduce using rule 44 (conditional -> conditional GREATERTHANEQ conditional .)
    EQUALCHECK      reduce using rule 44 (conditional -> conditional GREATERTHANEQ conditional .)
    LESSTHAN        reduce using rule 44 (conditional -> conditional GREATERTHANEQ conditional .)
    GREATERTHAN     reduce using rule 44 (conditional -> conditional GREATERTHANEQ conditional .)
    ANDOPERATOR     reduce using rule 44 (conditional -> conditional GREATERTHANEQ conditional .)
    OROPERATOR      reduce using rule 44 (conditional -> conditional GREATERTHANEQ conditional .)

  ! LESSTHANEQ      [ shift and go to state 109 ]
  ! GREATERTHANEQ   [ shift and go to state 107 ]
  ! UNEQUAL         [ shift and go to state 108 ]
  ! EQUALCHECK      [ shift and go to state 110 ]
  ! LESSTHAN        [ shift and go to state 104 ]
  ! GREATERTHAN     [ shift and go to state 103 ]
  ! ANDOPERATOR     [ shift and go to state 106 ]
  ! OROPERATOR      [ shift and go to state 105 ]


state 130

    (45) conditional -> conditional UNEQUAL conditional .
    (43) conditional -> conditional . LESSTHANEQ conditional
    (44) conditional -> conditional . GREATERTHANEQ conditional
    (45) conditional -> conditional . UNEQUAL conditional
    (46) conditional -> conditional . EQUALCHECK conditional
    (47) conditional -> conditional . LESSTHAN conditional
    (48) conditional -> conditional . GREATERTHAN conditional
    (49) conditional -> conditional . ANDOPERATOR conditional
    (50) conditional -> conditional . OROPERATOR conditional

    RPAREN          reduce using rule 45 (conditional -> conditional UNEQUAL conditional .)
    UNEQUAL         reduce using rule 45 (conditional -> conditional UNEQUAL conditional .)
    EQUALCHECK      reduce using rule 45 (conditional -> conditional UNEQUAL conditional .)
    ANDOPERATOR     reduce using rule 45 (conditional -> conditional UNEQUAL conditional .)
    OROPERATOR      reduce using rule 45 (conditional -> conditional UNEQUAL conditional .)
    LESSTHANEQ      shift and go to state 109
    GREATERTHANEQ   shift and go to state 107
    LESSTHAN        shift and go to state 104
    GREATERTHAN     shift and go to state 103

  ! LESSTHANEQ      [ reduce using rule 45 (conditional -> conditional UNEQUAL conditional .) ]
  ! GREATERTHANEQ   [ reduce using rule 45 (conditional -> conditional UNEQUAL conditional .) ]
  ! LESSTHAN        [ reduce using rule 45 (conditional -> conditional UNEQUAL conditional .) ]
  ! GREATERTHAN     [ reduce using rule 45 (conditional -> conditional UNEQUAL conditional .) ]
  ! UNEQUAL         [ shift and go to state 108 ]
  ! EQUALCHECK      [ shift and go to state 110 ]
  ! ANDOPERATOR     [ shift and go to state 106 ]
  ! OROPERATOR      [ shift and go to state 105 ]


state 131

    (43) conditional -> conditional LESSTHANEQ conditional .
    (43) conditional -> conditional . LESSTHANEQ conditional
    (44) conditional -> conditional . GREATERTHANEQ conditional
    (45) conditional -> conditional . UNEQUAL conditional
    (46) conditional -> conditional . EQUALCHECK conditional
    (47) conditional -> conditional . LESSTHAN conditional
    (48) conditional -> conditional . GREATERTHAN conditional
    (49) conditional -> conditional . ANDOPERATOR conditional
    (50) conditional -> conditional . OROPERATOR conditional

    RPAREN          reduce using rule 43 (conditional -> conditional LESSTHANEQ conditional .)
    LESSTHANEQ      reduce using rule 43 (conditional -> conditional LESSTHANEQ conditional .)
    GREATERTHANEQ   reduce using rule 43 (conditional -> conditional LESSTHANEQ conditional .)
    UNEQUAL         reduce using rule 43 (conditional -> conditional LESSTHANEQ conditional .)
    EQUALCHECK      reduce using rule 43 (conditional -> conditional LESSTHANEQ conditional .)
    LESSTHAN        reduce using rule 43 (conditional -> conditional LESSTHANEQ conditional .)
    GREATERTHAN     reduce using rule 43 (conditional -> conditional LESSTHANEQ conditional .)
    ANDOPERATOR     reduce using rule 43 (conditional -> conditional LESSTHANEQ conditional .)
    OROPERATOR      reduce using rule 43 (conditional -> conditional LESSTHANEQ conditional .)

  ! LESSTHANEQ      [ shift and go to state 109 ]
  ! GREATERTHANEQ   [ shift and go to state 107 ]
  ! UNEQUAL         [ shift and go to state 108 ]
  ! EQUALCHECK      [ shift and go to state 110 ]
  ! LESSTHAN        [ shift and go to state 104 ]
  ! GREATERTHAN     [ shift and go to state 103 ]
  ! ANDOPERATOR     [ shift and go to state 106 ]
  ! OROPERATOR      [ shift and go to state 105 ]


state 132

    (46) conditional -> conditional EQUALCHECK conditional .
    (43) conditional -> conditional . LESSTHANEQ conditional
    (44) conditional -> conditional . GREATERTHANEQ conditional
    (45) conditional -> conditional . UNEQUAL conditional
    (46) conditional -> conditional . EQUALCHECK conditional
    (47) conditional -> conditional . LESSTHAN conditional
    (48) conditional -> conditional . GREATERTHAN conditional
    (49) conditional -> conditional . ANDOPERATOR conditional
    (50) conditional -> conditional . OROPERATOR conditional

    RPAREN          reduce using rule 46 (conditional -> conditional EQUALCHECK conditional .)
    UNEQUAL         reduce using rule 46 (conditional -> conditional EQUALCHECK conditional .)
    EQUALCHECK      reduce using rule 46 (conditional -> conditional EQUALCHECK conditional .)
    ANDOPERATOR     reduce using rule 46 (conditional -> conditional EQUALCHECK conditional .)
    OROPERATOR      reduce using rule 46 (conditional -> conditional EQUALCHECK conditional .)
    LESSTHANEQ      shift and go to state 109
    GREATERTHANEQ   shift and go to state 107
    LESSTHAN        shift and go to state 104
    GREATERTHAN     shift and go to state 103

  ! LESSTHANEQ      [ reduce using rule 46 (conditional -> conditional EQUALCHECK conditional .) ]
  ! GREATERTHANEQ   [ reduce using rule 46 (conditional -> conditional EQUALCHECK conditional .) ]
  ! LESSTHAN        [ reduce using rule 46 (conditional -> conditional EQUALCHECK conditional .) ]
  ! GREATERTHAN     [ reduce using rule 46 (conditional -> conditional EQUALCHECK conditional .) ]
  ! UNEQUAL         [ shift and go to state 108 ]
  ! EQUALCHECK      [ shift and go to state 110 ]
  ! ANDOPERATOR     [ shift and go to state 106 ]
  ! OROPERATOR      [ shift and go to state 105 ]


state 133

    (40) conditional -> LPAREN conditional RPAREN .

    RPAREN          reduce using rule 40 (conditional -> LPAREN conditional RPAREN .)
    LESSTHANEQ      reduce using rule 40 (conditional -> LPAREN conditional RPAREN .)
    GREATERTHANEQ   reduce using rule 40 (conditional -> LPAREN conditional RPAREN .)
    UNEQUAL         reduce using rule 40 (conditional -> LPAREN conditional RPAREN .)
    EQUALCHECK      reduce using rule 40 (conditional -> LPAREN conditional RPAREN .)
    LESSTHAN        reduce using rule 40 (conditional -> LPAREN conditional RPAREN .)
    GREATERTHAN     reduce using rule 40 (conditional -> LPAREN conditional RPAREN .)
    ANDOPERATOR     reduce using rule 40 (conditional -> LPAREN conditional RPAREN .)
    OROPERATOR      reduce using rule 40 (conditional -> LPAREN conditional RPAREN .)


state 134

    (58) CS -> NOT . LPAREN expression RPAREN

    LPAREN          shift and go to state 148


state 135

    (53) conditionbase -> CS UNEQUAL CS .

    LESSTHANEQ      reduce using rule 53 (conditionbase -> CS UNEQUAL CS .)
    GREATERTHANEQ   reduce using rule 53 (conditionbase -> CS UNEQUAL CS .)
    UNEQUAL         reduce using rule 53 (conditionbase -> CS UNEQUAL CS .)
    EQUALCHECK      reduce using rule 53 (conditionbase -> CS UNEQUAL CS .)
    LESSTHAN        reduce using rule 53 (conditionbase -> CS UNEQUAL CS .)
    GREATERTHAN     reduce using rule 53 (conditionbase -> CS UNEQUAL CS .)
    ANDOPERATOR     reduce using rule 53 (conditionbase -> CS UNEQUAL CS .)
    OROPERATOR      reduce using rule 53 (conditionbase -> CS UNEQUAL CS .)
    RPAREN          reduce using rule 53 (conditionbase -> CS UNEQUAL CS .)


state 136

    (55) conditionbase -> CS LESSTHAN CS .

    LESSTHANEQ      reduce using rule 55 (conditionbase -> CS LESSTHAN CS .)
    GREATERTHANEQ   reduce using rule 55 (conditionbase -> CS LESSTHAN CS .)
    UNEQUAL         reduce using rule 55 (conditionbase -> CS LESSTHAN CS .)
    EQUALCHECK      reduce using rule 55 (conditionbase -> CS LESSTHAN CS .)
    LESSTHAN        reduce using rule 55 (conditionbase -> CS LESSTHAN CS .)
    GREATERTHAN     reduce using rule 55 (conditionbase -> CS LESSTHAN CS .)
    ANDOPERATOR     reduce using rule 55 (conditionbase -> CS LESSTHAN CS .)
    OROPERATOR      reduce using rule 55 (conditionbase -> CS LESSTHAN CS .)
    RPAREN          reduce using rule 55 (conditionbase -> CS LESSTHAN CS .)


state 137

    (52) conditionbase -> CS GREATERTHANEQ CS .

    LESSTHANEQ      reduce using rule 52 (conditionbase -> CS GREATERTHANEQ CS .)
    GREATERTHANEQ   reduce using rule 52 (conditionbase -> CS GREATERTHANEQ CS .)
    UNEQUAL         reduce using rule 52 (conditionbase -> CS GREATERTHANEQ CS .)
    EQUALCHECK      reduce using rule 52 (conditionbase -> CS GREATERTHANEQ CS .)
    LESSTHAN        reduce using rule 52 (conditionbase -> CS GREATERTHANEQ CS .)
    GREATERTHAN     reduce using rule 52 (conditionbase -> CS GREATERTHANEQ CS .)
    ANDOPERATOR     reduce using rule 52 (conditionbase -> CS GREATERTHANEQ CS .)
    OROPERATOR      reduce using rule 52 (conditionbase -> CS GREATERTHANEQ CS .)
    RPAREN          reduce using rule 52 (conditionbase -> CS GREATERTHANEQ CS .)


state 138

    (56) conditionbase -> CS GREATERTHAN CS .

    LESSTHANEQ      reduce using rule 56 (conditionbase -> CS GREATERTHAN CS .)
    GREATERTHANEQ   reduce using rule 56 (conditionbase -> CS GREATERTHAN CS .)
    UNEQUAL         reduce using rule 56 (conditionbase -> CS GREATERTHAN CS .)
    EQUALCHECK      reduce using rule 56 (conditionbase -> CS GREATERTHAN CS .)
    LESSTHAN        reduce using rule 56 (conditionbase -> CS GREATERTHAN CS .)
    GREATERTHAN     reduce using rule 56 (conditionbase -> CS GREATERTHAN CS .)
    ANDOPERATOR     reduce using rule 56 (conditionbase -> CS GREATERTHAN CS .)
    OROPERATOR      reduce using rule 56 (conditionbase -> CS GREATERTHAN CS .)
    RPAREN          reduce using rule 56 (conditionbase -> CS GREATERTHAN CS .)


state 139

    (51) conditionbase -> CS LESSTHANEQ CS .

    LESSTHANEQ      reduce using rule 51 (conditionbase -> CS LESSTHANEQ CS .)
    GREATERTHANEQ   reduce using rule 51 (conditionbase -> CS LESSTHANEQ CS .)
    UNEQUAL         reduce using rule 51 (conditionbase -> CS LESSTHANEQ CS .)
    EQUALCHECK      reduce using rule 51 (conditionbase -> CS LESSTHANEQ CS .)
    LESSTHAN        reduce using rule 51 (conditionbase -> CS LESSTHANEQ CS .)
    GREATERTHAN     reduce using rule 51 (conditionbase -> CS LESSTHANEQ CS .)
    ANDOPERATOR     reduce using rule 51 (conditionbase -> CS LESSTHANEQ CS .)
    OROPERATOR      reduce using rule 51 (conditionbase -> CS LESSTHANEQ CS .)
    RPAREN          reduce using rule 51 (conditionbase -> CS LESSTHANEQ CS .)


state 140

    (54) conditionbase -> CS EQUALCHECK CS .

    LESSTHANEQ      reduce using rule 54 (conditionbase -> CS EQUALCHECK CS .)
    GREATERTHANEQ   reduce using rule 54 (conditionbase -> CS EQUALCHECK CS .)
    UNEQUAL         reduce using rule 54 (conditionbase -> CS EQUALCHECK CS .)
    EQUALCHECK      reduce using rule 54 (conditionbase -> CS EQUALCHECK CS .)
    LESSTHAN        reduce using rule 54 (conditionbase -> CS EQUALCHECK CS .)
    GREATERTHAN     reduce using rule 54 (conditionbase -> CS EQUALCHECK CS .)
    ANDOPERATOR     reduce using rule 54 (conditionbase -> CS EQUALCHECK CS .)
    OROPERATOR      reduce using rule 54 (conditionbase -> CS EQUALCHECK CS .)
    RPAREN          reduce using rule 54 (conditionbase -> CS EQUALCHECK CS .)


state 141

    (42) conditional -> NOT LPAREN conditional . RPAREN
    (43) conditional -> conditional . LESSTHANEQ conditional
    (44) conditional -> conditional . GREATERTHANEQ conditional
    (45) conditional -> conditional . UNEQUAL conditional
    (46) conditional -> conditional . EQUALCHECK conditional
    (47) conditional -> conditional . LESSTHAN conditional
    (48) conditional -> conditional . GREATERTHAN conditional
    (49) conditional -> conditional . ANDOPERATOR conditional
    (50) conditional -> conditional . OROPERATOR conditional

    RPAREN          shift and go to state 149
    LESSTHANEQ      shift and go to state 109
    GREATERTHANEQ   shift and go to state 107
    UNEQUAL         shift and go to state 108
    EQUALCHECK      shift and go to state 110
    LESSTHAN        shift and go to state 104
    GREATERTHAN     shift and go to state 103
    ANDOPERATOR     shift and go to state 106
    OROPERATOR      shift and go to state 105


state 142

    (58) CS -> NOT LPAREN expression . RPAREN
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . TIMES expression
    (57) CS -> expression .

    RPAREN          shift and go to state 150
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    DIVIDE          shift and go to state 78
    TIMES           shift and go to state 80
    LESSTHANEQ      reduce using rule 57 (CS -> expression .)
    GREATERTHANEQ   reduce using rule 57 (CS -> expression .)
    UNEQUAL         reduce using rule 57 (CS -> expression .)
    EQUALCHECK      reduce using rule 57 (CS -> expression .)
    LESSTHAN        reduce using rule 57 (CS -> expression .)
    GREATERTHAN     reduce using rule 57 (CS -> expression .)


state 143

    (32) unmatchedstatement -> IF LPAREN conditional RPAREN statement . ELSE unmatchedstatement
    (35) ifblock -> IF LPAREN conditional RPAREN statement . ELSE statement
    (36) ifblock -> IF LPAREN conditional RPAREN statement . ELSE LBRACE fbody RBRACE
    (18) allstatement -> statement .

    ELSE            shift and go to state 151
    SEMICOLON       reduce using rule 18 (allstatement -> statement .)
    IF              reduce using rule 18 (allstatement -> statement .)
    TYPE            reduce using rule 18 (allstatement -> statement .)
    WHILE           reduce using rule 18 (allstatement -> statement .)
    RETURN          reduce using rule 18 (allstatement -> statement .)
    NAME            reduce using rule 18 (allstatement -> statement .)
    TIMES           reduce using rule 18 (allstatement -> statement .)
    RBRACE          reduce using rule 18 (allstatement -> statement .)


state 144

    (33) unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE . fbody RBRACE ELSE unmatchedstatement
    (34) unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE . fbody RBRACE
    (37) ifblock -> IF LPAREN conditional RPAREN LBRACE . fbody RBRACE ELSE LBRACE fbody RBRACE
    (38) ifblock -> IF LPAREN conditional RPAREN LBRACE . fbody RBRACE ELSE statement
    (16) fbody -> . allstatement fbody
    (17) fbody -> .
    (18) allstatement -> . statement
    (19) allstatement -> . unmatchedstatement
    (20) statement -> . assignment
    (21) statement -> . declaration
    (22) statement -> . whileblock
    (23) statement -> . ifblock
    (24) statement -> . returnstatement
    (25) statement -> . functioncall SEMICOLON
    (30) statement -> . SEMICOLON
    (31) unmatchedstatement -> . IF LPAREN conditional RPAREN allstatement
    (32) unmatchedstatement -> . IF LPAREN conditional RPAREN statement ELSE unmatchedstatement
    (33) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement
    (34) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE
    (66) assignment -> . assignment_base SEMICOLON
    (59) declaration -> . TYPE dlist1 SEMICOLON
    (39) whileblock -> . WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE
    (35) ifblock -> . IF LPAREN conditional RPAREN statement ELSE statement
    (36) ifblock -> . IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE
    (37) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE
    (38) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement
    (26) returnstatement -> . RETURN expression SEMICOLON
    (27) functioncall -> . NAME LPAREN arguments RPAREN
    (67) assignment_base -> . TIMES pointervar EQUALS expression
    (68) assignment_base -> . NAME EQUALS expression

    RBRACE          reduce using rule 17 (fbody -> .)
    SEMICOLON       shift and go to state 36
    IF              shift and go to state 46
    TYPE            shift and go to state 50
    WHILE           shift and go to state 34
    RETURN          shift and go to state 33
    NAME            shift and go to state 47
    TIMES           shift and go to state 44

    unmatchedstatement             shift and go to state 35
    declaration                    shift and go to state 43
    assignment                     shift and go to state 42
    whileblock                     shift and go to state 37
    ifblock                        shift and go to state 38
    allstatement                   shift and go to state 48
    statement                      shift and go to state 39
    fbody                          shift and go to state 152
    functioncall                   shift and go to state 40
    returnstatement                shift and go to state 49
    assignment_base                shift and go to state 41

state 145

    (31) unmatchedstatement -> IF LPAREN conditional RPAREN allstatement .

    SEMICOLON       reduce using rule 31 (unmatchedstatement -> IF LPAREN conditional RPAREN allstatement .)
    IF              reduce using rule 31 (unmatchedstatement -> IF LPAREN conditional RPAREN allstatement .)
    TYPE            reduce using rule 31 (unmatchedstatement -> IF LPAREN conditional RPAREN allstatement .)
    WHILE           reduce using rule 31 (unmatchedstatement -> IF LPAREN conditional RPAREN allstatement .)
    RETURN          reduce using rule 31 (unmatchedstatement -> IF LPAREN conditional RPAREN allstatement .)
    NAME            reduce using rule 31 (unmatchedstatement -> IF LPAREN conditional RPAREN allstatement .)
    TIMES           reduce using rule 31 (unmatchedstatement -> IF LPAREN conditional RPAREN allstatement .)
    RBRACE          reduce using rule 31 (unmatchedstatement -> IF LPAREN conditional RPAREN allstatement .)


state 146

    (29) arguments -> expression COMMA arguments .

    RPAREN          reduce using rule 29 (arguments -> expression COMMA arguments .)


state 147

    (39) whileblock -> WHILE LPAREN conditional RPAREN LBRACE fbody . RBRACE

    RBRACE          shift and go to state 153


state 148

    (58) CS -> NOT LPAREN . expression RPAREN
    (69) expression -> . functioncall
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . MINUS expression
    (75) expression -> . LPAREN expression RPAREN
    (76) expression -> . allnumbers
    (79) expression -> . pointervar
    (27) functioncall -> . NAME LPAREN arguments RPAREN
    (77) allnumbers -> . FLOAT
    (78) allnumbers -> . NUMBER
    (80) pointervar -> . TIMES pointervar
    (81) pointervar -> . ADDROF pointervar
    (82) pointervar -> . NAME

    MINUS           shift and go to state 62
    LPAREN          shift and go to state 60
    NAME            shift and go to state 53
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 57
    TIMES           shift and go to state 58
    ADDROF          shift and go to state 54

    functioncall                   shift and go to state 59
    pointervar                     shift and go to state 56
    allnumbers                     shift and go to state 55
    expression                     shift and go to state 154

state 149

    (42) conditional -> NOT LPAREN conditional RPAREN .

    RPAREN          reduce using rule 42 (conditional -> NOT LPAREN conditional RPAREN .)
    LESSTHANEQ      reduce using rule 42 (conditional -> NOT LPAREN conditional RPAREN .)
    GREATERTHANEQ   reduce using rule 42 (conditional -> NOT LPAREN conditional RPAREN .)
    UNEQUAL         reduce using rule 42 (conditional -> NOT LPAREN conditional RPAREN .)
    EQUALCHECK      reduce using rule 42 (conditional -> NOT LPAREN conditional RPAREN .)
    LESSTHAN        reduce using rule 42 (conditional -> NOT LPAREN conditional RPAREN .)
    GREATERTHAN     reduce using rule 42 (conditional -> NOT LPAREN conditional RPAREN .)
    ANDOPERATOR     reduce using rule 42 (conditional -> NOT LPAREN conditional RPAREN .)
    OROPERATOR      reduce using rule 42 (conditional -> NOT LPAREN conditional RPAREN .)


state 150

    (58) CS -> NOT LPAREN expression RPAREN .

    RPAREN          reduce using rule 58 (CS -> NOT LPAREN expression RPAREN .)
    LESSTHANEQ      reduce using rule 58 (CS -> NOT LPAREN expression RPAREN .)
    GREATERTHANEQ   reduce using rule 58 (CS -> NOT LPAREN expression RPAREN .)
    UNEQUAL         reduce using rule 58 (CS -> NOT LPAREN expression RPAREN .)
    EQUALCHECK      reduce using rule 58 (CS -> NOT LPAREN expression RPAREN .)
    LESSTHAN        reduce using rule 58 (CS -> NOT LPAREN expression RPAREN .)
    GREATERTHAN     reduce using rule 58 (CS -> NOT LPAREN expression RPAREN .)
    ANDOPERATOR     reduce using rule 58 (CS -> NOT LPAREN expression RPAREN .)
    OROPERATOR      reduce using rule 58 (CS -> NOT LPAREN expression RPAREN .)


state 151

    (32) unmatchedstatement -> IF LPAREN conditional RPAREN statement ELSE . unmatchedstatement
    (35) ifblock -> IF LPAREN conditional RPAREN statement ELSE . statement
    (36) ifblock -> IF LPAREN conditional RPAREN statement ELSE . LBRACE fbody RBRACE
    (31) unmatchedstatement -> . IF LPAREN conditional RPAREN allstatement
    (32) unmatchedstatement -> . IF LPAREN conditional RPAREN statement ELSE unmatchedstatement
    (33) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement
    (34) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE
    (20) statement -> . assignment
    (21) statement -> . declaration
    (22) statement -> . whileblock
    (23) statement -> . ifblock
    (24) statement -> . returnstatement
    (25) statement -> . functioncall SEMICOLON
    (30) statement -> . SEMICOLON
    (66) assignment -> . assignment_base SEMICOLON
    (59) declaration -> . TYPE dlist1 SEMICOLON
    (39) whileblock -> . WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE
    (35) ifblock -> . IF LPAREN conditional RPAREN statement ELSE statement
    (36) ifblock -> . IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE
    (37) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE
    (38) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement
    (26) returnstatement -> . RETURN expression SEMICOLON
    (27) functioncall -> . NAME LPAREN arguments RPAREN
    (67) assignment_base -> . TIMES pointervar EQUALS expression
    (68) assignment_base -> . NAME EQUALS expression

    LBRACE          shift and go to state 157
    IF              shift and go to state 46
    SEMICOLON       shift and go to state 36
    TYPE            shift and go to state 50
    WHILE           shift and go to state 34
    RETURN          shift and go to state 33
    NAME            shift and go to state 47
    TIMES           shift and go to state 44

    unmatchedstatement             shift and go to state 155
    declaration                    shift and go to state 43
    assignment                     shift and go to state 42
    whileblock                     shift and go to state 37
    ifblock                        shift and go to state 38
    statement                      shift and go to state 156
    functioncall                   shift and go to state 40
    returnstatement                shift and go to state 49
    assignment_base                shift and go to state 41

state 152

    (33) unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody . RBRACE ELSE unmatchedstatement
    (34) unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody . RBRACE
    (37) ifblock -> IF LPAREN conditional RPAREN LBRACE fbody . RBRACE ELSE LBRACE fbody RBRACE
    (38) ifblock -> IF LPAREN conditional RPAREN LBRACE fbody . RBRACE ELSE statement

    RBRACE          shift and go to state 158


state 153

    (39) whileblock -> WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE .

    SEMICOLON       reduce using rule 39 (whileblock -> WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE .)
    IF              reduce using rule 39 (whileblock -> WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE .)
    TYPE            reduce using rule 39 (whileblock -> WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE .)
    WHILE           reduce using rule 39 (whileblock -> WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE .)
    RETURN          reduce using rule 39 (whileblock -> WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE .)
    NAME            reduce using rule 39 (whileblock -> WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE .)
    TIMES           reduce using rule 39 (whileblock -> WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE .)
    RBRACE          reduce using rule 39 (whileblock -> WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE .)
    ELSE            reduce using rule 39 (whileblock -> WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE .)


state 154

    (58) CS -> NOT LPAREN expression . RPAREN
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . TIMES expression

    RPAREN          shift and go to state 150
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    DIVIDE          shift and go to state 78
    TIMES           shift and go to state 80


state 155

    (32) unmatchedstatement -> IF LPAREN conditional RPAREN statement ELSE unmatchedstatement .

    SEMICOLON       reduce using rule 32 (unmatchedstatement -> IF LPAREN conditional RPAREN statement ELSE unmatchedstatement .)
    IF              reduce using rule 32 (unmatchedstatement -> IF LPAREN conditional RPAREN statement ELSE unmatchedstatement .)
    TYPE            reduce using rule 32 (unmatchedstatement -> IF LPAREN conditional RPAREN statement ELSE unmatchedstatement .)
    WHILE           reduce using rule 32 (unmatchedstatement -> IF LPAREN conditional RPAREN statement ELSE unmatchedstatement .)
    RETURN          reduce using rule 32 (unmatchedstatement -> IF LPAREN conditional RPAREN statement ELSE unmatchedstatement .)
    NAME            reduce using rule 32 (unmatchedstatement -> IF LPAREN conditional RPAREN statement ELSE unmatchedstatement .)
    TIMES           reduce using rule 32 (unmatchedstatement -> IF LPAREN conditional RPAREN statement ELSE unmatchedstatement .)
    RBRACE          reduce using rule 32 (unmatchedstatement -> IF LPAREN conditional RPAREN statement ELSE unmatchedstatement .)


state 156

    (35) ifblock -> IF LPAREN conditional RPAREN statement ELSE statement .

    ELSE            reduce using rule 35 (ifblock -> IF LPAREN conditional RPAREN statement ELSE statement .)
    SEMICOLON       reduce using rule 35 (ifblock -> IF LPAREN conditional RPAREN statement ELSE statement .)
    IF              reduce using rule 35 (ifblock -> IF LPAREN conditional RPAREN statement ELSE statement .)
    TYPE            reduce using rule 35 (ifblock -> IF LPAREN conditional RPAREN statement ELSE statement .)
    WHILE           reduce using rule 35 (ifblock -> IF LPAREN conditional RPAREN statement ELSE statement .)
    RETURN          reduce using rule 35 (ifblock -> IF LPAREN conditional RPAREN statement ELSE statement .)
    NAME            reduce using rule 35 (ifblock -> IF LPAREN conditional RPAREN statement ELSE statement .)
    TIMES           reduce using rule 35 (ifblock -> IF LPAREN conditional RPAREN statement ELSE statement .)
    RBRACE          reduce using rule 35 (ifblock -> IF LPAREN conditional RPAREN statement ELSE statement .)


state 157

    (36) ifblock -> IF LPAREN conditional RPAREN statement ELSE LBRACE . fbody RBRACE
    (16) fbody -> . allstatement fbody
    (17) fbody -> .
    (18) allstatement -> . statement
    (19) allstatement -> . unmatchedstatement
    (20) statement -> . assignment
    (21) statement -> . declaration
    (22) statement -> . whileblock
    (23) statement -> . ifblock
    (24) statement -> . returnstatement
    (25) statement -> . functioncall SEMICOLON
    (30) statement -> . SEMICOLON
    (31) unmatchedstatement -> . IF LPAREN conditional RPAREN allstatement
    (32) unmatchedstatement -> . IF LPAREN conditional RPAREN statement ELSE unmatchedstatement
    (33) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement
    (34) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE
    (66) assignment -> . assignment_base SEMICOLON
    (59) declaration -> . TYPE dlist1 SEMICOLON
    (39) whileblock -> . WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE
    (35) ifblock -> . IF LPAREN conditional RPAREN statement ELSE statement
    (36) ifblock -> . IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE
    (37) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE
    (38) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement
    (26) returnstatement -> . RETURN expression SEMICOLON
    (27) functioncall -> . NAME LPAREN arguments RPAREN
    (67) assignment_base -> . TIMES pointervar EQUALS expression
    (68) assignment_base -> . NAME EQUALS expression

    RBRACE          reduce using rule 17 (fbody -> .)
    SEMICOLON       shift and go to state 36
    IF              shift and go to state 46
    TYPE            shift and go to state 50
    WHILE           shift and go to state 34
    RETURN          shift and go to state 33
    NAME            shift and go to state 47
    TIMES           shift and go to state 44

    unmatchedstatement             shift and go to state 35
    declaration                    shift and go to state 43
    assignment                     shift and go to state 42
    whileblock                     shift and go to state 37
    ifblock                        shift and go to state 38
    allstatement                   shift and go to state 48
    statement                      shift and go to state 39
    fbody                          shift and go to state 159
    functioncall                   shift and go to state 40
    returnstatement                shift and go to state 49
    assignment_base                shift and go to state 41

state 158

    (33) unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE . ELSE unmatchedstatement
    (34) unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE .
    (37) ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE . ELSE LBRACE fbody RBRACE
    (38) ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE . ELSE statement

    ELSE            shift and go to state 160
    SEMICOLON       reduce using rule 34 (unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE .)
    IF              reduce using rule 34 (unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE .)
    TYPE            reduce using rule 34 (unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE .)
    WHILE           reduce using rule 34 (unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE .)
    RETURN          reduce using rule 34 (unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE .)
    NAME            reduce using rule 34 (unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE .)
    TIMES           reduce using rule 34 (unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE .)
    RBRACE          reduce using rule 34 (unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE .)


state 159

    (36) ifblock -> IF LPAREN conditional RPAREN statement ELSE LBRACE fbody . RBRACE

    RBRACE          shift and go to state 161


state 160

    (33) unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE . unmatchedstatement
    (37) ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE . LBRACE fbody RBRACE
    (38) ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE . statement
    (31) unmatchedstatement -> . IF LPAREN conditional RPAREN allstatement
    (32) unmatchedstatement -> . IF LPAREN conditional RPAREN statement ELSE unmatchedstatement
    (33) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement
    (34) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE
    (20) statement -> . assignment
    (21) statement -> . declaration
    (22) statement -> . whileblock
    (23) statement -> . ifblock
    (24) statement -> . returnstatement
    (25) statement -> . functioncall SEMICOLON
    (30) statement -> . SEMICOLON
    (66) assignment -> . assignment_base SEMICOLON
    (59) declaration -> . TYPE dlist1 SEMICOLON
    (39) whileblock -> . WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE
    (35) ifblock -> . IF LPAREN conditional RPAREN statement ELSE statement
    (36) ifblock -> . IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE
    (37) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE
    (38) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement
    (26) returnstatement -> . RETURN expression SEMICOLON
    (27) functioncall -> . NAME LPAREN arguments RPAREN
    (67) assignment_base -> . TIMES pointervar EQUALS expression
    (68) assignment_base -> . NAME EQUALS expression

    LBRACE          shift and go to state 164
    IF              shift and go to state 46
    SEMICOLON       shift and go to state 36
    TYPE            shift and go to state 50
    WHILE           shift and go to state 34
    RETURN          shift and go to state 33
    NAME            shift and go to state 47
    TIMES           shift and go to state 44

    unmatchedstatement             shift and go to state 162
    declaration                    shift and go to state 43
    assignment                     shift and go to state 42
    whileblock                     shift and go to state 37
    ifblock                        shift and go to state 38
    statement                      shift and go to state 163
    functioncall                   shift and go to state 40
    returnstatement                shift and go to state 49
    assignment_base                shift and go to state 41

state 161

    (36) ifblock -> IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE .

    ELSE            reduce using rule 36 (ifblock -> IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE .)
    SEMICOLON       reduce using rule 36 (ifblock -> IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE .)
    IF              reduce using rule 36 (ifblock -> IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE .)
    TYPE            reduce using rule 36 (ifblock -> IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE .)
    WHILE           reduce using rule 36 (ifblock -> IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE .)
    RETURN          reduce using rule 36 (ifblock -> IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE .)
    NAME            reduce using rule 36 (ifblock -> IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE .)
    TIMES           reduce using rule 36 (ifblock -> IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE .)
    RBRACE          reduce using rule 36 (ifblock -> IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE .)


state 162

    (33) unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement .

    SEMICOLON       reduce using rule 33 (unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement .)
    IF              reduce using rule 33 (unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement .)
    TYPE            reduce using rule 33 (unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement .)
    WHILE           reduce using rule 33 (unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement .)
    RETURN          reduce using rule 33 (unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement .)
    NAME            reduce using rule 33 (unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement .)
    TIMES           reduce using rule 33 (unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement .)
    RBRACE          reduce using rule 33 (unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement .)


state 163

    (38) ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement .

    ELSE            reduce using rule 38 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement .)
    SEMICOLON       reduce using rule 38 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement .)
    IF              reduce using rule 38 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement .)
    TYPE            reduce using rule 38 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement .)
    WHILE           reduce using rule 38 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement .)
    RETURN          reduce using rule 38 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement .)
    NAME            reduce using rule 38 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement .)
    TIMES           reduce using rule 38 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement .)
    RBRACE          reduce using rule 38 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement .)


state 164

    (37) ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE . fbody RBRACE
    (16) fbody -> . allstatement fbody
    (17) fbody -> .
    (18) allstatement -> . statement
    (19) allstatement -> . unmatchedstatement
    (20) statement -> . assignment
    (21) statement -> . declaration
    (22) statement -> . whileblock
    (23) statement -> . ifblock
    (24) statement -> . returnstatement
    (25) statement -> . functioncall SEMICOLON
    (30) statement -> . SEMICOLON
    (31) unmatchedstatement -> . IF LPAREN conditional RPAREN allstatement
    (32) unmatchedstatement -> . IF LPAREN conditional RPAREN statement ELSE unmatchedstatement
    (33) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement
    (34) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE
    (66) assignment -> . assignment_base SEMICOLON
    (59) declaration -> . TYPE dlist1 SEMICOLON
    (39) whileblock -> . WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE
    (35) ifblock -> . IF LPAREN conditional RPAREN statement ELSE statement
    (36) ifblock -> . IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE
    (37) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE
    (38) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement
    (26) returnstatement -> . RETURN expression SEMICOLON
    (27) functioncall -> . NAME LPAREN arguments RPAREN
    (67) assignment_base -> . TIMES pointervar EQUALS expression
    (68) assignment_base -> . NAME EQUALS expression

    RBRACE          reduce using rule 17 (fbody -> .)
    SEMICOLON       shift and go to state 36
    IF              shift and go to state 46
    TYPE            shift and go to state 50
    WHILE           shift and go to state 34
    RETURN          shift and go to state 33
    NAME            shift and go to state 47
    TIMES           shift and go to state 44

    unmatchedstatement             shift and go to state 35
    declaration                    shift and go to state 43
    assignment                     shift and go to state 42
    whileblock                     shift and go to state 37
    ifblock                        shift and go to state 38
    allstatement                   shift and go to state 48
    statement                      shift and go to state 39
    fbody                          shift and go to state 165
    functioncall                   shift and go to state 40
    returnstatement                shift and go to state 49
    assignment_base                shift and go to state 41

state 165

    (37) ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody . RBRACE

    RBRACE          shift and go to state 166


state 166

    (37) ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE .

    ELSE            reduce using rule 37 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE .)
    SEMICOLON       reduce using rule 37 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE .)
    IF              reduce using rule 37 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE .)
    TYPE            reduce using rule 37 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE .)
    WHILE           reduce using rule 37 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE .)
    RETURN          reduce using rule 37 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE .)
    NAME            reduce using rule 37 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE .)
    TIMES           reduce using rule 37 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE .)
    RBRACE          reduce using rule 37 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE .)

