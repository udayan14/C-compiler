Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> master
Rule 1     master -> program
Rule 2     program -> function
Rule 3     program -> function program
Rule 4     program -> declaration program
Rule 5     program -> prototype program
Rule 6     prototype -> TYPE allthestars NAME LPAREN paramlist RPAREN SEMICOLON
Rule 7     prototype -> TYPE NAME LPAREN paramlist RPAREN SEMICOLON
Rule 8     allthestars -> TIMES
Rule 9     allthestars -> TIMES allthestars
Rule 10    function -> TYPE allthestars NAME LPAREN paramlist RPAREN LBRACE fbody RBRACE
Rule 11    function -> TYPE NAME LPAREN paramlist RPAREN LBRACE fbody RBRACE
Rule 12    paramlist -> <empty>
Rule 13    paramlist -> TYPE NAME paramlist2
Rule 14    paramlist -> TYPE specialvar paramlist2
Rule 15    paramlist2 -> <empty>
Rule 16    paramlist2 -> COMMA TYPE NAME paramlist2
Rule 17    paramlist2 -> COMMA TYPE specialvar paramlist2
Rule 18    fbody -> allstatement fbody
Rule 19    fbody -> <empty>
Rule 20    allstatement -> statement
Rule 21    allstatement -> unmatchedstatement
Rule 22    statement -> assignment
Rule 23    statement -> declaration
Rule 24    statement -> whileblock
Rule 25    statement -> ifblock
Rule 26    statement -> returnstatement
Rule 27    statement -> functioncall
Rule 28    returnstatement -> RETURN expression SEMICOLON
Rule 29    functioncall -> NAME LPAREN arguments RPAREN SEMICOLON
Rule 30    arguments -> expression
Rule 31    arguments -> expression COMMA arguments
Rule 32    statement -> SEMICOLON
Rule 33    unmatchedstatement -> IF LPAREN conditional RPAREN allstatement
Rule 34    unmatchedstatement -> IF LPAREN conditional RPAREN statement ELSE unmatchedstatement
Rule 35    unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement
Rule 36    unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE
Rule 37    ifblock -> IF LPAREN conditional RPAREN statement ELSE statement
Rule 38    ifblock -> IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE
Rule 39    ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE
Rule 40    ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement
Rule 41    whileblock -> WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE
Rule 42    conditional -> LPAREN conditional RPAREN
Rule 43    conditional -> conditionbase
Rule 44    conditional -> NOT LPAREN conditional RPAREN
Rule 45    conditional -> conditional LESSTHANEQ conditional
Rule 46    conditional -> conditional GREATERTHANEQ conditional
Rule 47    conditional -> conditional UNEQUAL conditional
Rule 48    conditional -> conditional EQUALCHECK conditional
Rule 49    conditional -> conditional LESSTHAN conditional
Rule 50    conditional -> conditional GREATERTHAN conditional
Rule 51    conditional -> conditional ANDOPERATOR conditional
Rule 52    conditional -> conditional OROPERATOR conditional
Rule 53    conditionbase -> CS LESSTHANEQ CS
Rule 54    conditionbase -> CS GREATERTHANEQ CS
Rule 55    conditionbase -> CS UNEQUAL CS
Rule 56    conditionbase -> CS EQUALCHECK CS
Rule 57    conditionbase -> CS LESSTHAN CS
Rule 58    conditionbase -> CS GREATERTHAN CS
Rule 59    CS -> expression
Rule 60    CS -> NOT LPAREN expression RPAREN
Rule 61    declaration -> TYPE dlist1 SEMICOLON
Rule 62    dlist1 -> NAME
Rule 63    dlist1 -> NAME COMMA dlist1
Rule 64    dlist1 -> specialvar
Rule 65    dlist1 -> specialvar COMMA dlist1
Rule 66    specialvar -> TIMES specialvar
Rule 67    specialvar -> TIMES NAME
Rule 68    assignment -> assignment_base SEMICOLON
Rule 69    assignment_base -> TIMES pointervar EQUALS expression
Rule 70    assignment_base -> NAME EQUALS expression
Rule 71    expression -> functioncall
Rule 72    expression -> expression PLUS expression
Rule 73    expression -> expression MINUS expression
Rule 74    expression -> expression DIVIDE expression
Rule 75    expression -> expression TIMES expression
Rule 76    expression -> MINUS expression
Rule 77    expression -> LPAREN expression RPAREN
Rule 78    expression -> allnumbers
Rule 79    allnumbers -> FLOAT
Rule 80    allnumbers -> NUMBER
Rule 81    expression -> pointervar
Rule 82    pointervar -> TIMES pointervar
Rule 83    pointervar -> ADDROF pointervar
Rule 84    pointervar -> NAME

Terminals, with rules where they appear

ADDROF               : 83
ANDOPERATOR          : 51
COMMA                : 16 17 31 63 65
DIVIDE               : 74
ELSE                 : 34 35 37 38 39 40
EQUALCHECK           : 48 56
EQUALS               : 69 70
FLOAT                : 79
GREATERTHAN          : 50 58
GREATERTHANEQ        : 46 54
IF                   : 33 34 35 36 37 38 39 40
LBRACE               : 10 11 35 36 38 39 39 40 41
LESSTHAN             : 49 57
LESSTHANEQ           : 45 53
LPAREN               : 6 7 10 11 29 33 34 35 36 37 38 39 40 41 42 44 60 77
MINUS                : 73 76
NAME                 : 6 7 10 11 13 16 29 62 63 67 70 84
NOT                  : 44 60
NUMBER               : 80
OROPERATOR           : 52
PLUS                 : 72
RBRACE               : 10 11 35 36 38 39 39 40 41
RETURN               : 28
RPAREN               : 6 7 10 11 29 33 34 35 36 37 38 39 40 41 42 44 60 77
SEMICOLON            : 6 7 28 29 32 61 68
TIMES                : 8 9 66 67 69 75 82
TYPE                 : 6 7 10 11 13 14 16 17 61
UNEQUAL              : 47 55
WHILE                : 41
error                : 

Nonterminals, with rules where they appear

CS                   : 53 53 54 54 55 55 56 56 57 57 58 58
allnumbers           : 78
allstatement         : 18 33
allthestars          : 6 9 10
arguments            : 29 31
assignment           : 22
assignment_base      : 68
conditional          : 33 34 35 36 37 38 39 40 41 42 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52
conditionbase        : 43
declaration          : 4 23
dlist1               : 61 63 65
expression           : 28 30 31 59 60 69 70 72 72 73 73 74 74 75 75 76 77
fbody                : 10 11 18 35 36 38 39 39 40 41
function             : 2 3
functioncall         : 27 71
ifblock              : 25
master               : 0
paramlist            : 6 7 10 11
paramlist2           : 13 14 16 17
pointervar           : 69 81 82 83
program              : 1 3 4 5
prototype            : 5
returnstatement      : 26
specialvar           : 14 17 64 65 66
statement            : 20 34 37 37 38 40
unmatchedstatement   : 21 34 35
whileblock           : 24

Parsing method: LALR

state 0

    (0) S' -> . master
    (1) master -> . program
    (2) program -> . function
    (3) program -> . function program
    (4) program -> . declaration program
    (5) program -> . prototype program
    (10) function -> . TYPE allthestars NAME LPAREN paramlist RPAREN LBRACE fbody RBRACE
    (11) function -> . TYPE NAME LPAREN paramlist RPAREN LBRACE fbody RBRACE
    (61) declaration -> . TYPE dlist1 SEMICOLON
    (6) prototype -> . TYPE allthestars NAME LPAREN paramlist RPAREN SEMICOLON
    (7) prototype -> . TYPE NAME LPAREN paramlist RPAREN SEMICOLON

    TYPE            shift and go to state 6

    function                       shift and go to state 1
    program                        shift and go to state 2
    master                         shift and go to state 3
    declaration                    shift and go to state 4
    prototype                      shift and go to state 5

state 1

    (2) program -> function .
    (3) program -> function . program
    (2) program -> . function
    (3) program -> . function program
    (4) program -> . declaration program
    (5) program -> . prototype program
    (10) function -> . TYPE allthestars NAME LPAREN paramlist RPAREN LBRACE fbody RBRACE
    (11) function -> . TYPE NAME LPAREN paramlist RPAREN LBRACE fbody RBRACE
    (61) declaration -> . TYPE dlist1 SEMICOLON
    (6) prototype -> . TYPE allthestars NAME LPAREN paramlist RPAREN SEMICOLON
    (7) prototype -> . TYPE NAME LPAREN paramlist RPAREN SEMICOLON

    $end            reduce using rule 2 (program -> function .)
    TYPE            shift and go to state 6

    function                       shift and go to state 1
    program                        shift and go to state 7
    declaration                    shift and go to state 4
    prototype                      shift and go to state 5

state 2

    (1) master -> program .

    $end            reduce using rule 1 (master -> program .)


state 3

    (0) S' -> master .



state 4

    (4) program -> declaration . program
    (2) program -> . function
    (3) program -> . function program
    (4) program -> . declaration program
    (5) program -> . prototype program
    (10) function -> . TYPE allthestars NAME LPAREN paramlist RPAREN LBRACE fbody RBRACE
    (11) function -> . TYPE NAME LPAREN paramlist RPAREN LBRACE fbody RBRACE
    (61) declaration -> . TYPE dlist1 SEMICOLON
    (6) prototype -> . TYPE allthestars NAME LPAREN paramlist RPAREN SEMICOLON
    (7) prototype -> . TYPE NAME LPAREN paramlist RPAREN SEMICOLON

    TYPE            shift and go to state 6

    function                       shift and go to state 1
    program                        shift and go to state 8
    declaration                    shift and go to state 4
    prototype                      shift and go to state 5

state 5

    (5) program -> prototype . program
    (2) program -> . function
    (3) program -> . function program
    (4) program -> . declaration program
    (5) program -> . prototype program
    (10) function -> . TYPE allthestars NAME LPAREN paramlist RPAREN LBRACE fbody RBRACE
    (11) function -> . TYPE NAME LPAREN paramlist RPAREN LBRACE fbody RBRACE
    (61) declaration -> . TYPE dlist1 SEMICOLON
    (6) prototype -> . TYPE allthestars NAME LPAREN paramlist RPAREN SEMICOLON
    (7) prototype -> . TYPE NAME LPAREN paramlist RPAREN SEMICOLON

    TYPE            shift and go to state 6

    function                       shift and go to state 1
    program                        shift and go to state 9
    declaration                    shift and go to state 4
    prototype                      shift and go to state 5

state 6

    (10) function -> TYPE . allthestars NAME LPAREN paramlist RPAREN LBRACE fbody RBRACE
    (11) function -> TYPE . NAME LPAREN paramlist RPAREN LBRACE fbody RBRACE
    (61) declaration -> TYPE . dlist1 SEMICOLON
    (6) prototype -> TYPE . allthestars NAME LPAREN paramlist RPAREN SEMICOLON
    (7) prototype -> TYPE . NAME LPAREN paramlist RPAREN SEMICOLON
    (8) allthestars -> . TIMES
    (9) allthestars -> . TIMES allthestars
    (62) dlist1 -> . NAME
    (63) dlist1 -> . NAME COMMA dlist1
    (64) dlist1 -> . specialvar
    (65) dlist1 -> . specialvar COMMA dlist1
    (66) specialvar -> . TIMES specialvar
    (67) specialvar -> . TIMES NAME

    NAME            shift and go to state 14
    TIMES           shift and go to state 11

    specialvar                     shift and go to state 13
    dlist1                         shift and go to state 12
    allthestars                    shift and go to state 10

state 7

    (3) program -> function program .

    $end            reduce using rule 3 (program -> function program .)


state 8

    (4) program -> declaration program .

    $end            reduce using rule 4 (program -> declaration program .)


state 9

    (5) program -> prototype program .

    $end            reduce using rule 5 (program -> prototype program .)


state 10

    (10) function -> TYPE allthestars . NAME LPAREN paramlist RPAREN LBRACE fbody RBRACE
    (6) prototype -> TYPE allthestars . NAME LPAREN paramlist RPAREN SEMICOLON

    NAME            shift and go to state 15


state 11

    (8) allthestars -> TIMES .
    (9) allthestars -> TIMES . allthestars
    (66) specialvar -> TIMES . specialvar
    (67) specialvar -> TIMES . NAME
    (8) allthestars -> . TIMES
    (9) allthestars -> . TIMES allthestars
    (66) specialvar -> . TIMES specialvar
    (67) specialvar -> . TIMES NAME

    NAME            reduce using rule 8 (allthestars -> TIMES .)
    TIMES           shift and go to state 11

  ! NAME            [ shift and go to state 17 ]

    specialvar                     shift and go to state 16
    allthestars                    shift and go to state 18

state 12

    (61) declaration -> TYPE dlist1 . SEMICOLON

    SEMICOLON       shift and go to state 19


state 13

    (64) dlist1 -> specialvar .
    (65) dlist1 -> specialvar . COMMA dlist1

    SEMICOLON       reduce using rule 64 (dlist1 -> specialvar .)
    COMMA           shift and go to state 20


state 14

    (11) function -> TYPE NAME . LPAREN paramlist RPAREN LBRACE fbody RBRACE
    (7) prototype -> TYPE NAME . LPAREN paramlist RPAREN SEMICOLON
    (62) dlist1 -> NAME .
    (63) dlist1 -> NAME . COMMA dlist1

    LPAREN          shift and go to state 22
    SEMICOLON       reduce using rule 62 (dlist1 -> NAME .)
    COMMA           shift and go to state 21


state 15

    (10) function -> TYPE allthestars NAME . LPAREN paramlist RPAREN LBRACE fbody RBRACE
    (6) prototype -> TYPE allthestars NAME . LPAREN paramlist RPAREN SEMICOLON

    LPAREN          shift and go to state 23


state 16

    (66) specialvar -> TIMES specialvar .

    COMMA           reduce using rule 66 (specialvar -> TIMES specialvar .)
    SEMICOLON       reduce using rule 66 (specialvar -> TIMES specialvar .)
    RPAREN          reduce using rule 66 (specialvar -> TIMES specialvar .)


state 17

    (67) specialvar -> TIMES NAME .

    COMMA           reduce using rule 67 (specialvar -> TIMES NAME .)
    SEMICOLON       reduce using rule 67 (specialvar -> TIMES NAME .)
    RPAREN          reduce using rule 67 (specialvar -> TIMES NAME .)


state 18

    (9) allthestars -> TIMES allthestars .

    NAME            reduce using rule 9 (allthestars -> TIMES allthestars .)


state 19

    (61) declaration -> TYPE dlist1 SEMICOLON .

    SEMICOLON       reduce using rule 61 (declaration -> TYPE dlist1 SEMICOLON .)
    IF              reduce using rule 61 (declaration -> TYPE dlist1 SEMICOLON .)
    TYPE            reduce using rule 61 (declaration -> TYPE dlist1 SEMICOLON .)
    WHILE           reduce using rule 61 (declaration -> TYPE dlist1 SEMICOLON .)
    RETURN          reduce using rule 61 (declaration -> TYPE dlist1 SEMICOLON .)
    NAME            reduce using rule 61 (declaration -> TYPE dlist1 SEMICOLON .)
    TIMES           reduce using rule 61 (declaration -> TYPE dlist1 SEMICOLON .)
    RBRACE          reduce using rule 61 (declaration -> TYPE dlist1 SEMICOLON .)
    ELSE            reduce using rule 61 (declaration -> TYPE dlist1 SEMICOLON .)


state 20

    (65) dlist1 -> specialvar COMMA . dlist1
    (62) dlist1 -> . NAME
    (63) dlist1 -> . NAME COMMA dlist1
    (64) dlist1 -> . specialvar
    (65) dlist1 -> . specialvar COMMA dlist1
    (66) specialvar -> . TIMES specialvar
    (67) specialvar -> . TIMES NAME

    NAME            shift and go to state 25
    TIMES           shift and go to state 26

    specialvar                     shift and go to state 13
    dlist1                         shift and go to state 24

state 21

    (63) dlist1 -> NAME COMMA . dlist1
    (62) dlist1 -> . NAME
    (63) dlist1 -> . NAME COMMA dlist1
    (64) dlist1 -> . specialvar
    (65) dlist1 -> . specialvar COMMA dlist1
    (66) specialvar -> . TIMES specialvar
    (67) specialvar -> . TIMES NAME

    NAME            shift and go to state 25
    TIMES           shift and go to state 26

    specialvar                     shift and go to state 13
    dlist1                         shift and go to state 27

state 22

    (11) function -> TYPE NAME LPAREN . paramlist RPAREN LBRACE fbody RBRACE
    (7) prototype -> TYPE NAME LPAREN . paramlist RPAREN SEMICOLON
    (12) paramlist -> .
    (13) paramlist -> . TYPE NAME paramlist2
    (14) paramlist -> . TYPE specialvar paramlist2

    RPAREN          reduce using rule 12 (paramlist -> .)
    TYPE            shift and go to state 29

    paramlist                      shift and go to state 28

state 23

    (10) function -> TYPE allthestars NAME LPAREN . paramlist RPAREN LBRACE fbody RBRACE
    (6) prototype -> TYPE allthestars NAME LPAREN . paramlist RPAREN SEMICOLON
    (12) paramlist -> .
    (13) paramlist -> . TYPE NAME paramlist2
    (14) paramlist -> . TYPE specialvar paramlist2

    RPAREN          reduce using rule 12 (paramlist -> .)
    TYPE            shift and go to state 29

    paramlist                      shift and go to state 30

state 24

    (65) dlist1 -> specialvar COMMA dlist1 .

    SEMICOLON       reduce using rule 65 (dlist1 -> specialvar COMMA dlist1 .)


state 25

    (62) dlist1 -> NAME .
    (63) dlist1 -> NAME . COMMA dlist1

    SEMICOLON       reduce using rule 62 (dlist1 -> NAME .)
    COMMA           shift and go to state 21


state 26

    (66) specialvar -> TIMES . specialvar
    (67) specialvar -> TIMES . NAME
    (66) specialvar -> . TIMES specialvar
    (67) specialvar -> . TIMES NAME

    NAME            shift and go to state 17
    TIMES           shift and go to state 26

    specialvar                     shift and go to state 16

state 27

    (63) dlist1 -> NAME COMMA dlist1 .

    SEMICOLON       reduce using rule 63 (dlist1 -> NAME COMMA dlist1 .)


state 28

    (11) function -> TYPE NAME LPAREN paramlist . RPAREN LBRACE fbody RBRACE
    (7) prototype -> TYPE NAME LPAREN paramlist . RPAREN SEMICOLON

    RPAREN          shift and go to state 31


state 29

    (13) paramlist -> TYPE . NAME paramlist2
    (14) paramlist -> TYPE . specialvar paramlist2
    (66) specialvar -> . TIMES specialvar
    (67) specialvar -> . TIMES NAME

    NAME            shift and go to state 33
    TIMES           shift and go to state 26

    specialvar                     shift and go to state 32

state 30

    (10) function -> TYPE allthestars NAME LPAREN paramlist . RPAREN LBRACE fbody RBRACE
    (6) prototype -> TYPE allthestars NAME LPAREN paramlist . RPAREN SEMICOLON

    RPAREN          shift and go to state 34


state 31

    (11) function -> TYPE NAME LPAREN paramlist RPAREN . LBRACE fbody RBRACE
    (7) prototype -> TYPE NAME LPAREN paramlist RPAREN . SEMICOLON

    LBRACE          shift and go to state 35
    SEMICOLON       shift and go to state 36


state 32

    (14) paramlist -> TYPE specialvar . paramlist2
    (15) paramlist2 -> .
    (16) paramlist2 -> . COMMA TYPE NAME paramlist2
    (17) paramlist2 -> . COMMA TYPE specialvar paramlist2

    RPAREN          reduce using rule 15 (paramlist2 -> .)
    COMMA           shift and go to state 37

    paramlist2                     shift and go to state 38

state 33

    (13) paramlist -> TYPE NAME . paramlist2
    (15) paramlist2 -> .
    (16) paramlist2 -> . COMMA TYPE NAME paramlist2
    (17) paramlist2 -> . COMMA TYPE specialvar paramlist2

    RPAREN          reduce using rule 15 (paramlist2 -> .)
    COMMA           shift and go to state 37

    paramlist2                     shift and go to state 39

state 34

    (10) function -> TYPE allthestars NAME LPAREN paramlist RPAREN . LBRACE fbody RBRACE
    (6) prototype -> TYPE allthestars NAME LPAREN paramlist RPAREN . SEMICOLON

    LBRACE          shift and go to state 40
    SEMICOLON       shift and go to state 41


state 35

    (11) function -> TYPE NAME LPAREN paramlist RPAREN LBRACE . fbody RBRACE
    (18) fbody -> . allstatement fbody
    (19) fbody -> .
    (20) allstatement -> . statement
    (21) allstatement -> . unmatchedstatement
    (22) statement -> . assignment
    (23) statement -> . declaration
    (24) statement -> . whileblock
    (25) statement -> . ifblock
    (26) statement -> . returnstatement
    (27) statement -> . functioncall
    (32) statement -> . SEMICOLON
    (33) unmatchedstatement -> . IF LPAREN conditional RPAREN allstatement
    (34) unmatchedstatement -> . IF LPAREN conditional RPAREN statement ELSE unmatchedstatement
    (35) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement
    (36) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE
    (68) assignment -> . assignment_base SEMICOLON
    (61) declaration -> . TYPE dlist1 SEMICOLON
    (41) whileblock -> . WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE
    (37) ifblock -> . IF LPAREN conditional RPAREN statement ELSE statement
    (38) ifblock -> . IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE
    (39) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE
    (40) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement
    (28) returnstatement -> . RETURN expression SEMICOLON
    (29) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (69) assignment_base -> . TIMES pointervar EQUALS expression
    (70) assignment_base -> . NAME EQUALS expression

    RBRACE          reduce using rule 19 (fbody -> .)
    SEMICOLON       shift and go to state 45
    IF              shift and go to state 55
    TYPE            shift and go to state 59
    WHILE           shift and go to state 43
    RETURN          shift and go to state 42
    NAME            shift and go to state 56
    TIMES           shift and go to state 53

    unmatchedstatement             shift and go to state 44
    assignment                     shift and go to state 51
    declaration                    shift and go to state 52
    whileblock                     shift and go to state 46
    ifblock                        shift and go to state 47
    allstatement                   shift and go to state 57
    statement                      shift and go to state 48
    fbody                          shift and go to state 54
    functioncall                   shift and go to state 49
    returnstatement                shift and go to state 58
    assignment_base                shift and go to state 50

state 36

    (7) prototype -> TYPE NAME LPAREN paramlist RPAREN SEMICOLON .

    TYPE            reduce using rule 7 (prototype -> TYPE NAME LPAREN paramlist RPAREN SEMICOLON .)


state 37

    (16) paramlist2 -> COMMA . TYPE NAME paramlist2
    (17) paramlist2 -> COMMA . TYPE specialvar paramlist2

    TYPE            shift and go to state 60


state 38

    (14) paramlist -> TYPE specialvar paramlist2 .

    RPAREN          reduce using rule 14 (paramlist -> TYPE specialvar paramlist2 .)


state 39

    (13) paramlist -> TYPE NAME paramlist2 .

    RPAREN          reduce using rule 13 (paramlist -> TYPE NAME paramlist2 .)


state 40

    (10) function -> TYPE allthestars NAME LPAREN paramlist RPAREN LBRACE . fbody RBRACE
    (18) fbody -> . allstatement fbody
    (19) fbody -> .
    (20) allstatement -> . statement
    (21) allstatement -> . unmatchedstatement
    (22) statement -> . assignment
    (23) statement -> . declaration
    (24) statement -> . whileblock
    (25) statement -> . ifblock
    (26) statement -> . returnstatement
    (27) statement -> . functioncall
    (32) statement -> . SEMICOLON
    (33) unmatchedstatement -> . IF LPAREN conditional RPAREN allstatement
    (34) unmatchedstatement -> . IF LPAREN conditional RPAREN statement ELSE unmatchedstatement
    (35) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement
    (36) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE
    (68) assignment -> . assignment_base SEMICOLON
    (61) declaration -> . TYPE dlist1 SEMICOLON
    (41) whileblock -> . WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE
    (37) ifblock -> . IF LPAREN conditional RPAREN statement ELSE statement
    (38) ifblock -> . IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE
    (39) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE
    (40) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement
    (28) returnstatement -> . RETURN expression SEMICOLON
    (29) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (69) assignment_base -> . TIMES pointervar EQUALS expression
    (70) assignment_base -> . NAME EQUALS expression

    RBRACE          reduce using rule 19 (fbody -> .)
    SEMICOLON       shift and go to state 45
    IF              shift and go to state 55
    TYPE            shift and go to state 59
    WHILE           shift and go to state 43
    RETURN          shift and go to state 42
    NAME            shift and go to state 56
    TIMES           shift and go to state 53

    unmatchedstatement             shift and go to state 44
    assignment                     shift and go to state 51
    declaration                    shift and go to state 52
    whileblock                     shift and go to state 46
    ifblock                        shift and go to state 47
    allstatement                   shift and go to state 57
    statement                      shift and go to state 48
    fbody                          shift and go to state 61
    functioncall                   shift and go to state 49
    returnstatement                shift and go to state 58
    assignment_base                shift and go to state 50

state 41

    (6) prototype -> TYPE allthestars NAME LPAREN paramlist RPAREN SEMICOLON .

    TYPE            reduce using rule 6 (prototype -> TYPE allthestars NAME LPAREN paramlist RPAREN SEMICOLON .)


state 42

    (28) returnstatement -> RETURN . expression SEMICOLON
    (71) expression -> . functioncall
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . MINUS expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . allnumbers
    (81) expression -> . pointervar
    (29) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (79) allnumbers -> . FLOAT
    (80) allnumbers -> . NUMBER
    (82) pointervar -> . TIMES pointervar
    (83) pointervar -> . ADDROF pointervar
    (84) pointervar -> . NAME

    MINUS           shift and go to state 72
    LPAREN          shift and go to state 70
    NAME            shift and go to state 63
    FLOAT           shift and go to state 62
    NUMBER          shift and go to state 67
    TIMES           shift and go to state 68
    ADDROF          shift and go to state 64

    functioncall                   shift and go to state 69
    pointervar                     shift and go to state 66
    allnumbers                     shift and go to state 65
    expression                     shift and go to state 71

state 43

    (41) whileblock -> WHILE . LPAREN conditional RPAREN LBRACE fbody RBRACE

    LPAREN          shift and go to state 73


state 44

    (21) allstatement -> unmatchedstatement .

    SEMICOLON       reduce using rule 21 (allstatement -> unmatchedstatement .)
    IF              reduce using rule 21 (allstatement -> unmatchedstatement .)
    TYPE            reduce using rule 21 (allstatement -> unmatchedstatement .)
    WHILE           reduce using rule 21 (allstatement -> unmatchedstatement .)
    RETURN          reduce using rule 21 (allstatement -> unmatchedstatement .)
    NAME            reduce using rule 21 (allstatement -> unmatchedstatement .)
    TIMES           reduce using rule 21 (allstatement -> unmatchedstatement .)
    RBRACE          reduce using rule 21 (allstatement -> unmatchedstatement .)


state 45

    (32) statement -> SEMICOLON .

    SEMICOLON       reduce using rule 32 (statement -> SEMICOLON .)
    IF              reduce using rule 32 (statement -> SEMICOLON .)
    TYPE            reduce using rule 32 (statement -> SEMICOLON .)
    WHILE           reduce using rule 32 (statement -> SEMICOLON .)
    RETURN          reduce using rule 32 (statement -> SEMICOLON .)
    NAME            reduce using rule 32 (statement -> SEMICOLON .)
    TIMES           reduce using rule 32 (statement -> SEMICOLON .)
    RBRACE          reduce using rule 32 (statement -> SEMICOLON .)
    ELSE            reduce using rule 32 (statement -> SEMICOLON .)


state 46

    (24) statement -> whileblock .

    SEMICOLON       reduce using rule 24 (statement -> whileblock .)
    IF              reduce using rule 24 (statement -> whileblock .)
    TYPE            reduce using rule 24 (statement -> whileblock .)
    WHILE           reduce using rule 24 (statement -> whileblock .)
    RETURN          reduce using rule 24 (statement -> whileblock .)
    NAME            reduce using rule 24 (statement -> whileblock .)
    TIMES           reduce using rule 24 (statement -> whileblock .)
    RBRACE          reduce using rule 24 (statement -> whileblock .)
    ELSE            reduce using rule 24 (statement -> whileblock .)


state 47

    (25) statement -> ifblock .

    SEMICOLON       reduce using rule 25 (statement -> ifblock .)
    IF              reduce using rule 25 (statement -> ifblock .)
    TYPE            reduce using rule 25 (statement -> ifblock .)
    WHILE           reduce using rule 25 (statement -> ifblock .)
    RETURN          reduce using rule 25 (statement -> ifblock .)
    NAME            reduce using rule 25 (statement -> ifblock .)
    TIMES           reduce using rule 25 (statement -> ifblock .)
    RBRACE          reduce using rule 25 (statement -> ifblock .)
    ELSE            reduce using rule 25 (statement -> ifblock .)


state 48

    (20) allstatement -> statement .

    SEMICOLON       reduce using rule 20 (allstatement -> statement .)
    IF              reduce using rule 20 (allstatement -> statement .)
    TYPE            reduce using rule 20 (allstatement -> statement .)
    WHILE           reduce using rule 20 (allstatement -> statement .)
    RETURN          reduce using rule 20 (allstatement -> statement .)
    NAME            reduce using rule 20 (allstatement -> statement .)
    TIMES           reduce using rule 20 (allstatement -> statement .)
    RBRACE          reduce using rule 20 (allstatement -> statement .)


state 49

    (27) statement -> functioncall .

    SEMICOLON       reduce using rule 27 (statement -> functioncall .)
    IF              reduce using rule 27 (statement -> functioncall .)
    TYPE            reduce using rule 27 (statement -> functioncall .)
    WHILE           reduce using rule 27 (statement -> functioncall .)
    RETURN          reduce using rule 27 (statement -> functioncall .)
    NAME            reduce using rule 27 (statement -> functioncall .)
    TIMES           reduce using rule 27 (statement -> functioncall .)
    RBRACE          reduce using rule 27 (statement -> functioncall .)
    ELSE            reduce using rule 27 (statement -> functioncall .)


state 50

    (68) assignment -> assignment_base . SEMICOLON

    SEMICOLON       shift and go to state 74


state 51

    (22) statement -> assignment .

    SEMICOLON       reduce using rule 22 (statement -> assignment .)
    IF              reduce using rule 22 (statement -> assignment .)
    TYPE            reduce using rule 22 (statement -> assignment .)
    WHILE           reduce using rule 22 (statement -> assignment .)
    RETURN          reduce using rule 22 (statement -> assignment .)
    NAME            reduce using rule 22 (statement -> assignment .)
    TIMES           reduce using rule 22 (statement -> assignment .)
    RBRACE          reduce using rule 22 (statement -> assignment .)
    ELSE            reduce using rule 22 (statement -> assignment .)


state 52

    (23) statement -> declaration .

    SEMICOLON       reduce using rule 23 (statement -> declaration .)
    IF              reduce using rule 23 (statement -> declaration .)
    TYPE            reduce using rule 23 (statement -> declaration .)
    WHILE           reduce using rule 23 (statement -> declaration .)
    RETURN          reduce using rule 23 (statement -> declaration .)
    NAME            reduce using rule 23 (statement -> declaration .)
    TIMES           reduce using rule 23 (statement -> declaration .)
    RBRACE          reduce using rule 23 (statement -> declaration .)
    ELSE            reduce using rule 23 (statement -> declaration .)


state 53

    (69) assignment_base -> TIMES . pointervar EQUALS expression
    (82) pointervar -> . TIMES pointervar
    (83) pointervar -> . ADDROF pointervar
    (84) pointervar -> . NAME

    TIMES           shift and go to state 68
    ADDROF          shift and go to state 64
    NAME            shift and go to state 75

    pointervar                     shift and go to state 76

state 54

    (11) function -> TYPE NAME LPAREN paramlist RPAREN LBRACE fbody . RBRACE

    RBRACE          shift and go to state 77


state 55

    (33) unmatchedstatement -> IF . LPAREN conditional RPAREN allstatement
    (34) unmatchedstatement -> IF . LPAREN conditional RPAREN statement ELSE unmatchedstatement
    (35) unmatchedstatement -> IF . LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement
    (36) unmatchedstatement -> IF . LPAREN conditional RPAREN LBRACE fbody RBRACE
    (37) ifblock -> IF . LPAREN conditional RPAREN statement ELSE statement
    (38) ifblock -> IF . LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE
    (39) ifblock -> IF . LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE
    (40) ifblock -> IF . LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement

    LPAREN          shift and go to state 78


state 56

    (29) functioncall -> NAME . LPAREN arguments RPAREN SEMICOLON
    (70) assignment_base -> NAME . EQUALS expression

    LPAREN          shift and go to state 80
    EQUALS          shift and go to state 79


state 57

    (18) fbody -> allstatement . fbody
    (18) fbody -> . allstatement fbody
    (19) fbody -> .
    (20) allstatement -> . statement
    (21) allstatement -> . unmatchedstatement
    (22) statement -> . assignment
    (23) statement -> . declaration
    (24) statement -> . whileblock
    (25) statement -> . ifblock
    (26) statement -> . returnstatement
    (27) statement -> . functioncall
    (32) statement -> . SEMICOLON
    (33) unmatchedstatement -> . IF LPAREN conditional RPAREN allstatement
    (34) unmatchedstatement -> . IF LPAREN conditional RPAREN statement ELSE unmatchedstatement
    (35) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement
    (36) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE
    (68) assignment -> . assignment_base SEMICOLON
    (61) declaration -> . TYPE dlist1 SEMICOLON
    (41) whileblock -> . WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE
    (37) ifblock -> . IF LPAREN conditional RPAREN statement ELSE statement
    (38) ifblock -> . IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE
    (39) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE
    (40) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement
    (28) returnstatement -> . RETURN expression SEMICOLON
    (29) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (69) assignment_base -> . TIMES pointervar EQUALS expression
    (70) assignment_base -> . NAME EQUALS expression

    RBRACE          reduce using rule 19 (fbody -> .)
    SEMICOLON       shift and go to state 45
    IF              shift and go to state 55
    TYPE            shift and go to state 59
    WHILE           shift and go to state 43
    RETURN          shift and go to state 42
    NAME            shift and go to state 56
    TIMES           shift and go to state 53

    unmatchedstatement             shift and go to state 44
    assignment                     shift and go to state 51
    fbody                          shift and go to state 81
    whileblock                     shift and go to state 46
    ifblock                        shift and go to state 47
    allstatement                   shift and go to state 57
    statement                      shift and go to state 48
    declaration                    shift and go to state 52
    functioncall                   shift and go to state 49
    returnstatement                shift and go to state 58
    assignment_base                shift and go to state 50

state 58

    (26) statement -> returnstatement .

    SEMICOLON       reduce using rule 26 (statement -> returnstatement .)
    IF              reduce using rule 26 (statement -> returnstatement .)
    TYPE            reduce using rule 26 (statement -> returnstatement .)
    WHILE           reduce using rule 26 (statement -> returnstatement .)
    RETURN          reduce using rule 26 (statement -> returnstatement .)
    NAME            reduce using rule 26 (statement -> returnstatement .)
    TIMES           reduce using rule 26 (statement -> returnstatement .)
    RBRACE          reduce using rule 26 (statement -> returnstatement .)
    ELSE            reduce using rule 26 (statement -> returnstatement .)


state 59

    (61) declaration -> TYPE . dlist1 SEMICOLON
    (62) dlist1 -> . NAME
    (63) dlist1 -> . NAME COMMA dlist1
    (64) dlist1 -> . specialvar
    (65) dlist1 -> . specialvar COMMA dlist1
    (66) specialvar -> . TIMES specialvar
    (67) specialvar -> . TIMES NAME

    NAME            shift and go to state 25
    TIMES           shift and go to state 26

    specialvar                     shift and go to state 13
    dlist1                         shift and go to state 12

state 60

    (16) paramlist2 -> COMMA TYPE . NAME paramlist2
    (17) paramlist2 -> COMMA TYPE . specialvar paramlist2
    (66) specialvar -> . TIMES specialvar
    (67) specialvar -> . TIMES NAME

    NAME            shift and go to state 82
    TIMES           shift and go to state 26

    specialvar                     shift and go to state 83

state 61

    (10) function -> TYPE allthestars NAME LPAREN paramlist RPAREN LBRACE fbody . RBRACE

    RBRACE          shift and go to state 84


state 62

    (79) allnumbers -> FLOAT .

    PLUS            reduce using rule 79 (allnumbers -> FLOAT .)
    MINUS           reduce using rule 79 (allnumbers -> FLOAT .)
    DIVIDE          reduce using rule 79 (allnumbers -> FLOAT .)
    TIMES           reduce using rule 79 (allnumbers -> FLOAT .)
    LESSTHANEQ      reduce using rule 79 (allnumbers -> FLOAT .)
    GREATERTHANEQ   reduce using rule 79 (allnumbers -> FLOAT .)
    UNEQUAL         reduce using rule 79 (allnumbers -> FLOAT .)
    EQUALCHECK      reduce using rule 79 (allnumbers -> FLOAT .)
    LESSTHAN        reduce using rule 79 (allnumbers -> FLOAT .)
    GREATERTHAN     reduce using rule 79 (allnumbers -> FLOAT .)
    SEMICOLON       reduce using rule 79 (allnumbers -> FLOAT .)
    RPAREN          reduce using rule 79 (allnumbers -> FLOAT .)
    ANDOPERATOR     reduce using rule 79 (allnumbers -> FLOAT .)
    OROPERATOR      reduce using rule 79 (allnumbers -> FLOAT .)
    COMMA           reduce using rule 79 (allnumbers -> FLOAT .)


state 63

    (29) functioncall -> NAME . LPAREN arguments RPAREN SEMICOLON
    (84) pointervar -> NAME .

    LPAREN          shift and go to state 80
    PLUS            reduce using rule 84 (pointervar -> NAME .)
    MINUS           reduce using rule 84 (pointervar -> NAME .)
    DIVIDE          reduce using rule 84 (pointervar -> NAME .)
    TIMES           reduce using rule 84 (pointervar -> NAME .)
    SEMICOLON       reduce using rule 84 (pointervar -> NAME .)
    RPAREN          reduce using rule 84 (pointervar -> NAME .)
    LESSTHANEQ      reduce using rule 84 (pointervar -> NAME .)
    GREATERTHANEQ   reduce using rule 84 (pointervar -> NAME .)
    UNEQUAL         reduce using rule 84 (pointervar -> NAME .)
    EQUALCHECK      reduce using rule 84 (pointervar -> NAME .)
    LESSTHAN        reduce using rule 84 (pointervar -> NAME .)
    GREATERTHAN     reduce using rule 84 (pointervar -> NAME .)
    COMMA           reduce using rule 84 (pointervar -> NAME .)
    ANDOPERATOR     reduce using rule 84 (pointervar -> NAME .)
    OROPERATOR      reduce using rule 84 (pointervar -> NAME .)


state 64

    (83) pointervar -> ADDROF . pointervar
    (82) pointervar -> . TIMES pointervar
    (83) pointervar -> . ADDROF pointervar
    (84) pointervar -> . NAME

    TIMES           shift and go to state 68
    ADDROF          shift and go to state 64
    NAME            shift and go to state 75

    pointervar                     shift and go to state 85

state 65

    (78) expression -> allnumbers .

    PLUS            reduce using rule 78 (expression -> allnumbers .)
    MINUS           reduce using rule 78 (expression -> allnumbers .)
    DIVIDE          reduce using rule 78 (expression -> allnumbers .)
    TIMES           reduce using rule 78 (expression -> allnumbers .)
    SEMICOLON       reduce using rule 78 (expression -> allnumbers .)
    RPAREN          reduce using rule 78 (expression -> allnumbers .)
    LESSTHANEQ      reduce using rule 78 (expression -> allnumbers .)
    GREATERTHANEQ   reduce using rule 78 (expression -> allnumbers .)
    UNEQUAL         reduce using rule 78 (expression -> allnumbers .)
    EQUALCHECK      reduce using rule 78 (expression -> allnumbers .)
    LESSTHAN        reduce using rule 78 (expression -> allnumbers .)
    GREATERTHAN     reduce using rule 78 (expression -> allnumbers .)
    COMMA           reduce using rule 78 (expression -> allnumbers .)
    ANDOPERATOR     reduce using rule 78 (expression -> allnumbers .)
    OROPERATOR      reduce using rule 78 (expression -> allnumbers .)


state 66

    (81) expression -> pointervar .

    PLUS            reduce using rule 81 (expression -> pointervar .)
    MINUS           reduce using rule 81 (expression -> pointervar .)
    DIVIDE          reduce using rule 81 (expression -> pointervar .)
    TIMES           reduce using rule 81 (expression -> pointervar .)
    SEMICOLON       reduce using rule 81 (expression -> pointervar .)
    RPAREN          reduce using rule 81 (expression -> pointervar .)
    LESSTHANEQ      reduce using rule 81 (expression -> pointervar .)
    GREATERTHANEQ   reduce using rule 81 (expression -> pointervar .)
    UNEQUAL         reduce using rule 81 (expression -> pointervar .)
    EQUALCHECK      reduce using rule 81 (expression -> pointervar .)
    LESSTHAN        reduce using rule 81 (expression -> pointervar .)
    GREATERTHAN     reduce using rule 81 (expression -> pointervar .)
    COMMA           reduce using rule 81 (expression -> pointervar .)
    ANDOPERATOR     reduce using rule 81 (expression -> pointervar .)
    OROPERATOR      reduce using rule 81 (expression -> pointervar .)


state 67

    (80) allnumbers -> NUMBER .

    PLUS            reduce using rule 80 (allnumbers -> NUMBER .)
    MINUS           reduce using rule 80 (allnumbers -> NUMBER .)
    DIVIDE          reduce using rule 80 (allnumbers -> NUMBER .)
    TIMES           reduce using rule 80 (allnumbers -> NUMBER .)
    LESSTHANEQ      reduce using rule 80 (allnumbers -> NUMBER .)
    GREATERTHANEQ   reduce using rule 80 (allnumbers -> NUMBER .)
    UNEQUAL         reduce using rule 80 (allnumbers -> NUMBER .)
    EQUALCHECK      reduce using rule 80 (allnumbers -> NUMBER .)
    LESSTHAN        reduce using rule 80 (allnumbers -> NUMBER .)
    GREATERTHAN     reduce using rule 80 (allnumbers -> NUMBER .)
    SEMICOLON       reduce using rule 80 (allnumbers -> NUMBER .)
    RPAREN          reduce using rule 80 (allnumbers -> NUMBER .)
    ANDOPERATOR     reduce using rule 80 (allnumbers -> NUMBER .)
    OROPERATOR      reduce using rule 80 (allnumbers -> NUMBER .)
    COMMA           reduce using rule 80 (allnumbers -> NUMBER .)


state 68

    (82) pointervar -> TIMES . pointervar
    (82) pointervar -> . TIMES pointervar
    (83) pointervar -> . ADDROF pointervar
    (84) pointervar -> . NAME

    TIMES           shift and go to state 68
    ADDROF          shift and go to state 64
    NAME            shift and go to state 75

    pointervar                     shift and go to state 86

state 69

    (71) expression -> functioncall .

    PLUS            reduce using rule 71 (expression -> functioncall .)
    MINUS           reduce using rule 71 (expression -> functioncall .)
    DIVIDE          reduce using rule 71 (expression -> functioncall .)
    TIMES           reduce using rule 71 (expression -> functioncall .)
    SEMICOLON       reduce using rule 71 (expression -> functioncall .)
    RPAREN          reduce using rule 71 (expression -> functioncall .)
    LESSTHANEQ      reduce using rule 71 (expression -> functioncall .)
    GREATERTHANEQ   reduce using rule 71 (expression -> functioncall .)
    UNEQUAL         reduce using rule 71 (expression -> functioncall .)
    EQUALCHECK      reduce using rule 71 (expression -> functioncall .)
    LESSTHAN        reduce using rule 71 (expression -> functioncall .)
    GREATERTHAN     reduce using rule 71 (expression -> functioncall .)
    COMMA           reduce using rule 71 (expression -> functioncall .)
    ANDOPERATOR     reduce using rule 71 (expression -> functioncall .)
    OROPERATOR      reduce using rule 71 (expression -> functioncall .)


state 70

    (77) expression -> LPAREN . expression RPAREN
    (71) expression -> . functioncall
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . MINUS expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . allnumbers
    (81) expression -> . pointervar
    (29) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (79) allnumbers -> . FLOAT
    (80) allnumbers -> . NUMBER
    (82) pointervar -> . TIMES pointervar
    (83) pointervar -> . ADDROF pointervar
    (84) pointervar -> . NAME

    MINUS           shift and go to state 72
    LPAREN          shift and go to state 70
    NAME            shift and go to state 63
    FLOAT           shift and go to state 62
    NUMBER          shift and go to state 67
    TIMES           shift and go to state 68
    ADDROF          shift and go to state 64

    functioncall                   shift and go to state 69
    pointervar                     shift and go to state 66
    allnumbers                     shift and go to state 65
    expression                     shift and go to state 87

state 71

    (28) returnstatement -> RETURN expression . SEMICOLON
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . DIVIDE expression
    (75) expression -> expression . TIMES expression

    SEMICOLON       shift and go to state 89
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    DIVIDE          shift and go to state 88
    TIMES           shift and go to state 90


state 72

    (76) expression -> MINUS . expression
    (71) expression -> . functioncall
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . MINUS expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . allnumbers
    (81) expression -> . pointervar
    (29) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (79) allnumbers -> . FLOAT
    (80) allnumbers -> . NUMBER
    (82) pointervar -> . TIMES pointervar
    (83) pointervar -> . ADDROF pointervar
    (84) pointervar -> . NAME

    MINUS           shift and go to state 72
    LPAREN          shift and go to state 70
    NAME            shift and go to state 63
    FLOAT           shift and go to state 62
    NUMBER          shift and go to state 67
    TIMES           shift and go to state 68
    ADDROF          shift and go to state 64

    functioncall                   shift and go to state 69
    pointervar                     shift and go to state 66
    allnumbers                     shift and go to state 65
    expression                     shift and go to state 93

state 73

    (41) whileblock -> WHILE LPAREN . conditional RPAREN LBRACE fbody RBRACE
    (42) conditional -> . LPAREN conditional RPAREN
    (43) conditional -> . conditionbase
    (44) conditional -> . NOT LPAREN conditional RPAREN
    (45) conditional -> . conditional LESSTHANEQ conditional
    (46) conditional -> . conditional GREATERTHANEQ conditional
    (47) conditional -> . conditional UNEQUAL conditional
    (48) conditional -> . conditional EQUALCHECK conditional
    (49) conditional -> . conditional LESSTHAN conditional
    (50) conditional -> . conditional GREATERTHAN conditional
    (51) conditional -> . conditional ANDOPERATOR conditional
    (52) conditional -> . conditional OROPERATOR conditional
    (53) conditionbase -> . CS LESSTHANEQ CS
    (54) conditionbase -> . CS GREATERTHANEQ CS
    (55) conditionbase -> . CS UNEQUAL CS
    (56) conditionbase -> . CS EQUALCHECK CS
    (57) conditionbase -> . CS LESSTHAN CS
    (58) conditionbase -> . CS GREATERTHAN CS
    (59) CS -> . expression
    (60) CS -> . NOT LPAREN expression RPAREN
    (71) expression -> . functioncall
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . MINUS expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . allnumbers
    (81) expression -> . pointervar
    (29) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (79) allnumbers -> . FLOAT
    (80) allnumbers -> . NUMBER
    (82) pointervar -> . TIMES pointervar
    (83) pointervar -> . ADDROF pointervar
    (84) pointervar -> . NAME

    LPAREN          shift and go to state 96
    NOT             shift and go to state 98
    MINUS           shift and go to state 72
    NAME            shift and go to state 63
    FLOAT           shift and go to state 62
    NUMBER          shift and go to state 67
    TIMES           shift and go to state 68
    ADDROF          shift and go to state 64

    allnumbers                     shift and go to state 65
    pointervar                     shift and go to state 66
    conditionbase                  shift and go to state 94
    conditional                    shift and go to state 95
    functioncall                   shift and go to state 69
    CS                             shift and go to state 97
    expression                     shift and go to state 99

state 74

    (68) assignment -> assignment_base SEMICOLON .

    SEMICOLON       reduce using rule 68 (assignment -> assignment_base SEMICOLON .)
    IF              reduce using rule 68 (assignment -> assignment_base SEMICOLON .)
    TYPE            reduce using rule 68 (assignment -> assignment_base SEMICOLON .)
    WHILE           reduce using rule 68 (assignment -> assignment_base SEMICOLON .)
    RETURN          reduce using rule 68 (assignment -> assignment_base SEMICOLON .)
    NAME            reduce using rule 68 (assignment -> assignment_base SEMICOLON .)
    TIMES           reduce using rule 68 (assignment -> assignment_base SEMICOLON .)
    RBRACE          reduce using rule 68 (assignment -> assignment_base SEMICOLON .)
    ELSE            reduce using rule 68 (assignment -> assignment_base SEMICOLON .)


state 75

    (84) pointervar -> NAME .

    SEMICOLON       reduce using rule 84 (pointervar -> NAME .)
    PLUS            reduce using rule 84 (pointervar -> NAME .)
    MINUS           reduce using rule 84 (pointervar -> NAME .)
    DIVIDE          reduce using rule 84 (pointervar -> NAME .)
    TIMES           reduce using rule 84 (pointervar -> NAME .)
    EQUALS          reduce using rule 84 (pointervar -> NAME .)
    RPAREN          reduce using rule 84 (pointervar -> NAME .)
    LESSTHANEQ      reduce using rule 84 (pointervar -> NAME .)
    GREATERTHANEQ   reduce using rule 84 (pointervar -> NAME .)
    UNEQUAL         reduce using rule 84 (pointervar -> NAME .)
    EQUALCHECK      reduce using rule 84 (pointervar -> NAME .)
    LESSTHAN        reduce using rule 84 (pointervar -> NAME .)
    GREATERTHAN     reduce using rule 84 (pointervar -> NAME .)
    COMMA           reduce using rule 84 (pointervar -> NAME .)
    ANDOPERATOR     reduce using rule 84 (pointervar -> NAME .)
    OROPERATOR      reduce using rule 84 (pointervar -> NAME .)


state 76

    (69) assignment_base -> TIMES pointervar . EQUALS expression

    EQUALS          shift and go to state 100


state 77

    (11) function -> TYPE NAME LPAREN paramlist RPAREN LBRACE fbody RBRACE .

    TYPE            reduce using rule 11 (function -> TYPE NAME LPAREN paramlist RPAREN LBRACE fbody RBRACE .)
    $end            reduce using rule 11 (function -> TYPE NAME LPAREN paramlist RPAREN LBRACE fbody RBRACE .)


state 78

    (33) unmatchedstatement -> IF LPAREN . conditional RPAREN allstatement
    (34) unmatchedstatement -> IF LPAREN . conditional RPAREN statement ELSE unmatchedstatement
    (35) unmatchedstatement -> IF LPAREN . conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement
    (36) unmatchedstatement -> IF LPAREN . conditional RPAREN LBRACE fbody RBRACE
    (37) ifblock -> IF LPAREN . conditional RPAREN statement ELSE statement
    (38) ifblock -> IF LPAREN . conditional RPAREN statement ELSE LBRACE fbody RBRACE
    (39) ifblock -> IF LPAREN . conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE
    (40) ifblock -> IF LPAREN . conditional RPAREN LBRACE fbody RBRACE ELSE statement
    (42) conditional -> . LPAREN conditional RPAREN
    (43) conditional -> . conditionbase
    (44) conditional -> . NOT LPAREN conditional RPAREN
    (45) conditional -> . conditional LESSTHANEQ conditional
    (46) conditional -> . conditional GREATERTHANEQ conditional
    (47) conditional -> . conditional UNEQUAL conditional
    (48) conditional -> . conditional EQUALCHECK conditional
    (49) conditional -> . conditional LESSTHAN conditional
    (50) conditional -> . conditional GREATERTHAN conditional
    (51) conditional -> . conditional ANDOPERATOR conditional
    (52) conditional -> . conditional OROPERATOR conditional
    (53) conditionbase -> . CS LESSTHANEQ CS
    (54) conditionbase -> . CS GREATERTHANEQ CS
    (55) conditionbase -> . CS UNEQUAL CS
    (56) conditionbase -> . CS EQUALCHECK CS
    (57) conditionbase -> . CS LESSTHAN CS
    (58) conditionbase -> . CS GREATERTHAN CS
    (59) CS -> . expression
    (60) CS -> . NOT LPAREN expression RPAREN
    (71) expression -> . functioncall
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . MINUS expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . allnumbers
    (81) expression -> . pointervar
    (29) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (79) allnumbers -> . FLOAT
    (80) allnumbers -> . NUMBER
    (82) pointervar -> . TIMES pointervar
    (83) pointervar -> . ADDROF pointervar
    (84) pointervar -> . NAME

    LPAREN          shift and go to state 96
    NOT             shift and go to state 98
    MINUS           shift and go to state 72
    NAME            shift and go to state 63
    FLOAT           shift and go to state 62
    NUMBER          shift and go to state 67
    TIMES           shift and go to state 68
    ADDROF          shift and go to state 64

    allnumbers                     shift and go to state 65
    pointervar                     shift and go to state 66
    conditionbase                  shift and go to state 94
    conditional                    shift and go to state 101
    CS                             shift and go to state 97
    functioncall                   shift and go to state 69
    expression                     shift and go to state 99

state 79

    (70) assignment_base -> NAME EQUALS . expression
    (71) expression -> . functioncall
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . MINUS expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . allnumbers
    (81) expression -> . pointervar
    (29) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (79) allnumbers -> . FLOAT
    (80) allnumbers -> . NUMBER
    (82) pointervar -> . TIMES pointervar
    (83) pointervar -> . ADDROF pointervar
    (84) pointervar -> . NAME

    MINUS           shift and go to state 72
    LPAREN          shift and go to state 70
    NAME            shift and go to state 63
    FLOAT           shift and go to state 62
    NUMBER          shift and go to state 67
    TIMES           shift and go to state 68
    ADDROF          shift and go to state 64

    functioncall                   shift and go to state 69
    pointervar                     shift and go to state 66
    allnumbers                     shift and go to state 65
    expression                     shift and go to state 102

state 80

    (29) functioncall -> NAME LPAREN . arguments RPAREN SEMICOLON
    (30) arguments -> . expression
    (31) arguments -> . expression COMMA arguments
    (71) expression -> . functioncall
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . MINUS expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . allnumbers
    (81) expression -> . pointervar
    (29) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (79) allnumbers -> . FLOAT
    (80) allnumbers -> . NUMBER
    (82) pointervar -> . TIMES pointervar
    (83) pointervar -> . ADDROF pointervar
    (84) pointervar -> . NAME

    MINUS           shift and go to state 72
    LPAREN          shift and go to state 70
    NAME            shift and go to state 63
    FLOAT           shift and go to state 62
    NUMBER          shift and go to state 67
    TIMES           shift and go to state 68
    ADDROF          shift and go to state 64

    functioncall                   shift and go to state 69
    pointervar                     shift and go to state 66
    allnumbers                     shift and go to state 65
    expression                     shift and go to state 104
    arguments                      shift and go to state 103

state 81

    (18) fbody -> allstatement fbody .

    RBRACE          reduce using rule 18 (fbody -> allstatement fbody .)


state 82

    (16) paramlist2 -> COMMA TYPE NAME . paramlist2
    (15) paramlist2 -> .
    (16) paramlist2 -> . COMMA TYPE NAME paramlist2
    (17) paramlist2 -> . COMMA TYPE specialvar paramlist2

    RPAREN          reduce using rule 15 (paramlist2 -> .)
    COMMA           shift and go to state 37

    paramlist2                     shift and go to state 105

state 83

    (17) paramlist2 -> COMMA TYPE specialvar . paramlist2
    (15) paramlist2 -> .
    (16) paramlist2 -> . COMMA TYPE NAME paramlist2
    (17) paramlist2 -> . COMMA TYPE specialvar paramlist2

    RPAREN          reduce using rule 15 (paramlist2 -> .)
    COMMA           shift and go to state 37

    paramlist2                     shift and go to state 106

state 84

    (10) function -> TYPE allthestars NAME LPAREN paramlist RPAREN LBRACE fbody RBRACE .

    TYPE            reduce using rule 10 (function -> TYPE allthestars NAME LPAREN paramlist RPAREN LBRACE fbody RBRACE .)
    $end            reduce using rule 10 (function -> TYPE allthestars NAME LPAREN paramlist RPAREN LBRACE fbody RBRACE .)


state 85

    (83) pointervar -> ADDROF pointervar .

    PLUS            reduce using rule 83 (pointervar -> ADDROF pointervar .)
    MINUS           reduce using rule 83 (pointervar -> ADDROF pointervar .)
    DIVIDE          reduce using rule 83 (pointervar -> ADDROF pointervar .)
    TIMES           reduce using rule 83 (pointervar -> ADDROF pointervar .)
    SEMICOLON       reduce using rule 83 (pointervar -> ADDROF pointervar .)
    RPAREN          reduce using rule 83 (pointervar -> ADDROF pointervar .)
    LESSTHANEQ      reduce using rule 83 (pointervar -> ADDROF pointervar .)
    GREATERTHANEQ   reduce using rule 83 (pointervar -> ADDROF pointervar .)
    UNEQUAL         reduce using rule 83 (pointervar -> ADDROF pointervar .)
    EQUALCHECK      reduce using rule 83 (pointervar -> ADDROF pointervar .)
    LESSTHAN        reduce using rule 83 (pointervar -> ADDROF pointervar .)
    GREATERTHAN     reduce using rule 83 (pointervar -> ADDROF pointervar .)
    COMMA           reduce using rule 83 (pointervar -> ADDROF pointervar .)
    ANDOPERATOR     reduce using rule 83 (pointervar -> ADDROF pointervar .)
    OROPERATOR      reduce using rule 83 (pointervar -> ADDROF pointervar .)
    EQUALS          reduce using rule 83 (pointervar -> ADDROF pointervar .)


state 86

    (82) pointervar -> TIMES pointervar .

    PLUS            reduce using rule 82 (pointervar -> TIMES pointervar .)
    MINUS           reduce using rule 82 (pointervar -> TIMES pointervar .)
    DIVIDE          reduce using rule 82 (pointervar -> TIMES pointervar .)
    TIMES           reduce using rule 82 (pointervar -> TIMES pointervar .)
    SEMICOLON       reduce using rule 82 (pointervar -> TIMES pointervar .)
    RPAREN          reduce using rule 82 (pointervar -> TIMES pointervar .)
    LESSTHANEQ      reduce using rule 82 (pointervar -> TIMES pointervar .)
    GREATERTHANEQ   reduce using rule 82 (pointervar -> TIMES pointervar .)
    UNEQUAL         reduce using rule 82 (pointervar -> TIMES pointervar .)
    EQUALCHECK      reduce using rule 82 (pointervar -> TIMES pointervar .)
    LESSTHAN        reduce using rule 82 (pointervar -> TIMES pointervar .)
    GREATERTHAN     reduce using rule 82 (pointervar -> TIMES pointervar .)
    COMMA           reduce using rule 82 (pointervar -> TIMES pointervar .)
    ANDOPERATOR     reduce using rule 82 (pointervar -> TIMES pointervar .)
    OROPERATOR      reduce using rule 82 (pointervar -> TIMES pointervar .)
    EQUALS          reduce using rule 82 (pointervar -> TIMES pointervar .)


state 87

    (77) expression -> LPAREN expression . RPAREN
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . DIVIDE expression
    (75) expression -> expression . TIMES expression

    RPAREN          shift and go to state 107
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    DIVIDE          shift and go to state 88
    TIMES           shift and go to state 90


state 88

    (74) expression -> expression DIVIDE . expression
    (71) expression -> . functioncall
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . MINUS expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . allnumbers
    (81) expression -> . pointervar
    (29) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (79) allnumbers -> . FLOAT
    (80) allnumbers -> . NUMBER
    (82) pointervar -> . TIMES pointervar
    (83) pointervar -> . ADDROF pointervar
    (84) pointervar -> . NAME

    MINUS           shift and go to state 72
    LPAREN          shift and go to state 70
    NAME            shift and go to state 63
    FLOAT           shift and go to state 62
    NUMBER          shift and go to state 67
    TIMES           shift and go to state 68
    ADDROF          shift and go to state 64

    functioncall                   shift and go to state 69
    pointervar                     shift and go to state 66
    allnumbers                     shift and go to state 65
    expression                     shift and go to state 108

state 89

    (28) returnstatement -> RETURN expression SEMICOLON .

    SEMICOLON       reduce using rule 28 (returnstatement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 28 (returnstatement -> RETURN expression SEMICOLON .)
    TYPE            reduce using rule 28 (returnstatement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 28 (returnstatement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 28 (returnstatement -> RETURN expression SEMICOLON .)
    NAME            reduce using rule 28 (returnstatement -> RETURN expression SEMICOLON .)
    TIMES           reduce using rule 28 (returnstatement -> RETURN expression SEMICOLON .)
    RBRACE          reduce using rule 28 (returnstatement -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 28 (returnstatement -> RETURN expression SEMICOLON .)


state 90

    (75) expression -> expression TIMES . expression
    (71) expression -> . functioncall
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . MINUS expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . allnumbers
    (81) expression -> . pointervar
    (29) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (79) allnumbers -> . FLOAT
    (80) allnumbers -> . NUMBER
    (82) pointervar -> . TIMES pointervar
    (83) pointervar -> . ADDROF pointervar
    (84) pointervar -> . NAME

    MINUS           shift and go to state 72
    LPAREN          shift and go to state 70
    NAME            shift and go to state 63
    FLOAT           shift and go to state 62
    NUMBER          shift and go to state 67
    TIMES           shift and go to state 68
    ADDROF          shift and go to state 64

    functioncall                   shift and go to state 69
    pointervar                     shift and go to state 66
    allnumbers                     shift and go to state 65
    expression                     shift and go to state 109

state 91

    (72) expression -> expression PLUS . expression
    (71) expression -> . functioncall
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . MINUS expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . allnumbers
    (81) expression -> . pointervar
    (29) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (79) allnumbers -> . FLOAT
    (80) allnumbers -> . NUMBER
    (82) pointervar -> . TIMES pointervar
    (83) pointervar -> . ADDROF pointervar
    (84) pointervar -> . NAME

    MINUS           shift and go to state 72
    LPAREN          shift and go to state 70
    NAME            shift and go to state 63
    FLOAT           shift and go to state 62
    NUMBER          shift and go to state 67
    TIMES           shift and go to state 68
    ADDROF          shift and go to state 64

    functioncall                   shift and go to state 69
    pointervar                     shift and go to state 66
    allnumbers                     shift and go to state 65
    expression                     shift and go to state 110

state 92

    (73) expression -> expression MINUS . expression
    (71) expression -> . functioncall
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . MINUS expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . allnumbers
    (81) expression -> . pointervar
    (29) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (79) allnumbers -> . FLOAT
    (80) allnumbers -> . NUMBER
    (82) pointervar -> . TIMES pointervar
    (83) pointervar -> . ADDROF pointervar
    (84) pointervar -> . NAME

    MINUS           shift and go to state 72
    LPAREN          shift and go to state 70
    NAME            shift and go to state 63
    FLOAT           shift and go to state 62
    NUMBER          shift and go to state 67
    TIMES           shift and go to state 68
    ADDROF          shift and go to state 64

    functioncall                   shift and go to state 69
    pointervar                     shift and go to state 66
    allnumbers                     shift and go to state 65
    expression                     shift and go to state 111

state 93

    (76) expression -> MINUS expression .
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . DIVIDE expression
    (75) expression -> expression . TIMES expression

    PLUS            reduce using rule 76 (expression -> MINUS expression .)
    MINUS           reduce using rule 76 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 76 (expression -> MINUS expression .)
    TIMES           reduce using rule 76 (expression -> MINUS expression .)
    SEMICOLON       reduce using rule 76 (expression -> MINUS expression .)
    RPAREN          reduce using rule 76 (expression -> MINUS expression .)
    LESSTHANEQ      reduce using rule 76 (expression -> MINUS expression .)
    GREATERTHANEQ   reduce using rule 76 (expression -> MINUS expression .)
    UNEQUAL         reduce using rule 76 (expression -> MINUS expression .)
    EQUALCHECK      reduce using rule 76 (expression -> MINUS expression .)
    LESSTHAN        reduce using rule 76 (expression -> MINUS expression .)
    GREATERTHAN     reduce using rule 76 (expression -> MINUS expression .)
    COMMA           reduce using rule 76 (expression -> MINUS expression .)
    ANDOPERATOR     reduce using rule 76 (expression -> MINUS expression .)
    OROPERATOR      reduce using rule 76 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 91 ]
  ! MINUS           [ shift and go to state 92 ]
  ! DIVIDE          [ shift and go to state 88 ]
  ! TIMES           [ shift and go to state 90 ]


state 94

    (43) conditional -> conditionbase .

    RPAREN          reduce using rule 43 (conditional -> conditionbase .)
    LESSTHANEQ      reduce using rule 43 (conditional -> conditionbase .)
    GREATERTHANEQ   reduce using rule 43 (conditional -> conditionbase .)
    UNEQUAL         reduce using rule 43 (conditional -> conditionbase .)
    EQUALCHECK      reduce using rule 43 (conditional -> conditionbase .)
    LESSTHAN        reduce using rule 43 (conditional -> conditionbase .)
    GREATERTHAN     reduce using rule 43 (conditional -> conditionbase .)
    ANDOPERATOR     reduce using rule 43 (conditional -> conditionbase .)
    OROPERATOR      reduce using rule 43 (conditional -> conditionbase .)


state 95

    (41) whileblock -> WHILE LPAREN conditional . RPAREN LBRACE fbody RBRACE
    (45) conditional -> conditional . LESSTHANEQ conditional
    (46) conditional -> conditional . GREATERTHANEQ conditional
    (47) conditional -> conditional . UNEQUAL conditional
    (48) conditional -> conditional . EQUALCHECK conditional
    (49) conditional -> conditional . LESSTHAN conditional
    (50) conditional -> conditional . GREATERTHAN conditional
    (51) conditional -> conditional . ANDOPERATOR conditional
    (52) conditional -> conditional . OROPERATOR conditional

    RPAREN          shift and go to state 112
    LESSTHANEQ      shift and go to state 119
    GREATERTHANEQ   shift and go to state 117
    UNEQUAL         shift and go to state 118
    EQUALCHECK      shift and go to state 120
    LESSTHAN        shift and go to state 114
    GREATERTHAN     shift and go to state 113
    ANDOPERATOR     shift and go to state 116
    OROPERATOR      shift and go to state 115


state 96

    (42) conditional -> LPAREN . conditional RPAREN
    (77) expression -> LPAREN . expression RPAREN
    (42) conditional -> . LPAREN conditional RPAREN
    (43) conditional -> . conditionbase
    (44) conditional -> . NOT LPAREN conditional RPAREN
    (45) conditional -> . conditional LESSTHANEQ conditional
    (46) conditional -> . conditional GREATERTHANEQ conditional
    (47) conditional -> . conditional UNEQUAL conditional
    (48) conditional -> . conditional EQUALCHECK conditional
    (49) conditional -> . conditional LESSTHAN conditional
    (50) conditional -> . conditional GREATERTHAN conditional
    (51) conditional -> . conditional ANDOPERATOR conditional
    (52) conditional -> . conditional OROPERATOR conditional
    (71) expression -> . functioncall
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . MINUS expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . allnumbers
    (81) expression -> . pointervar
    (53) conditionbase -> . CS LESSTHANEQ CS
    (54) conditionbase -> . CS GREATERTHANEQ CS
    (55) conditionbase -> . CS UNEQUAL CS
    (56) conditionbase -> . CS EQUALCHECK CS
    (57) conditionbase -> . CS LESSTHAN CS
    (58) conditionbase -> . CS GREATERTHAN CS
    (29) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (79) allnumbers -> . FLOAT
    (80) allnumbers -> . NUMBER
    (82) pointervar -> . TIMES pointervar
    (83) pointervar -> . ADDROF pointervar
    (84) pointervar -> . NAME
    (59) CS -> . expression
    (60) CS -> . NOT LPAREN expression RPAREN

    LPAREN          shift and go to state 96
    NOT             shift and go to state 98
    MINUS           shift and go to state 72
    NAME            shift and go to state 63
    FLOAT           shift and go to state 62
    NUMBER          shift and go to state 67
    TIMES           shift and go to state 68
    ADDROF          shift and go to state 64

    allnumbers                     shift and go to state 65
    pointervar                     shift and go to state 66
    conditionbase                  shift and go to state 94
    conditional                    shift and go to state 121
    functioncall                   shift and go to state 69
    CS                             shift and go to state 97
    expression                     shift and go to state 122

state 97

    (53) conditionbase -> CS . LESSTHANEQ CS
    (54) conditionbase -> CS . GREATERTHANEQ CS
    (55) conditionbase -> CS . UNEQUAL CS
    (56) conditionbase -> CS . EQUALCHECK CS
    (57) conditionbase -> CS . LESSTHAN CS
    (58) conditionbase -> CS . GREATERTHAN CS

    LESSTHANEQ      shift and go to state 127
    GREATERTHANEQ   shift and go to state 125
    UNEQUAL         shift and go to state 123
    EQUALCHECK      shift and go to state 128
    LESSTHAN        shift and go to state 124
    GREATERTHAN     shift and go to state 126


state 98

    (44) conditional -> NOT . LPAREN conditional RPAREN
    (60) CS -> NOT . LPAREN expression RPAREN

    LPAREN          shift and go to state 129


state 99

    (59) CS -> expression .
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . DIVIDE expression
    (75) expression -> expression . TIMES expression

    LESSTHANEQ      reduce using rule 59 (CS -> expression .)
    GREATERTHANEQ   reduce using rule 59 (CS -> expression .)
    UNEQUAL         reduce using rule 59 (CS -> expression .)
    EQUALCHECK      reduce using rule 59 (CS -> expression .)
    LESSTHAN        reduce using rule 59 (CS -> expression .)
    GREATERTHAN     reduce using rule 59 (CS -> expression .)
    RPAREN          reduce using rule 59 (CS -> expression .)
    ANDOPERATOR     reduce using rule 59 (CS -> expression .)
    OROPERATOR      reduce using rule 59 (CS -> expression .)
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    DIVIDE          shift and go to state 88
    TIMES           shift and go to state 90


state 100

    (69) assignment_base -> TIMES pointervar EQUALS . expression
    (71) expression -> . functioncall
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . MINUS expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . allnumbers
    (81) expression -> . pointervar
    (29) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (79) allnumbers -> . FLOAT
    (80) allnumbers -> . NUMBER
    (82) pointervar -> . TIMES pointervar
    (83) pointervar -> . ADDROF pointervar
    (84) pointervar -> . NAME

    MINUS           shift and go to state 72
    LPAREN          shift and go to state 70
    NAME            shift and go to state 63
    FLOAT           shift and go to state 62
    NUMBER          shift and go to state 67
    TIMES           shift and go to state 68
    ADDROF          shift and go to state 64

    expression                     shift and go to state 130
    allnumbers                     shift and go to state 65
    pointervar                     shift and go to state 66
    functioncall                   shift and go to state 69

state 101

    (33) unmatchedstatement -> IF LPAREN conditional . RPAREN allstatement
    (34) unmatchedstatement -> IF LPAREN conditional . RPAREN statement ELSE unmatchedstatement
    (35) unmatchedstatement -> IF LPAREN conditional . RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement
    (36) unmatchedstatement -> IF LPAREN conditional . RPAREN LBRACE fbody RBRACE
    (37) ifblock -> IF LPAREN conditional . RPAREN statement ELSE statement
    (38) ifblock -> IF LPAREN conditional . RPAREN statement ELSE LBRACE fbody RBRACE
    (39) ifblock -> IF LPAREN conditional . RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE
    (40) ifblock -> IF LPAREN conditional . RPAREN LBRACE fbody RBRACE ELSE statement
    (45) conditional -> conditional . LESSTHANEQ conditional
    (46) conditional -> conditional . GREATERTHANEQ conditional
    (47) conditional -> conditional . UNEQUAL conditional
    (48) conditional -> conditional . EQUALCHECK conditional
    (49) conditional -> conditional . LESSTHAN conditional
    (50) conditional -> conditional . GREATERTHAN conditional
    (51) conditional -> conditional . ANDOPERATOR conditional
    (52) conditional -> conditional . OROPERATOR conditional

    RPAREN          shift and go to state 131
    LESSTHANEQ      shift and go to state 119
    GREATERTHANEQ   shift and go to state 117
    UNEQUAL         shift and go to state 118
    EQUALCHECK      shift and go to state 120
    LESSTHAN        shift and go to state 114
    GREATERTHAN     shift and go to state 113
    ANDOPERATOR     shift and go to state 116
    OROPERATOR      shift and go to state 115


state 102

    (70) assignment_base -> NAME EQUALS expression .
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . DIVIDE expression
    (75) expression -> expression . TIMES expression

    SEMICOLON       reduce using rule 70 (assignment_base -> NAME EQUALS expression .)
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    DIVIDE          shift and go to state 88
    TIMES           shift and go to state 90


state 103

    (29) functioncall -> NAME LPAREN arguments . RPAREN SEMICOLON

    RPAREN          shift and go to state 132


state 104

    (30) arguments -> expression .
    (31) arguments -> expression . COMMA arguments
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . DIVIDE expression
    (75) expression -> expression . TIMES expression

    RPAREN          reduce using rule 30 (arguments -> expression .)
    COMMA           shift and go to state 133
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    DIVIDE          shift and go to state 88
    TIMES           shift and go to state 90


state 105

    (16) paramlist2 -> COMMA TYPE NAME paramlist2 .

    RPAREN          reduce using rule 16 (paramlist2 -> COMMA TYPE NAME paramlist2 .)


state 106

    (17) paramlist2 -> COMMA TYPE specialvar paramlist2 .

    RPAREN          reduce using rule 17 (paramlist2 -> COMMA TYPE specialvar paramlist2 .)


state 107

    (77) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    LESSTHANEQ      reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    GREATERTHANEQ   reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    UNEQUAL         reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    EQUALCHECK      reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    LESSTHAN        reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    GREATERTHAN     reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    ANDOPERATOR     reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    OROPERATOR      reduce using rule 77 (expression -> LPAREN expression RPAREN .)


state 108

    (74) expression -> expression DIVIDE expression .
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . DIVIDE expression
    (75) expression -> expression . TIMES expression

    PLUS            reduce using rule 74 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 74 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 74 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 74 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 74 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 74 (expression -> expression DIVIDE expression .)
    LESSTHANEQ      reduce using rule 74 (expression -> expression DIVIDE expression .)
    GREATERTHANEQ   reduce using rule 74 (expression -> expression DIVIDE expression .)
    UNEQUAL         reduce using rule 74 (expression -> expression DIVIDE expression .)
    EQUALCHECK      reduce using rule 74 (expression -> expression DIVIDE expression .)
    LESSTHAN        reduce using rule 74 (expression -> expression DIVIDE expression .)
    GREATERTHAN     reduce using rule 74 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 74 (expression -> expression DIVIDE expression .)
    ANDOPERATOR     reduce using rule 74 (expression -> expression DIVIDE expression .)
    OROPERATOR      reduce using rule 74 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 91 ]
  ! MINUS           [ shift and go to state 92 ]
  ! DIVIDE          [ shift and go to state 88 ]
  ! TIMES           [ shift and go to state 90 ]


state 109

    (75) expression -> expression TIMES expression .
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . DIVIDE expression
    (75) expression -> expression . TIMES expression

    PLUS            reduce using rule 75 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 75 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 75 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 75 (expression -> expression TIMES expression .)
    SEMICOLON       reduce using rule 75 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 75 (expression -> expression TIMES expression .)
    LESSTHANEQ      reduce using rule 75 (expression -> expression TIMES expression .)
    GREATERTHANEQ   reduce using rule 75 (expression -> expression TIMES expression .)
    UNEQUAL         reduce using rule 75 (expression -> expression TIMES expression .)
    EQUALCHECK      reduce using rule 75 (expression -> expression TIMES expression .)
    LESSTHAN        reduce using rule 75 (expression -> expression TIMES expression .)
    GREATERTHAN     reduce using rule 75 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 75 (expression -> expression TIMES expression .)
    ANDOPERATOR     reduce using rule 75 (expression -> expression TIMES expression .)
    OROPERATOR      reduce using rule 75 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 91 ]
  ! MINUS           [ shift and go to state 92 ]
  ! DIVIDE          [ shift and go to state 88 ]
  ! TIMES           [ shift and go to state 90 ]


state 110

    (72) expression -> expression PLUS expression .
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . DIVIDE expression
    (75) expression -> expression . TIMES expression

    PLUS            reduce using rule 72 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 72 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 72 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 72 (expression -> expression PLUS expression .)
    LESSTHANEQ      reduce using rule 72 (expression -> expression PLUS expression .)
    GREATERTHANEQ   reduce using rule 72 (expression -> expression PLUS expression .)
    UNEQUAL         reduce using rule 72 (expression -> expression PLUS expression .)
    EQUALCHECK      reduce using rule 72 (expression -> expression PLUS expression .)
    LESSTHAN        reduce using rule 72 (expression -> expression PLUS expression .)
    GREATERTHAN     reduce using rule 72 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 72 (expression -> expression PLUS expression .)
    ANDOPERATOR     reduce using rule 72 (expression -> expression PLUS expression .)
    OROPERATOR      reduce using rule 72 (expression -> expression PLUS expression .)
    DIVIDE          shift and go to state 88
    TIMES           shift and go to state 90

  ! DIVIDE          [ reduce using rule 72 (expression -> expression PLUS expression .) ]
  ! TIMES           [ reduce using rule 72 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 91 ]
  ! MINUS           [ shift and go to state 92 ]


state 111

    (73) expression -> expression MINUS expression .
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . DIVIDE expression
    (75) expression -> expression . TIMES expression

    PLUS            reduce using rule 73 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 73 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 73 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 73 (expression -> expression MINUS expression .)
    LESSTHANEQ      reduce using rule 73 (expression -> expression MINUS expression .)
    GREATERTHANEQ   reduce using rule 73 (expression -> expression MINUS expression .)
    UNEQUAL         reduce using rule 73 (expression -> expression MINUS expression .)
    EQUALCHECK      reduce using rule 73 (expression -> expression MINUS expression .)
    LESSTHAN        reduce using rule 73 (expression -> expression MINUS expression .)
    GREATERTHAN     reduce using rule 73 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 73 (expression -> expression MINUS expression .)
    ANDOPERATOR     reduce using rule 73 (expression -> expression MINUS expression .)
    OROPERATOR      reduce using rule 73 (expression -> expression MINUS expression .)
    DIVIDE          shift and go to state 88
    TIMES           shift and go to state 90

  ! DIVIDE          [ reduce using rule 73 (expression -> expression MINUS expression .) ]
  ! TIMES           [ reduce using rule 73 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 91 ]
  ! MINUS           [ shift and go to state 92 ]


state 112

    (41) whileblock -> WHILE LPAREN conditional RPAREN . LBRACE fbody RBRACE

    LBRACE          shift and go to state 134


state 113

    (50) conditional -> conditional GREATERTHAN . conditional
    (42) conditional -> . LPAREN conditional RPAREN
    (43) conditional -> . conditionbase
    (44) conditional -> . NOT LPAREN conditional RPAREN
    (45) conditional -> . conditional LESSTHANEQ conditional
    (46) conditional -> . conditional GREATERTHANEQ conditional
    (47) conditional -> . conditional UNEQUAL conditional
    (48) conditional -> . conditional EQUALCHECK conditional
    (49) conditional -> . conditional LESSTHAN conditional
    (50) conditional -> . conditional GREATERTHAN conditional
    (51) conditional -> . conditional ANDOPERATOR conditional
    (52) conditional -> . conditional OROPERATOR conditional
    (53) conditionbase -> . CS LESSTHANEQ CS
    (54) conditionbase -> . CS GREATERTHANEQ CS
    (55) conditionbase -> . CS UNEQUAL CS
    (56) conditionbase -> . CS EQUALCHECK CS
    (57) conditionbase -> . CS LESSTHAN CS
    (58) conditionbase -> . CS GREATERTHAN CS
    (59) CS -> . expression
    (60) CS -> . NOT LPAREN expression RPAREN
    (71) expression -> . functioncall
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . MINUS expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . allnumbers
    (81) expression -> . pointervar
    (29) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (79) allnumbers -> . FLOAT
    (80) allnumbers -> . NUMBER
    (82) pointervar -> . TIMES pointervar
    (83) pointervar -> . ADDROF pointervar
    (84) pointervar -> . NAME

    LPAREN          shift and go to state 96
    NOT             shift and go to state 98
    MINUS           shift and go to state 72
    NAME            shift and go to state 63
    FLOAT           shift and go to state 62
    NUMBER          shift and go to state 67
    TIMES           shift and go to state 68
    ADDROF          shift and go to state 64

    allnumbers                     shift and go to state 65
    pointervar                     shift and go to state 66
    conditionbase                  shift and go to state 94
    conditional                    shift and go to state 135
    functioncall                   shift and go to state 69
    CS                             shift and go to state 97
    expression                     shift and go to state 99

state 114

    (49) conditional -> conditional LESSTHAN . conditional
    (42) conditional -> . LPAREN conditional RPAREN
    (43) conditional -> . conditionbase
    (44) conditional -> . NOT LPAREN conditional RPAREN
    (45) conditional -> . conditional LESSTHANEQ conditional
    (46) conditional -> . conditional GREATERTHANEQ conditional
    (47) conditional -> . conditional UNEQUAL conditional
    (48) conditional -> . conditional EQUALCHECK conditional
    (49) conditional -> . conditional LESSTHAN conditional
    (50) conditional -> . conditional GREATERTHAN conditional
    (51) conditional -> . conditional ANDOPERATOR conditional
    (52) conditional -> . conditional OROPERATOR conditional
    (53) conditionbase -> . CS LESSTHANEQ CS
    (54) conditionbase -> . CS GREATERTHANEQ CS
    (55) conditionbase -> . CS UNEQUAL CS
    (56) conditionbase -> . CS EQUALCHECK CS
    (57) conditionbase -> . CS LESSTHAN CS
    (58) conditionbase -> . CS GREATERTHAN CS
    (59) CS -> . expression
    (60) CS -> . NOT LPAREN expression RPAREN
    (71) expression -> . functioncall
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . MINUS expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . allnumbers
    (81) expression -> . pointervar
    (29) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (79) allnumbers -> . FLOAT
    (80) allnumbers -> . NUMBER
    (82) pointervar -> . TIMES pointervar
    (83) pointervar -> . ADDROF pointervar
    (84) pointervar -> . NAME

    LPAREN          shift and go to state 96
    NOT             shift and go to state 98
    MINUS           shift and go to state 72
    NAME            shift and go to state 63
    FLOAT           shift and go to state 62
    NUMBER          shift and go to state 67
    TIMES           shift and go to state 68
    ADDROF          shift and go to state 64

    allnumbers                     shift and go to state 65
    pointervar                     shift and go to state 66
    conditionbase                  shift and go to state 94
    conditional                    shift and go to state 136
    functioncall                   shift and go to state 69
    CS                             shift and go to state 97
    expression                     shift and go to state 99

state 115

    (52) conditional -> conditional OROPERATOR . conditional
    (42) conditional -> . LPAREN conditional RPAREN
    (43) conditional -> . conditionbase
    (44) conditional -> . NOT LPAREN conditional RPAREN
    (45) conditional -> . conditional LESSTHANEQ conditional
    (46) conditional -> . conditional GREATERTHANEQ conditional
    (47) conditional -> . conditional UNEQUAL conditional
    (48) conditional -> . conditional EQUALCHECK conditional
    (49) conditional -> . conditional LESSTHAN conditional
    (50) conditional -> . conditional GREATERTHAN conditional
    (51) conditional -> . conditional ANDOPERATOR conditional
    (52) conditional -> . conditional OROPERATOR conditional
    (53) conditionbase -> . CS LESSTHANEQ CS
    (54) conditionbase -> . CS GREATERTHANEQ CS
    (55) conditionbase -> . CS UNEQUAL CS
    (56) conditionbase -> . CS EQUALCHECK CS
    (57) conditionbase -> . CS LESSTHAN CS
    (58) conditionbase -> . CS GREATERTHAN CS
    (59) CS -> . expression
    (60) CS -> . NOT LPAREN expression RPAREN
    (71) expression -> . functioncall
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . MINUS expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . allnumbers
    (81) expression -> . pointervar
    (29) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (79) allnumbers -> . FLOAT
    (80) allnumbers -> . NUMBER
    (82) pointervar -> . TIMES pointervar
    (83) pointervar -> . ADDROF pointervar
    (84) pointervar -> . NAME

    LPAREN          shift and go to state 96
    NOT             shift and go to state 98
    MINUS           shift and go to state 72
    NAME            shift and go to state 63
    FLOAT           shift and go to state 62
    NUMBER          shift and go to state 67
    TIMES           shift and go to state 68
    ADDROF          shift and go to state 64

    allnumbers                     shift and go to state 65
    pointervar                     shift and go to state 66
    conditionbase                  shift and go to state 94
    conditional                    shift and go to state 137
    functioncall                   shift and go to state 69
    CS                             shift and go to state 97
    expression                     shift and go to state 99

state 116

    (51) conditional -> conditional ANDOPERATOR . conditional
    (42) conditional -> . LPAREN conditional RPAREN
    (43) conditional -> . conditionbase
    (44) conditional -> . NOT LPAREN conditional RPAREN
    (45) conditional -> . conditional LESSTHANEQ conditional
    (46) conditional -> . conditional GREATERTHANEQ conditional
    (47) conditional -> . conditional UNEQUAL conditional
    (48) conditional -> . conditional EQUALCHECK conditional
    (49) conditional -> . conditional LESSTHAN conditional
    (50) conditional -> . conditional GREATERTHAN conditional
    (51) conditional -> . conditional ANDOPERATOR conditional
    (52) conditional -> . conditional OROPERATOR conditional
    (53) conditionbase -> . CS LESSTHANEQ CS
    (54) conditionbase -> . CS GREATERTHANEQ CS
    (55) conditionbase -> . CS UNEQUAL CS
    (56) conditionbase -> . CS EQUALCHECK CS
    (57) conditionbase -> . CS LESSTHAN CS
    (58) conditionbase -> . CS GREATERTHAN CS
    (59) CS -> . expression
    (60) CS -> . NOT LPAREN expression RPAREN
    (71) expression -> . functioncall
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . MINUS expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . allnumbers
    (81) expression -> . pointervar
    (29) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (79) allnumbers -> . FLOAT
    (80) allnumbers -> . NUMBER
    (82) pointervar -> . TIMES pointervar
    (83) pointervar -> . ADDROF pointervar
    (84) pointervar -> . NAME

    LPAREN          shift and go to state 96
    NOT             shift and go to state 98
    MINUS           shift and go to state 72
    NAME            shift and go to state 63
    FLOAT           shift and go to state 62
    NUMBER          shift and go to state 67
    TIMES           shift and go to state 68
    ADDROF          shift and go to state 64

    allnumbers                     shift and go to state 65
    pointervar                     shift and go to state 66
    conditionbase                  shift and go to state 94
    conditional                    shift and go to state 138
    functioncall                   shift and go to state 69
    CS                             shift and go to state 97
    expression                     shift and go to state 99

state 117

    (46) conditional -> conditional GREATERTHANEQ . conditional
    (42) conditional -> . LPAREN conditional RPAREN
    (43) conditional -> . conditionbase
    (44) conditional -> . NOT LPAREN conditional RPAREN
    (45) conditional -> . conditional LESSTHANEQ conditional
    (46) conditional -> . conditional GREATERTHANEQ conditional
    (47) conditional -> . conditional UNEQUAL conditional
    (48) conditional -> . conditional EQUALCHECK conditional
    (49) conditional -> . conditional LESSTHAN conditional
    (50) conditional -> . conditional GREATERTHAN conditional
    (51) conditional -> . conditional ANDOPERATOR conditional
    (52) conditional -> . conditional OROPERATOR conditional
    (53) conditionbase -> . CS LESSTHANEQ CS
    (54) conditionbase -> . CS GREATERTHANEQ CS
    (55) conditionbase -> . CS UNEQUAL CS
    (56) conditionbase -> . CS EQUALCHECK CS
    (57) conditionbase -> . CS LESSTHAN CS
    (58) conditionbase -> . CS GREATERTHAN CS
    (59) CS -> . expression
    (60) CS -> . NOT LPAREN expression RPAREN
    (71) expression -> . functioncall
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . MINUS expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . allnumbers
    (81) expression -> . pointervar
    (29) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (79) allnumbers -> . FLOAT
    (80) allnumbers -> . NUMBER
    (82) pointervar -> . TIMES pointervar
    (83) pointervar -> . ADDROF pointervar
    (84) pointervar -> . NAME

    LPAREN          shift and go to state 96
    NOT             shift and go to state 98
    MINUS           shift and go to state 72
    NAME            shift and go to state 63
    FLOAT           shift and go to state 62
    NUMBER          shift and go to state 67
    TIMES           shift and go to state 68
    ADDROF          shift and go to state 64

    allnumbers                     shift and go to state 65
    pointervar                     shift and go to state 66
    conditionbase                  shift and go to state 94
    conditional                    shift and go to state 139
    functioncall                   shift and go to state 69
    CS                             shift and go to state 97
    expression                     shift and go to state 99

state 118

    (47) conditional -> conditional UNEQUAL . conditional
    (42) conditional -> . LPAREN conditional RPAREN
    (43) conditional -> . conditionbase
    (44) conditional -> . NOT LPAREN conditional RPAREN
    (45) conditional -> . conditional LESSTHANEQ conditional
    (46) conditional -> . conditional GREATERTHANEQ conditional
    (47) conditional -> . conditional UNEQUAL conditional
    (48) conditional -> . conditional EQUALCHECK conditional
    (49) conditional -> . conditional LESSTHAN conditional
    (50) conditional -> . conditional GREATERTHAN conditional
    (51) conditional -> . conditional ANDOPERATOR conditional
    (52) conditional -> . conditional OROPERATOR conditional
    (53) conditionbase -> . CS LESSTHANEQ CS
    (54) conditionbase -> . CS GREATERTHANEQ CS
    (55) conditionbase -> . CS UNEQUAL CS
    (56) conditionbase -> . CS EQUALCHECK CS
    (57) conditionbase -> . CS LESSTHAN CS
    (58) conditionbase -> . CS GREATERTHAN CS
    (59) CS -> . expression
    (60) CS -> . NOT LPAREN expression RPAREN
    (71) expression -> . functioncall
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . MINUS expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . allnumbers
    (81) expression -> . pointervar
    (29) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (79) allnumbers -> . FLOAT
    (80) allnumbers -> . NUMBER
    (82) pointervar -> . TIMES pointervar
    (83) pointervar -> . ADDROF pointervar
    (84) pointervar -> . NAME

    LPAREN          shift and go to state 96
    NOT             shift and go to state 98
    MINUS           shift and go to state 72
    NAME            shift and go to state 63
    FLOAT           shift and go to state 62
    NUMBER          shift and go to state 67
    TIMES           shift and go to state 68
    ADDROF          shift and go to state 64

    allnumbers                     shift and go to state 65
    pointervar                     shift and go to state 66
    conditionbase                  shift and go to state 94
    conditional                    shift and go to state 140
    functioncall                   shift and go to state 69
    CS                             shift and go to state 97
    expression                     shift and go to state 99

state 119

    (45) conditional -> conditional LESSTHANEQ . conditional
    (42) conditional -> . LPAREN conditional RPAREN
    (43) conditional -> . conditionbase
    (44) conditional -> . NOT LPAREN conditional RPAREN
    (45) conditional -> . conditional LESSTHANEQ conditional
    (46) conditional -> . conditional GREATERTHANEQ conditional
    (47) conditional -> . conditional UNEQUAL conditional
    (48) conditional -> . conditional EQUALCHECK conditional
    (49) conditional -> . conditional LESSTHAN conditional
    (50) conditional -> . conditional GREATERTHAN conditional
    (51) conditional -> . conditional ANDOPERATOR conditional
    (52) conditional -> . conditional OROPERATOR conditional
    (53) conditionbase -> . CS LESSTHANEQ CS
    (54) conditionbase -> . CS GREATERTHANEQ CS
    (55) conditionbase -> . CS UNEQUAL CS
    (56) conditionbase -> . CS EQUALCHECK CS
    (57) conditionbase -> . CS LESSTHAN CS
    (58) conditionbase -> . CS GREATERTHAN CS
    (59) CS -> . expression
    (60) CS -> . NOT LPAREN expression RPAREN
    (71) expression -> . functioncall
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . MINUS expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . allnumbers
    (81) expression -> . pointervar
    (29) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (79) allnumbers -> . FLOAT
    (80) allnumbers -> . NUMBER
    (82) pointervar -> . TIMES pointervar
    (83) pointervar -> . ADDROF pointervar
    (84) pointervar -> . NAME

    LPAREN          shift and go to state 96
    NOT             shift and go to state 98
    MINUS           shift and go to state 72
    NAME            shift and go to state 63
    FLOAT           shift and go to state 62
    NUMBER          shift and go to state 67
    TIMES           shift and go to state 68
    ADDROF          shift and go to state 64

    allnumbers                     shift and go to state 65
    pointervar                     shift and go to state 66
    conditionbase                  shift and go to state 94
    conditional                    shift and go to state 141
    functioncall                   shift and go to state 69
    CS                             shift and go to state 97
    expression                     shift and go to state 99

state 120

    (48) conditional -> conditional EQUALCHECK . conditional
    (42) conditional -> . LPAREN conditional RPAREN
    (43) conditional -> . conditionbase
    (44) conditional -> . NOT LPAREN conditional RPAREN
    (45) conditional -> . conditional LESSTHANEQ conditional
    (46) conditional -> . conditional GREATERTHANEQ conditional
    (47) conditional -> . conditional UNEQUAL conditional
    (48) conditional -> . conditional EQUALCHECK conditional
    (49) conditional -> . conditional LESSTHAN conditional
    (50) conditional -> . conditional GREATERTHAN conditional
    (51) conditional -> . conditional ANDOPERATOR conditional
    (52) conditional -> . conditional OROPERATOR conditional
    (53) conditionbase -> . CS LESSTHANEQ CS
    (54) conditionbase -> . CS GREATERTHANEQ CS
    (55) conditionbase -> . CS UNEQUAL CS
    (56) conditionbase -> . CS EQUALCHECK CS
    (57) conditionbase -> . CS LESSTHAN CS
    (58) conditionbase -> . CS GREATERTHAN CS
    (59) CS -> . expression
    (60) CS -> . NOT LPAREN expression RPAREN
    (71) expression -> . functioncall
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . MINUS expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . allnumbers
    (81) expression -> . pointervar
    (29) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (79) allnumbers -> . FLOAT
    (80) allnumbers -> . NUMBER
    (82) pointervar -> . TIMES pointervar
    (83) pointervar -> . ADDROF pointervar
    (84) pointervar -> . NAME

    LPAREN          shift and go to state 96
    NOT             shift and go to state 98
    MINUS           shift and go to state 72
    NAME            shift and go to state 63
    FLOAT           shift and go to state 62
    NUMBER          shift and go to state 67
    TIMES           shift and go to state 68
    ADDROF          shift and go to state 64

    allnumbers                     shift and go to state 65
    pointervar                     shift and go to state 66
    conditionbase                  shift and go to state 94
    conditional                    shift and go to state 142
    functioncall                   shift and go to state 69
    CS                             shift and go to state 97
    expression                     shift and go to state 99

state 121

    (42) conditional -> LPAREN conditional . RPAREN
    (45) conditional -> conditional . LESSTHANEQ conditional
    (46) conditional -> conditional . GREATERTHANEQ conditional
    (47) conditional -> conditional . UNEQUAL conditional
    (48) conditional -> conditional . EQUALCHECK conditional
    (49) conditional -> conditional . LESSTHAN conditional
    (50) conditional -> conditional . GREATERTHAN conditional
    (51) conditional -> conditional . ANDOPERATOR conditional
    (52) conditional -> conditional . OROPERATOR conditional

    RPAREN          shift and go to state 143
    LESSTHANEQ      shift and go to state 119
    GREATERTHANEQ   shift and go to state 117
    UNEQUAL         shift and go to state 118
    EQUALCHECK      shift and go to state 120
    LESSTHAN        shift and go to state 114
    GREATERTHAN     shift and go to state 113
    ANDOPERATOR     shift and go to state 116
    OROPERATOR      shift and go to state 115


state 122

    (77) expression -> LPAREN expression . RPAREN
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . DIVIDE expression
    (75) expression -> expression . TIMES expression
    (59) CS -> expression .

    RPAREN          shift and go to state 107
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    DIVIDE          shift and go to state 88
    TIMES           shift and go to state 90
    LESSTHANEQ      reduce using rule 59 (CS -> expression .)
    GREATERTHANEQ   reduce using rule 59 (CS -> expression .)
    UNEQUAL         reduce using rule 59 (CS -> expression .)
    EQUALCHECK      reduce using rule 59 (CS -> expression .)
    LESSTHAN        reduce using rule 59 (CS -> expression .)
    GREATERTHAN     reduce using rule 59 (CS -> expression .)


state 123

    (55) conditionbase -> CS UNEQUAL . CS
    (59) CS -> . expression
    (60) CS -> . NOT LPAREN expression RPAREN
    (71) expression -> . functioncall
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . MINUS expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . allnumbers
    (81) expression -> . pointervar
    (29) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (79) allnumbers -> . FLOAT
    (80) allnumbers -> . NUMBER
    (82) pointervar -> . TIMES pointervar
    (83) pointervar -> . ADDROF pointervar
    (84) pointervar -> . NAME

    NOT             shift and go to state 144
    MINUS           shift and go to state 72
    LPAREN          shift and go to state 70
    NAME            shift and go to state 63
    FLOAT           shift and go to state 62
    NUMBER          shift and go to state 67
    TIMES           shift and go to state 68
    ADDROF          shift and go to state 64

    pointervar                     shift and go to state 66
    allnumbers                     shift and go to state 65
    functioncall                   shift and go to state 69
    CS                             shift and go to state 145
    expression                     shift and go to state 99

state 124

    (57) conditionbase -> CS LESSTHAN . CS
    (59) CS -> . expression
    (60) CS -> . NOT LPAREN expression RPAREN
    (71) expression -> . functioncall
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . MINUS expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . allnumbers
    (81) expression -> . pointervar
    (29) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (79) allnumbers -> . FLOAT
    (80) allnumbers -> . NUMBER
    (82) pointervar -> . TIMES pointervar
    (83) pointervar -> . ADDROF pointervar
    (84) pointervar -> . NAME

    NOT             shift and go to state 144
    MINUS           shift and go to state 72
    LPAREN          shift and go to state 70
    NAME            shift and go to state 63
    FLOAT           shift and go to state 62
    NUMBER          shift and go to state 67
    TIMES           shift and go to state 68
    ADDROF          shift and go to state 64

    pointervar                     shift and go to state 66
    allnumbers                     shift and go to state 65
    functioncall                   shift and go to state 69
    CS                             shift and go to state 146
    expression                     shift and go to state 99

state 125

    (54) conditionbase -> CS GREATERTHANEQ . CS
    (59) CS -> . expression
    (60) CS -> . NOT LPAREN expression RPAREN
    (71) expression -> . functioncall
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . MINUS expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . allnumbers
    (81) expression -> . pointervar
    (29) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (79) allnumbers -> . FLOAT
    (80) allnumbers -> . NUMBER
    (82) pointervar -> . TIMES pointervar
    (83) pointervar -> . ADDROF pointervar
    (84) pointervar -> . NAME

    NOT             shift and go to state 144
    MINUS           shift and go to state 72
    LPAREN          shift and go to state 70
    NAME            shift and go to state 63
    FLOAT           shift and go to state 62
    NUMBER          shift and go to state 67
    TIMES           shift and go to state 68
    ADDROF          shift and go to state 64

    pointervar                     shift and go to state 66
    allnumbers                     shift and go to state 65
    functioncall                   shift and go to state 69
    CS                             shift and go to state 147
    expression                     shift and go to state 99

state 126

    (58) conditionbase -> CS GREATERTHAN . CS
    (59) CS -> . expression
    (60) CS -> . NOT LPAREN expression RPAREN
    (71) expression -> . functioncall
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . MINUS expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . allnumbers
    (81) expression -> . pointervar
    (29) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (79) allnumbers -> . FLOAT
    (80) allnumbers -> . NUMBER
    (82) pointervar -> . TIMES pointervar
    (83) pointervar -> . ADDROF pointervar
    (84) pointervar -> . NAME

    NOT             shift and go to state 144
    MINUS           shift and go to state 72
    LPAREN          shift and go to state 70
    NAME            shift and go to state 63
    FLOAT           shift and go to state 62
    NUMBER          shift and go to state 67
    TIMES           shift and go to state 68
    ADDROF          shift and go to state 64

    pointervar                     shift and go to state 66
    allnumbers                     shift and go to state 65
    functioncall                   shift and go to state 69
    CS                             shift and go to state 148
    expression                     shift and go to state 99

state 127

    (53) conditionbase -> CS LESSTHANEQ . CS
    (59) CS -> . expression
    (60) CS -> . NOT LPAREN expression RPAREN
    (71) expression -> . functioncall
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . MINUS expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . allnumbers
    (81) expression -> . pointervar
    (29) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (79) allnumbers -> . FLOAT
    (80) allnumbers -> . NUMBER
    (82) pointervar -> . TIMES pointervar
    (83) pointervar -> . ADDROF pointervar
    (84) pointervar -> . NAME

    NOT             shift and go to state 144
    MINUS           shift and go to state 72
    LPAREN          shift and go to state 70
    NAME            shift and go to state 63
    FLOAT           shift and go to state 62
    NUMBER          shift and go to state 67
    TIMES           shift and go to state 68
    ADDROF          shift and go to state 64

    pointervar                     shift and go to state 66
    allnumbers                     shift and go to state 65
    functioncall                   shift and go to state 69
    CS                             shift and go to state 149
    expression                     shift and go to state 99

state 128

    (56) conditionbase -> CS EQUALCHECK . CS
    (59) CS -> . expression
    (60) CS -> . NOT LPAREN expression RPAREN
    (71) expression -> . functioncall
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . MINUS expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . allnumbers
    (81) expression -> . pointervar
    (29) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (79) allnumbers -> . FLOAT
    (80) allnumbers -> . NUMBER
    (82) pointervar -> . TIMES pointervar
    (83) pointervar -> . ADDROF pointervar
    (84) pointervar -> . NAME

    NOT             shift and go to state 144
    MINUS           shift and go to state 72
    LPAREN          shift and go to state 70
    NAME            shift and go to state 63
    FLOAT           shift and go to state 62
    NUMBER          shift and go to state 67
    TIMES           shift and go to state 68
    ADDROF          shift and go to state 64

    pointervar                     shift and go to state 66
    allnumbers                     shift and go to state 65
    functioncall                   shift and go to state 69
    CS                             shift and go to state 150
    expression                     shift and go to state 99

state 129

    (44) conditional -> NOT LPAREN . conditional RPAREN
    (60) CS -> NOT LPAREN . expression RPAREN
    (42) conditional -> . LPAREN conditional RPAREN
    (43) conditional -> . conditionbase
    (44) conditional -> . NOT LPAREN conditional RPAREN
    (45) conditional -> . conditional LESSTHANEQ conditional
    (46) conditional -> . conditional GREATERTHANEQ conditional
    (47) conditional -> . conditional UNEQUAL conditional
    (48) conditional -> . conditional EQUALCHECK conditional
    (49) conditional -> . conditional LESSTHAN conditional
    (50) conditional -> . conditional GREATERTHAN conditional
    (51) conditional -> . conditional ANDOPERATOR conditional
    (52) conditional -> . conditional OROPERATOR conditional
    (71) expression -> . functioncall
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . MINUS expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . allnumbers
    (81) expression -> . pointervar
    (53) conditionbase -> . CS LESSTHANEQ CS
    (54) conditionbase -> . CS GREATERTHANEQ CS
    (55) conditionbase -> . CS UNEQUAL CS
    (56) conditionbase -> . CS EQUALCHECK CS
    (57) conditionbase -> . CS LESSTHAN CS
    (58) conditionbase -> . CS GREATERTHAN CS
    (29) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (79) allnumbers -> . FLOAT
    (80) allnumbers -> . NUMBER
    (82) pointervar -> . TIMES pointervar
    (83) pointervar -> . ADDROF pointervar
    (84) pointervar -> . NAME
    (59) CS -> . expression
    (60) CS -> . NOT LPAREN expression RPAREN

    LPAREN          shift and go to state 96
    NOT             shift and go to state 98
    MINUS           shift and go to state 72
    NAME            shift and go to state 63
    FLOAT           shift and go to state 62
    NUMBER          shift and go to state 67
    TIMES           shift and go to state 68
    ADDROF          shift and go to state 64

    allnumbers                     shift and go to state 65
    pointervar                     shift and go to state 66
    conditionbase                  shift and go to state 94
    conditional                    shift and go to state 151
    functioncall                   shift and go to state 69
    CS                             shift and go to state 97
    expression                     shift and go to state 152

state 130

    (69) assignment_base -> TIMES pointervar EQUALS expression .
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . DIVIDE expression
    (75) expression -> expression . TIMES expression

    SEMICOLON       reduce using rule 69 (assignment_base -> TIMES pointervar EQUALS expression .)
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    DIVIDE          shift and go to state 88
    TIMES           shift and go to state 90


state 131

    (33) unmatchedstatement -> IF LPAREN conditional RPAREN . allstatement
    (34) unmatchedstatement -> IF LPAREN conditional RPAREN . statement ELSE unmatchedstatement
    (35) unmatchedstatement -> IF LPAREN conditional RPAREN . LBRACE fbody RBRACE ELSE unmatchedstatement
    (36) unmatchedstatement -> IF LPAREN conditional RPAREN . LBRACE fbody RBRACE
    (37) ifblock -> IF LPAREN conditional RPAREN . statement ELSE statement
    (38) ifblock -> IF LPAREN conditional RPAREN . statement ELSE LBRACE fbody RBRACE
    (39) ifblock -> IF LPAREN conditional RPAREN . LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE
    (40) ifblock -> IF LPAREN conditional RPAREN . LBRACE fbody RBRACE ELSE statement
    (20) allstatement -> . statement
    (21) allstatement -> . unmatchedstatement
    (22) statement -> . assignment
    (23) statement -> . declaration
    (24) statement -> . whileblock
    (25) statement -> . ifblock
    (26) statement -> . returnstatement
    (27) statement -> . functioncall
    (32) statement -> . SEMICOLON
    (33) unmatchedstatement -> . IF LPAREN conditional RPAREN allstatement
    (34) unmatchedstatement -> . IF LPAREN conditional RPAREN statement ELSE unmatchedstatement
    (35) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement
    (36) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE
    (68) assignment -> . assignment_base SEMICOLON
    (61) declaration -> . TYPE dlist1 SEMICOLON
    (41) whileblock -> . WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE
    (37) ifblock -> . IF LPAREN conditional RPAREN statement ELSE statement
    (38) ifblock -> . IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE
    (39) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE
    (40) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement
    (28) returnstatement -> . RETURN expression SEMICOLON
    (29) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (69) assignment_base -> . TIMES pointervar EQUALS expression
    (70) assignment_base -> . NAME EQUALS expression

    LBRACE          shift and go to state 154
    SEMICOLON       shift and go to state 45
    IF              shift and go to state 55
    TYPE            shift and go to state 59
    WHILE           shift and go to state 43
    RETURN          shift and go to state 42
    NAME            shift and go to state 56
    TIMES           shift and go to state 53

    unmatchedstatement             shift and go to state 44
    declaration                    shift and go to state 52
    assignment                     shift and go to state 51
    whileblock                     shift and go to state 46
    ifblock                        shift and go to state 47
    allstatement                   shift and go to state 155
    statement                      shift and go to state 153
    functioncall                   shift and go to state 49
    returnstatement                shift and go to state 58
    assignment_base                shift and go to state 50

state 132

    (29) functioncall -> NAME LPAREN arguments RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 156


state 133

    (31) arguments -> expression COMMA . arguments
    (30) arguments -> . expression
    (31) arguments -> . expression COMMA arguments
    (71) expression -> . functioncall
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . MINUS expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . allnumbers
    (81) expression -> . pointervar
    (29) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (79) allnumbers -> . FLOAT
    (80) allnumbers -> . NUMBER
    (82) pointervar -> . TIMES pointervar
    (83) pointervar -> . ADDROF pointervar
    (84) pointervar -> . NAME

    MINUS           shift and go to state 72
    LPAREN          shift and go to state 70
    NAME            shift and go to state 63
    FLOAT           shift and go to state 62
    NUMBER          shift and go to state 67
    TIMES           shift and go to state 68
    ADDROF          shift and go to state 64

    functioncall                   shift and go to state 69
    pointervar                     shift and go to state 66
    allnumbers                     shift and go to state 65
    expression                     shift and go to state 104
    arguments                      shift and go to state 157

state 134

    (41) whileblock -> WHILE LPAREN conditional RPAREN LBRACE . fbody RBRACE
    (18) fbody -> . allstatement fbody
    (19) fbody -> .
    (20) allstatement -> . statement
    (21) allstatement -> . unmatchedstatement
    (22) statement -> . assignment
    (23) statement -> . declaration
    (24) statement -> . whileblock
    (25) statement -> . ifblock
    (26) statement -> . returnstatement
    (27) statement -> . functioncall
    (32) statement -> . SEMICOLON
    (33) unmatchedstatement -> . IF LPAREN conditional RPAREN allstatement
    (34) unmatchedstatement -> . IF LPAREN conditional RPAREN statement ELSE unmatchedstatement
    (35) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement
    (36) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE
    (68) assignment -> . assignment_base SEMICOLON
    (61) declaration -> . TYPE dlist1 SEMICOLON
    (41) whileblock -> . WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE
    (37) ifblock -> . IF LPAREN conditional RPAREN statement ELSE statement
    (38) ifblock -> . IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE
    (39) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE
    (40) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement
    (28) returnstatement -> . RETURN expression SEMICOLON
    (29) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (69) assignment_base -> . TIMES pointervar EQUALS expression
    (70) assignment_base -> . NAME EQUALS expression

    RBRACE          reduce using rule 19 (fbody -> .)
    SEMICOLON       shift and go to state 45
    IF              shift and go to state 55
    TYPE            shift and go to state 59
    WHILE           shift and go to state 43
    RETURN          shift and go to state 42
    NAME            shift and go to state 56
    TIMES           shift and go to state 53

    unmatchedstatement             shift and go to state 44
    declaration                    shift and go to state 52
    assignment                     shift and go to state 51
    whileblock                     shift and go to state 46
    ifblock                        shift and go to state 47
    allstatement                   shift and go to state 57
    statement                      shift and go to state 48
    fbody                          shift and go to state 158
    functioncall                   shift and go to state 49
    returnstatement                shift and go to state 58
    assignment_base                shift and go to state 50

state 135

    (50) conditional -> conditional GREATERTHAN conditional .
    (45) conditional -> conditional . LESSTHANEQ conditional
    (46) conditional -> conditional . GREATERTHANEQ conditional
    (47) conditional -> conditional . UNEQUAL conditional
    (48) conditional -> conditional . EQUALCHECK conditional
    (49) conditional -> conditional . LESSTHAN conditional
    (50) conditional -> conditional . GREATERTHAN conditional
    (51) conditional -> conditional . ANDOPERATOR conditional
    (52) conditional -> conditional . OROPERATOR conditional

    RPAREN          reduce using rule 50 (conditional -> conditional GREATERTHAN conditional .)
    LESSTHANEQ      reduce using rule 50 (conditional -> conditional GREATERTHAN conditional .)
    GREATERTHANEQ   reduce using rule 50 (conditional -> conditional GREATERTHAN conditional .)
    UNEQUAL         reduce using rule 50 (conditional -> conditional GREATERTHAN conditional .)
    EQUALCHECK      reduce using rule 50 (conditional -> conditional GREATERTHAN conditional .)
    LESSTHAN        reduce using rule 50 (conditional -> conditional GREATERTHAN conditional .)
    GREATERTHAN     reduce using rule 50 (conditional -> conditional GREATERTHAN conditional .)
    ANDOPERATOR     reduce using rule 50 (conditional -> conditional GREATERTHAN conditional .)
    OROPERATOR      reduce using rule 50 (conditional -> conditional GREATERTHAN conditional .)

  ! LESSTHANEQ      [ shift and go to state 119 ]
  ! GREATERTHANEQ   [ shift and go to state 117 ]
  ! UNEQUAL         [ shift and go to state 118 ]
  ! EQUALCHECK      [ shift and go to state 120 ]
  ! LESSTHAN        [ shift and go to state 114 ]
  ! GREATERTHAN     [ shift and go to state 113 ]
  ! ANDOPERATOR     [ shift and go to state 116 ]
  ! OROPERATOR      [ shift and go to state 115 ]


state 136

    (49) conditional -> conditional LESSTHAN conditional .
    (45) conditional -> conditional . LESSTHANEQ conditional
    (46) conditional -> conditional . GREATERTHANEQ conditional
    (47) conditional -> conditional . UNEQUAL conditional
    (48) conditional -> conditional . EQUALCHECK conditional
    (49) conditional -> conditional . LESSTHAN conditional
    (50) conditional -> conditional . GREATERTHAN conditional
    (51) conditional -> conditional . ANDOPERATOR conditional
    (52) conditional -> conditional . OROPERATOR conditional

    RPAREN          reduce using rule 49 (conditional -> conditional LESSTHAN conditional .)
    LESSTHANEQ      reduce using rule 49 (conditional -> conditional LESSTHAN conditional .)
    GREATERTHANEQ   reduce using rule 49 (conditional -> conditional LESSTHAN conditional .)
    UNEQUAL         reduce using rule 49 (conditional -> conditional LESSTHAN conditional .)
    EQUALCHECK      reduce using rule 49 (conditional -> conditional LESSTHAN conditional .)
    LESSTHAN        reduce using rule 49 (conditional -> conditional LESSTHAN conditional .)
    GREATERTHAN     reduce using rule 49 (conditional -> conditional LESSTHAN conditional .)
    ANDOPERATOR     reduce using rule 49 (conditional -> conditional LESSTHAN conditional .)
    OROPERATOR      reduce using rule 49 (conditional -> conditional LESSTHAN conditional .)

  ! LESSTHANEQ      [ shift and go to state 119 ]
  ! GREATERTHANEQ   [ shift and go to state 117 ]
  ! UNEQUAL         [ shift and go to state 118 ]
  ! EQUALCHECK      [ shift and go to state 120 ]
  ! LESSTHAN        [ shift and go to state 114 ]
  ! GREATERTHAN     [ shift and go to state 113 ]
  ! ANDOPERATOR     [ shift and go to state 116 ]
  ! OROPERATOR      [ shift and go to state 115 ]


state 137

    (52) conditional -> conditional OROPERATOR conditional .
    (45) conditional -> conditional . LESSTHANEQ conditional
    (46) conditional -> conditional . GREATERTHANEQ conditional
    (47) conditional -> conditional . UNEQUAL conditional
    (48) conditional -> conditional . EQUALCHECK conditional
    (49) conditional -> conditional . LESSTHAN conditional
    (50) conditional -> conditional . GREATERTHAN conditional
    (51) conditional -> conditional . ANDOPERATOR conditional
    (52) conditional -> conditional . OROPERATOR conditional

    RPAREN          reduce using rule 52 (conditional -> conditional OROPERATOR conditional .)
    OROPERATOR      reduce using rule 52 (conditional -> conditional OROPERATOR conditional .)
    LESSTHANEQ      shift and go to state 119
    GREATERTHANEQ   shift and go to state 117
    UNEQUAL         shift and go to state 118
    EQUALCHECK      shift and go to state 120
    LESSTHAN        shift and go to state 114
    GREATERTHAN     shift and go to state 113
    ANDOPERATOR     shift and go to state 116

  ! LESSTHANEQ      [ reduce using rule 52 (conditional -> conditional OROPERATOR conditional .) ]
  ! GREATERTHANEQ   [ reduce using rule 52 (conditional -> conditional OROPERATOR conditional .) ]
  ! UNEQUAL         [ reduce using rule 52 (conditional -> conditional OROPERATOR conditional .) ]
  ! EQUALCHECK      [ reduce using rule 52 (conditional -> conditional OROPERATOR conditional .) ]
  ! LESSTHAN        [ reduce using rule 52 (conditional -> conditional OROPERATOR conditional .) ]
  ! GREATERTHAN     [ reduce using rule 52 (conditional -> conditional OROPERATOR conditional .) ]
  ! ANDOPERATOR     [ reduce using rule 52 (conditional -> conditional OROPERATOR conditional .) ]
  ! OROPERATOR      [ shift and go to state 115 ]


state 138

    (51) conditional -> conditional ANDOPERATOR conditional .
    (45) conditional -> conditional . LESSTHANEQ conditional
    (46) conditional -> conditional . GREATERTHANEQ conditional
    (47) conditional -> conditional . UNEQUAL conditional
    (48) conditional -> conditional . EQUALCHECK conditional
    (49) conditional -> conditional . LESSTHAN conditional
    (50) conditional -> conditional . GREATERTHAN conditional
    (51) conditional -> conditional . ANDOPERATOR conditional
    (52) conditional -> conditional . OROPERATOR conditional

    RPAREN          reduce using rule 51 (conditional -> conditional ANDOPERATOR conditional .)
    ANDOPERATOR     reduce using rule 51 (conditional -> conditional ANDOPERATOR conditional .)
    OROPERATOR      reduce using rule 51 (conditional -> conditional ANDOPERATOR conditional .)
    LESSTHANEQ      shift and go to state 119
    GREATERTHANEQ   shift and go to state 117
    UNEQUAL         shift and go to state 118
    EQUALCHECK      shift and go to state 120
    LESSTHAN        shift and go to state 114
    GREATERTHAN     shift and go to state 113

  ! LESSTHANEQ      [ reduce using rule 51 (conditional -> conditional ANDOPERATOR conditional .) ]
  ! GREATERTHANEQ   [ reduce using rule 51 (conditional -> conditional ANDOPERATOR conditional .) ]
  ! UNEQUAL         [ reduce using rule 51 (conditional -> conditional ANDOPERATOR conditional .) ]
  ! EQUALCHECK      [ reduce using rule 51 (conditional -> conditional ANDOPERATOR conditional .) ]
  ! LESSTHAN        [ reduce using rule 51 (conditional -> conditional ANDOPERATOR conditional .) ]
  ! GREATERTHAN     [ reduce using rule 51 (conditional -> conditional ANDOPERATOR conditional .) ]
  ! ANDOPERATOR     [ shift and go to state 116 ]
  ! OROPERATOR      [ shift and go to state 115 ]


state 139

    (46) conditional -> conditional GREATERTHANEQ conditional .
    (45) conditional -> conditional . LESSTHANEQ conditional
    (46) conditional -> conditional . GREATERTHANEQ conditional
    (47) conditional -> conditional . UNEQUAL conditional
    (48) conditional -> conditional . EQUALCHECK conditional
    (49) conditional -> conditional . LESSTHAN conditional
    (50) conditional -> conditional . GREATERTHAN conditional
    (51) conditional -> conditional . ANDOPERATOR conditional
    (52) conditional -> conditional . OROPERATOR conditional

    RPAREN          reduce using rule 46 (conditional -> conditional GREATERTHANEQ conditional .)
    LESSTHANEQ      reduce using rule 46 (conditional -> conditional GREATERTHANEQ conditional .)
    GREATERTHANEQ   reduce using rule 46 (conditional -> conditional GREATERTHANEQ conditional .)
    UNEQUAL         reduce using rule 46 (conditional -> conditional GREATERTHANEQ conditional .)
    EQUALCHECK      reduce using rule 46 (conditional -> conditional GREATERTHANEQ conditional .)
    LESSTHAN        reduce using rule 46 (conditional -> conditional GREATERTHANEQ conditional .)
    GREATERTHAN     reduce using rule 46 (conditional -> conditional GREATERTHANEQ conditional .)
    ANDOPERATOR     reduce using rule 46 (conditional -> conditional GREATERTHANEQ conditional .)
    OROPERATOR      reduce using rule 46 (conditional -> conditional GREATERTHANEQ conditional .)

  ! LESSTHANEQ      [ shift and go to state 119 ]
  ! GREATERTHANEQ   [ shift and go to state 117 ]
  ! UNEQUAL         [ shift and go to state 118 ]
  ! EQUALCHECK      [ shift and go to state 120 ]
  ! LESSTHAN        [ shift and go to state 114 ]
  ! GREATERTHAN     [ shift and go to state 113 ]
  ! ANDOPERATOR     [ shift and go to state 116 ]
  ! OROPERATOR      [ shift and go to state 115 ]


state 140

    (47) conditional -> conditional UNEQUAL conditional .
    (45) conditional -> conditional . LESSTHANEQ conditional
    (46) conditional -> conditional . GREATERTHANEQ conditional
    (47) conditional -> conditional . UNEQUAL conditional
    (48) conditional -> conditional . EQUALCHECK conditional
    (49) conditional -> conditional . LESSTHAN conditional
    (50) conditional -> conditional . GREATERTHAN conditional
    (51) conditional -> conditional . ANDOPERATOR conditional
    (52) conditional -> conditional . OROPERATOR conditional

    RPAREN          reduce using rule 47 (conditional -> conditional UNEQUAL conditional .)
    UNEQUAL         reduce using rule 47 (conditional -> conditional UNEQUAL conditional .)
    EQUALCHECK      reduce using rule 47 (conditional -> conditional UNEQUAL conditional .)
    ANDOPERATOR     reduce using rule 47 (conditional -> conditional UNEQUAL conditional .)
    OROPERATOR      reduce using rule 47 (conditional -> conditional UNEQUAL conditional .)
    LESSTHANEQ      shift and go to state 119
    GREATERTHANEQ   shift and go to state 117
    LESSTHAN        shift and go to state 114
    GREATERTHAN     shift and go to state 113

  ! LESSTHANEQ      [ reduce using rule 47 (conditional -> conditional UNEQUAL conditional .) ]
  ! GREATERTHANEQ   [ reduce using rule 47 (conditional -> conditional UNEQUAL conditional .) ]
  ! LESSTHAN        [ reduce using rule 47 (conditional -> conditional UNEQUAL conditional .) ]
  ! GREATERTHAN     [ reduce using rule 47 (conditional -> conditional UNEQUAL conditional .) ]
  ! UNEQUAL         [ shift and go to state 118 ]
  ! EQUALCHECK      [ shift and go to state 120 ]
  ! ANDOPERATOR     [ shift and go to state 116 ]
  ! OROPERATOR      [ shift and go to state 115 ]


state 141

    (45) conditional -> conditional LESSTHANEQ conditional .
    (45) conditional -> conditional . LESSTHANEQ conditional
    (46) conditional -> conditional . GREATERTHANEQ conditional
    (47) conditional -> conditional . UNEQUAL conditional
    (48) conditional -> conditional . EQUALCHECK conditional
    (49) conditional -> conditional . LESSTHAN conditional
    (50) conditional -> conditional . GREATERTHAN conditional
    (51) conditional -> conditional . ANDOPERATOR conditional
    (52) conditional -> conditional . OROPERATOR conditional

    RPAREN          reduce using rule 45 (conditional -> conditional LESSTHANEQ conditional .)
    LESSTHANEQ      reduce using rule 45 (conditional -> conditional LESSTHANEQ conditional .)
    GREATERTHANEQ   reduce using rule 45 (conditional -> conditional LESSTHANEQ conditional .)
    UNEQUAL         reduce using rule 45 (conditional -> conditional LESSTHANEQ conditional .)
    EQUALCHECK      reduce using rule 45 (conditional -> conditional LESSTHANEQ conditional .)
    LESSTHAN        reduce using rule 45 (conditional -> conditional LESSTHANEQ conditional .)
    GREATERTHAN     reduce using rule 45 (conditional -> conditional LESSTHANEQ conditional .)
    ANDOPERATOR     reduce using rule 45 (conditional -> conditional LESSTHANEQ conditional .)
    OROPERATOR      reduce using rule 45 (conditional -> conditional LESSTHANEQ conditional .)

  ! LESSTHANEQ      [ shift and go to state 119 ]
  ! GREATERTHANEQ   [ shift and go to state 117 ]
  ! UNEQUAL         [ shift and go to state 118 ]
  ! EQUALCHECK      [ shift and go to state 120 ]
  ! LESSTHAN        [ shift and go to state 114 ]
  ! GREATERTHAN     [ shift and go to state 113 ]
  ! ANDOPERATOR     [ shift and go to state 116 ]
  ! OROPERATOR      [ shift and go to state 115 ]


state 142

    (48) conditional -> conditional EQUALCHECK conditional .
    (45) conditional -> conditional . LESSTHANEQ conditional
    (46) conditional -> conditional . GREATERTHANEQ conditional
    (47) conditional -> conditional . UNEQUAL conditional
    (48) conditional -> conditional . EQUALCHECK conditional
    (49) conditional -> conditional . LESSTHAN conditional
    (50) conditional -> conditional . GREATERTHAN conditional
    (51) conditional -> conditional . ANDOPERATOR conditional
    (52) conditional -> conditional . OROPERATOR conditional

    RPAREN          reduce using rule 48 (conditional -> conditional EQUALCHECK conditional .)
    UNEQUAL         reduce using rule 48 (conditional -> conditional EQUALCHECK conditional .)
    EQUALCHECK      reduce using rule 48 (conditional -> conditional EQUALCHECK conditional .)
    ANDOPERATOR     reduce using rule 48 (conditional -> conditional EQUALCHECK conditional .)
    OROPERATOR      reduce using rule 48 (conditional -> conditional EQUALCHECK conditional .)
    LESSTHANEQ      shift and go to state 119
    GREATERTHANEQ   shift and go to state 117
    LESSTHAN        shift and go to state 114
    GREATERTHAN     shift and go to state 113

  ! LESSTHANEQ      [ reduce using rule 48 (conditional -> conditional EQUALCHECK conditional .) ]
  ! GREATERTHANEQ   [ reduce using rule 48 (conditional -> conditional EQUALCHECK conditional .) ]
  ! LESSTHAN        [ reduce using rule 48 (conditional -> conditional EQUALCHECK conditional .) ]
  ! GREATERTHAN     [ reduce using rule 48 (conditional -> conditional EQUALCHECK conditional .) ]
  ! UNEQUAL         [ shift and go to state 118 ]
  ! EQUALCHECK      [ shift and go to state 120 ]
  ! ANDOPERATOR     [ shift and go to state 116 ]
  ! OROPERATOR      [ shift and go to state 115 ]


state 143

    (42) conditional -> LPAREN conditional RPAREN .

    RPAREN          reduce using rule 42 (conditional -> LPAREN conditional RPAREN .)
    LESSTHANEQ      reduce using rule 42 (conditional -> LPAREN conditional RPAREN .)
    GREATERTHANEQ   reduce using rule 42 (conditional -> LPAREN conditional RPAREN .)
    UNEQUAL         reduce using rule 42 (conditional -> LPAREN conditional RPAREN .)
    EQUALCHECK      reduce using rule 42 (conditional -> LPAREN conditional RPAREN .)
    LESSTHAN        reduce using rule 42 (conditional -> LPAREN conditional RPAREN .)
    GREATERTHAN     reduce using rule 42 (conditional -> LPAREN conditional RPAREN .)
    ANDOPERATOR     reduce using rule 42 (conditional -> LPAREN conditional RPAREN .)
    OROPERATOR      reduce using rule 42 (conditional -> LPAREN conditional RPAREN .)


state 144

    (60) CS -> NOT . LPAREN expression RPAREN

    LPAREN          shift and go to state 159


state 145

    (55) conditionbase -> CS UNEQUAL CS .

    LESSTHANEQ      reduce using rule 55 (conditionbase -> CS UNEQUAL CS .)
    GREATERTHANEQ   reduce using rule 55 (conditionbase -> CS UNEQUAL CS .)
    UNEQUAL         reduce using rule 55 (conditionbase -> CS UNEQUAL CS .)
    EQUALCHECK      reduce using rule 55 (conditionbase -> CS UNEQUAL CS .)
    LESSTHAN        reduce using rule 55 (conditionbase -> CS UNEQUAL CS .)
    GREATERTHAN     reduce using rule 55 (conditionbase -> CS UNEQUAL CS .)
    ANDOPERATOR     reduce using rule 55 (conditionbase -> CS UNEQUAL CS .)
    OROPERATOR      reduce using rule 55 (conditionbase -> CS UNEQUAL CS .)
    RPAREN          reduce using rule 55 (conditionbase -> CS UNEQUAL CS .)


state 146

    (57) conditionbase -> CS LESSTHAN CS .

    LESSTHANEQ      reduce using rule 57 (conditionbase -> CS LESSTHAN CS .)
    GREATERTHANEQ   reduce using rule 57 (conditionbase -> CS LESSTHAN CS .)
    UNEQUAL         reduce using rule 57 (conditionbase -> CS LESSTHAN CS .)
    EQUALCHECK      reduce using rule 57 (conditionbase -> CS LESSTHAN CS .)
    LESSTHAN        reduce using rule 57 (conditionbase -> CS LESSTHAN CS .)
    GREATERTHAN     reduce using rule 57 (conditionbase -> CS LESSTHAN CS .)
    ANDOPERATOR     reduce using rule 57 (conditionbase -> CS LESSTHAN CS .)
    OROPERATOR      reduce using rule 57 (conditionbase -> CS LESSTHAN CS .)
    RPAREN          reduce using rule 57 (conditionbase -> CS LESSTHAN CS .)


state 147

    (54) conditionbase -> CS GREATERTHANEQ CS .

    LESSTHANEQ      reduce using rule 54 (conditionbase -> CS GREATERTHANEQ CS .)
    GREATERTHANEQ   reduce using rule 54 (conditionbase -> CS GREATERTHANEQ CS .)
    UNEQUAL         reduce using rule 54 (conditionbase -> CS GREATERTHANEQ CS .)
    EQUALCHECK      reduce using rule 54 (conditionbase -> CS GREATERTHANEQ CS .)
    LESSTHAN        reduce using rule 54 (conditionbase -> CS GREATERTHANEQ CS .)
    GREATERTHAN     reduce using rule 54 (conditionbase -> CS GREATERTHANEQ CS .)
    ANDOPERATOR     reduce using rule 54 (conditionbase -> CS GREATERTHANEQ CS .)
    OROPERATOR      reduce using rule 54 (conditionbase -> CS GREATERTHANEQ CS .)
    RPAREN          reduce using rule 54 (conditionbase -> CS GREATERTHANEQ CS .)


state 148

    (58) conditionbase -> CS GREATERTHAN CS .

    LESSTHANEQ      reduce using rule 58 (conditionbase -> CS GREATERTHAN CS .)
    GREATERTHANEQ   reduce using rule 58 (conditionbase -> CS GREATERTHAN CS .)
    UNEQUAL         reduce using rule 58 (conditionbase -> CS GREATERTHAN CS .)
    EQUALCHECK      reduce using rule 58 (conditionbase -> CS GREATERTHAN CS .)
    LESSTHAN        reduce using rule 58 (conditionbase -> CS GREATERTHAN CS .)
    GREATERTHAN     reduce using rule 58 (conditionbase -> CS GREATERTHAN CS .)
    ANDOPERATOR     reduce using rule 58 (conditionbase -> CS GREATERTHAN CS .)
    OROPERATOR      reduce using rule 58 (conditionbase -> CS GREATERTHAN CS .)
    RPAREN          reduce using rule 58 (conditionbase -> CS GREATERTHAN CS .)


state 149

    (53) conditionbase -> CS LESSTHANEQ CS .

    LESSTHANEQ      reduce using rule 53 (conditionbase -> CS LESSTHANEQ CS .)
    GREATERTHANEQ   reduce using rule 53 (conditionbase -> CS LESSTHANEQ CS .)
    UNEQUAL         reduce using rule 53 (conditionbase -> CS LESSTHANEQ CS .)
    EQUALCHECK      reduce using rule 53 (conditionbase -> CS LESSTHANEQ CS .)
    LESSTHAN        reduce using rule 53 (conditionbase -> CS LESSTHANEQ CS .)
    GREATERTHAN     reduce using rule 53 (conditionbase -> CS LESSTHANEQ CS .)
    ANDOPERATOR     reduce using rule 53 (conditionbase -> CS LESSTHANEQ CS .)
    OROPERATOR      reduce using rule 53 (conditionbase -> CS LESSTHANEQ CS .)
    RPAREN          reduce using rule 53 (conditionbase -> CS LESSTHANEQ CS .)


state 150

    (56) conditionbase -> CS EQUALCHECK CS .

    LESSTHANEQ      reduce using rule 56 (conditionbase -> CS EQUALCHECK CS .)
    GREATERTHANEQ   reduce using rule 56 (conditionbase -> CS EQUALCHECK CS .)
    UNEQUAL         reduce using rule 56 (conditionbase -> CS EQUALCHECK CS .)
    EQUALCHECK      reduce using rule 56 (conditionbase -> CS EQUALCHECK CS .)
    LESSTHAN        reduce using rule 56 (conditionbase -> CS EQUALCHECK CS .)
    GREATERTHAN     reduce using rule 56 (conditionbase -> CS EQUALCHECK CS .)
    ANDOPERATOR     reduce using rule 56 (conditionbase -> CS EQUALCHECK CS .)
    OROPERATOR      reduce using rule 56 (conditionbase -> CS EQUALCHECK CS .)
    RPAREN          reduce using rule 56 (conditionbase -> CS EQUALCHECK CS .)


state 151

    (44) conditional -> NOT LPAREN conditional . RPAREN
    (45) conditional -> conditional . LESSTHANEQ conditional
    (46) conditional -> conditional . GREATERTHANEQ conditional
    (47) conditional -> conditional . UNEQUAL conditional
    (48) conditional -> conditional . EQUALCHECK conditional
    (49) conditional -> conditional . LESSTHAN conditional
    (50) conditional -> conditional . GREATERTHAN conditional
    (51) conditional -> conditional . ANDOPERATOR conditional
    (52) conditional -> conditional . OROPERATOR conditional

    RPAREN          shift and go to state 160
    LESSTHANEQ      shift and go to state 119
    GREATERTHANEQ   shift and go to state 117
    UNEQUAL         shift and go to state 118
    EQUALCHECK      shift and go to state 120
    LESSTHAN        shift and go to state 114
    GREATERTHAN     shift and go to state 113
    ANDOPERATOR     shift and go to state 116
    OROPERATOR      shift and go to state 115


state 152

    (60) CS -> NOT LPAREN expression . RPAREN
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . DIVIDE expression
    (75) expression -> expression . TIMES expression
    (59) CS -> expression .

    RPAREN          shift and go to state 161
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    DIVIDE          shift and go to state 88
    TIMES           shift and go to state 90
    LESSTHANEQ      reduce using rule 59 (CS -> expression .)
    GREATERTHANEQ   reduce using rule 59 (CS -> expression .)
    UNEQUAL         reduce using rule 59 (CS -> expression .)
    EQUALCHECK      reduce using rule 59 (CS -> expression .)
    LESSTHAN        reduce using rule 59 (CS -> expression .)
    GREATERTHAN     reduce using rule 59 (CS -> expression .)


state 153

    (34) unmatchedstatement -> IF LPAREN conditional RPAREN statement . ELSE unmatchedstatement
    (37) ifblock -> IF LPAREN conditional RPAREN statement . ELSE statement
    (38) ifblock -> IF LPAREN conditional RPAREN statement . ELSE LBRACE fbody RBRACE
    (20) allstatement -> statement .

    ELSE            shift and go to state 162
    SEMICOLON       reduce using rule 20 (allstatement -> statement .)
    IF              reduce using rule 20 (allstatement -> statement .)
    TYPE            reduce using rule 20 (allstatement -> statement .)
    WHILE           reduce using rule 20 (allstatement -> statement .)
    RETURN          reduce using rule 20 (allstatement -> statement .)
    NAME            reduce using rule 20 (allstatement -> statement .)
    TIMES           reduce using rule 20 (allstatement -> statement .)
    RBRACE          reduce using rule 20 (allstatement -> statement .)


state 154

    (35) unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE . fbody RBRACE ELSE unmatchedstatement
    (36) unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE . fbody RBRACE
    (39) ifblock -> IF LPAREN conditional RPAREN LBRACE . fbody RBRACE ELSE LBRACE fbody RBRACE
    (40) ifblock -> IF LPAREN conditional RPAREN LBRACE . fbody RBRACE ELSE statement
    (18) fbody -> . allstatement fbody
    (19) fbody -> .
    (20) allstatement -> . statement
    (21) allstatement -> . unmatchedstatement
    (22) statement -> . assignment
    (23) statement -> . declaration
    (24) statement -> . whileblock
    (25) statement -> . ifblock
    (26) statement -> . returnstatement
    (27) statement -> . functioncall
    (32) statement -> . SEMICOLON
    (33) unmatchedstatement -> . IF LPAREN conditional RPAREN allstatement
    (34) unmatchedstatement -> . IF LPAREN conditional RPAREN statement ELSE unmatchedstatement
    (35) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement
    (36) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE
    (68) assignment -> . assignment_base SEMICOLON
    (61) declaration -> . TYPE dlist1 SEMICOLON
    (41) whileblock -> . WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE
    (37) ifblock -> . IF LPAREN conditional RPAREN statement ELSE statement
    (38) ifblock -> . IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE
    (39) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE
    (40) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement
    (28) returnstatement -> . RETURN expression SEMICOLON
    (29) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (69) assignment_base -> . TIMES pointervar EQUALS expression
    (70) assignment_base -> . NAME EQUALS expression

    RBRACE          reduce using rule 19 (fbody -> .)
    SEMICOLON       shift and go to state 45
    IF              shift and go to state 55
    TYPE            shift and go to state 59
    WHILE           shift and go to state 43
    RETURN          shift and go to state 42
    NAME            shift and go to state 56
    TIMES           shift and go to state 53

    unmatchedstatement             shift and go to state 44
    declaration                    shift and go to state 52
    assignment                     shift and go to state 51
    whileblock                     shift and go to state 46
    ifblock                        shift and go to state 47
    allstatement                   shift and go to state 57
    statement                      shift and go to state 48
    fbody                          shift and go to state 163
    functioncall                   shift and go to state 49
    returnstatement                shift and go to state 58
    assignment_base                shift and go to state 50

state 155

    (33) unmatchedstatement -> IF LPAREN conditional RPAREN allstatement .

    SEMICOLON       reduce using rule 33 (unmatchedstatement -> IF LPAREN conditional RPAREN allstatement .)
    IF              reduce using rule 33 (unmatchedstatement -> IF LPAREN conditional RPAREN allstatement .)
    TYPE            reduce using rule 33 (unmatchedstatement -> IF LPAREN conditional RPAREN allstatement .)
    WHILE           reduce using rule 33 (unmatchedstatement -> IF LPAREN conditional RPAREN allstatement .)
    RETURN          reduce using rule 33 (unmatchedstatement -> IF LPAREN conditional RPAREN allstatement .)
    NAME            reduce using rule 33 (unmatchedstatement -> IF LPAREN conditional RPAREN allstatement .)
    TIMES           reduce using rule 33 (unmatchedstatement -> IF LPAREN conditional RPAREN allstatement .)
    RBRACE          reduce using rule 33 (unmatchedstatement -> IF LPAREN conditional RPAREN allstatement .)


state 156

    (29) functioncall -> NAME LPAREN arguments RPAREN SEMICOLON .

    RPAREN          reduce using rule 29 (functioncall -> NAME LPAREN arguments RPAREN SEMICOLON .)
    PLUS            reduce using rule 29 (functioncall -> NAME LPAREN arguments RPAREN SEMICOLON .)
    MINUS           reduce using rule 29 (functioncall -> NAME LPAREN arguments RPAREN SEMICOLON .)
    DIVIDE          reduce using rule 29 (functioncall -> NAME LPAREN arguments RPAREN SEMICOLON .)
    TIMES           reduce using rule 29 (functioncall -> NAME LPAREN arguments RPAREN SEMICOLON .)
    LESSTHANEQ      reduce using rule 29 (functioncall -> NAME LPAREN arguments RPAREN SEMICOLON .)
    GREATERTHANEQ   reduce using rule 29 (functioncall -> NAME LPAREN arguments RPAREN SEMICOLON .)
    UNEQUAL         reduce using rule 29 (functioncall -> NAME LPAREN arguments RPAREN SEMICOLON .)
    EQUALCHECK      reduce using rule 29 (functioncall -> NAME LPAREN arguments RPAREN SEMICOLON .)
    LESSTHAN        reduce using rule 29 (functioncall -> NAME LPAREN arguments RPAREN SEMICOLON .)
    GREATERTHAN     reduce using rule 29 (functioncall -> NAME LPAREN arguments RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 29 (functioncall -> NAME LPAREN arguments RPAREN SEMICOLON .)
    COMMA           reduce using rule 29 (functioncall -> NAME LPAREN arguments RPAREN SEMICOLON .)
    ANDOPERATOR     reduce using rule 29 (functioncall -> NAME LPAREN arguments RPAREN SEMICOLON .)
    OROPERATOR      reduce using rule 29 (functioncall -> NAME LPAREN arguments RPAREN SEMICOLON .)
    IF              reduce using rule 29 (functioncall -> NAME LPAREN arguments RPAREN SEMICOLON .)
    TYPE            reduce using rule 29 (functioncall -> NAME LPAREN arguments RPAREN SEMICOLON .)
    WHILE           reduce using rule 29 (functioncall -> NAME LPAREN arguments RPAREN SEMICOLON .)
    RETURN          reduce using rule 29 (functioncall -> NAME LPAREN arguments RPAREN SEMICOLON .)
    NAME            reduce using rule 29 (functioncall -> NAME LPAREN arguments RPAREN SEMICOLON .)
    RBRACE          reduce using rule 29 (functioncall -> NAME LPAREN arguments RPAREN SEMICOLON .)
    ELSE            reduce using rule 29 (functioncall -> NAME LPAREN arguments RPAREN SEMICOLON .)


state 157

    (31) arguments -> expression COMMA arguments .

    RPAREN          reduce using rule 31 (arguments -> expression COMMA arguments .)


state 158

    (41) whileblock -> WHILE LPAREN conditional RPAREN LBRACE fbody . RBRACE

    RBRACE          shift and go to state 164


state 159

    (60) CS -> NOT LPAREN . expression RPAREN
    (71) expression -> . functioncall
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . MINUS expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . allnumbers
    (81) expression -> . pointervar
    (29) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (79) allnumbers -> . FLOAT
    (80) allnumbers -> . NUMBER
    (82) pointervar -> . TIMES pointervar
    (83) pointervar -> . ADDROF pointervar
    (84) pointervar -> . NAME

    MINUS           shift and go to state 72
    LPAREN          shift and go to state 70
    NAME            shift and go to state 63
    FLOAT           shift and go to state 62
    NUMBER          shift and go to state 67
    TIMES           shift and go to state 68
    ADDROF          shift and go to state 64

    functioncall                   shift and go to state 69
    pointervar                     shift and go to state 66
    allnumbers                     shift and go to state 65
    expression                     shift and go to state 165

state 160

    (44) conditional -> NOT LPAREN conditional RPAREN .

    RPAREN          reduce using rule 44 (conditional -> NOT LPAREN conditional RPAREN .)
    LESSTHANEQ      reduce using rule 44 (conditional -> NOT LPAREN conditional RPAREN .)
    GREATERTHANEQ   reduce using rule 44 (conditional -> NOT LPAREN conditional RPAREN .)
    UNEQUAL         reduce using rule 44 (conditional -> NOT LPAREN conditional RPAREN .)
    EQUALCHECK      reduce using rule 44 (conditional -> NOT LPAREN conditional RPAREN .)
    LESSTHAN        reduce using rule 44 (conditional -> NOT LPAREN conditional RPAREN .)
    GREATERTHAN     reduce using rule 44 (conditional -> NOT LPAREN conditional RPAREN .)
    ANDOPERATOR     reduce using rule 44 (conditional -> NOT LPAREN conditional RPAREN .)
    OROPERATOR      reduce using rule 44 (conditional -> NOT LPAREN conditional RPAREN .)


state 161

    (60) CS -> NOT LPAREN expression RPAREN .

    LESSTHANEQ      reduce using rule 60 (CS -> NOT LPAREN expression RPAREN .)
    GREATERTHANEQ   reduce using rule 60 (CS -> NOT LPAREN expression RPAREN .)
    UNEQUAL         reduce using rule 60 (CS -> NOT LPAREN expression RPAREN .)
    EQUALCHECK      reduce using rule 60 (CS -> NOT LPAREN expression RPAREN .)
    LESSTHAN        reduce using rule 60 (CS -> NOT LPAREN expression RPAREN .)
    GREATERTHAN     reduce using rule 60 (CS -> NOT LPAREN expression RPAREN .)
    RPAREN          reduce using rule 60 (CS -> NOT LPAREN expression RPAREN .)
    ANDOPERATOR     reduce using rule 60 (CS -> NOT LPAREN expression RPAREN .)
    OROPERATOR      reduce using rule 60 (CS -> NOT LPAREN expression RPAREN .)


state 162

    (34) unmatchedstatement -> IF LPAREN conditional RPAREN statement ELSE . unmatchedstatement
    (37) ifblock -> IF LPAREN conditional RPAREN statement ELSE . statement
    (38) ifblock -> IF LPAREN conditional RPAREN statement ELSE . LBRACE fbody RBRACE
    (33) unmatchedstatement -> . IF LPAREN conditional RPAREN allstatement
    (34) unmatchedstatement -> . IF LPAREN conditional RPAREN statement ELSE unmatchedstatement
    (35) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement
    (36) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE
    (22) statement -> . assignment
    (23) statement -> . declaration
    (24) statement -> . whileblock
    (25) statement -> . ifblock
    (26) statement -> . returnstatement
    (27) statement -> . functioncall
    (32) statement -> . SEMICOLON
    (68) assignment -> . assignment_base SEMICOLON
    (61) declaration -> . TYPE dlist1 SEMICOLON
    (41) whileblock -> . WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE
    (37) ifblock -> . IF LPAREN conditional RPAREN statement ELSE statement
    (38) ifblock -> . IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE
    (39) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE
    (40) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement
    (28) returnstatement -> . RETURN expression SEMICOLON
    (29) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (69) assignment_base -> . TIMES pointervar EQUALS expression
    (70) assignment_base -> . NAME EQUALS expression

    LBRACE          shift and go to state 168
    IF              shift and go to state 55
    SEMICOLON       shift and go to state 45
    TYPE            shift and go to state 59
    WHILE           shift and go to state 43
    RETURN          shift and go to state 42
    NAME            shift and go to state 56
    TIMES           shift and go to state 53

    unmatchedstatement             shift and go to state 166
    declaration                    shift and go to state 52
    assignment                     shift and go to state 51
    whileblock                     shift and go to state 46
    ifblock                        shift and go to state 47
    statement                      shift and go to state 167
    functioncall                   shift and go to state 49
    returnstatement                shift and go to state 58
    assignment_base                shift and go to state 50

state 163

    (35) unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody . RBRACE ELSE unmatchedstatement
    (36) unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody . RBRACE
    (39) ifblock -> IF LPAREN conditional RPAREN LBRACE fbody . RBRACE ELSE LBRACE fbody RBRACE
    (40) ifblock -> IF LPAREN conditional RPAREN LBRACE fbody . RBRACE ELSE statement

    RBRACE          shift and go to state 169


state 164

    (41) whileblock -> WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE .

    SEMICOLON       reduce using rule 41 (whileblock -> WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE .)
    IF              reduce using rule 41 (whileblock -> WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE .)
    TYPE            reduce using rule 41 (whileblock -> WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE .)
    WHILE           reduce using rule 41 (whileblock -> WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE .)
    RETURN          reduce using rule 41 (whileblock -> WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE .)
    NAME            reduce using rule 41 (whileblock -> WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE .)
    TIMES           reduce using rule 41 (whileblock -> WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE .)
    RBRACE          reduce using rule 41 (whileblock -> WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE .)
    ELSE            reduce using rule 41 (whileblock -> WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE .)


state 165

    (60) CS -> NOT LPAREN expression . RPAREN
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . DIVIDE expression
    (75) expression -> expression . TIMES expression

    RPAREN          shift and go to state 161
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    DIVIDE          shift and go to state 88
    TIMES           shift and go to state 90


state 166

    (34) unmatchedstatement -> IF LPAREN conditional RPAREN statement ELSE unmatchedstatement .

    SEMICOLON       reduce using rule 34 (unmatchedstatement -> IF LPAREN conditional RPAREN statement ELSE unmatchedstatement .)
    IF              reduce using rule 34 (unmatchedstatement -> IF LPAREN conditional RPAREN statement ELSE unmatchedstatement .)
    TYPE            reduce using rule 34 (unmatchedstatement -> IF LPAREN conditional RPAREN statement ELSE unmatchedstatement .)
    WHILE           reduce using rule 34 (unmatchedstatement -> IF LPAREN conditional RPAREN statement ELSE unmatchedstatement .)
    RETURN          reduce using rule 34 (unmatchedstatement -> IF LPAREN conditional RPAREN statement ELSE unmatchedstatement .)
    NAME            reduce using rule 34 (unmatchedstatement -> IF LPAREN conditional RPAREN statement ELSE unmatchedstatement .)
    TIMES           reduce using rule 34 (unmatchedstatement -> IF LPAREN conditional RPAREN statement ELSE unmatchedstatement .)
    RBRACE          reduce using rule 34 (unmatchedstatement -> IF LPAREN conditional RPAREN statement ELSE unmatchedstatement .)


state 167

    (37) ifblock -> IF LPAREN conditional RPAREN statement ELSE statement .

    SEMICOLON       reduce using rule 37 (ifblock -> IF LPAREN conditional RPAREN statement ELSE statement .)
    IF              reduce using rule 37 (ifblock -> IF LPAREN conditional RPAREN statement ELSE statement .)
    TYPE            reduce using rule 37 (ifblock -> IF LPAREN conditional RPAREN statement ELSE statement .)
    WHILE           reduce using rule 37 (ifblock -> IF LPAREN conditional RPAREN statement ELSE statement .)
    RETURN          reduce using rule 37 (ifblock -> IF LPAREN conditional RPAREN statement ELSE statement .)
    NAME            reduce using rule 37 (ifblock -> IF LPAREN conditional RPAREN statement ELSE statement .)
    TIMES           reduce using rule 37 (ifblock -> IF LPAREN conditional RPAREN statement ELSE statement .)
    RBRACE          reduce using rule 37 (ifblock -> IF LPAREN conditional RPAREN statement ELSE statement .)
    ELSE            reduce using rule 37 (ifblock -> IF LPAREN conditional RPAREN statement ELSE statement .)


state 168

    (38) ifblock -> IF LPAREN conditional RPAREN statement ELSE LBRACE . fbody RBRACE
    (18) fbody -> . allstatement fbody
    (19) fbody -> .
    (20) allstatement -> . statement
    (21) allstatement -> . unmatchedstatement
    (22) statement -> . assignment
    (23) statement -> . declaration
    (24) statement -> . whileblock
    (25) statement -> . ifblock
    (26) statement -> . returnstatement
    (27) statement -> . functioncall
    (32) statement -> . SEMICOLON
    (33) unmatchedstatement -> . IF LPAREN conditional RPAREN allstatement
    (34) unmatchedstatement -> . IF LPAREN conditional RPAREN statement ELSE unmatchedstatement
    (35) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement
    (36) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE
    (68) assignment -> . assignment_base SEMICOLON
    (61) declaration -> . TYPE dlist1 SEMICOLON
    (41) whileblock -> . WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE
    (37) ifblock -> . IF LPAREN conditional RPAREN statement ELSE statement
    (38) ifblock -> . IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE
    (39) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE
    (40) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement
    (28) returnstatement -> . RETURN expression SEMICOLON
    (29) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (69) assignment_base -> . TIMES pointervar EQUALS expression
    (70) assignment_base -> . NAME EQUALS expression

    RBRACE          reduce using rule 19 (fbody -> .)
    SEMICOLON       shift and go to state 45
    IF              shift and go to state 55
    TYPE            shift and go to state 59
    WHILE           shift and go to state 43
    RETURN          shift and go to state 42
    NAME            shift and go to state 56
    TIMES           shift and go to state 53

    unmatchedstatement             shift and go to state 44
    declaration                    shift and go to state 52
    assignment                     shift and go to state 51
    whileblock                     shift and go to state 46
    ifblock                        shift and go to state 47
    allstatement                   shift and go to state 57
    statement                      shift and go to state 48
    fbody                          shift and go to state 170
    functioncall                   shift and go to state 49
    returnstatement                shift and go to state 58
    assignment_base                shift and go to state 50

state 169

    (35) unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE . ELSE unmatchedstatement
    (36) unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE .
    (39) ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE . ELSE LBRACE fbody RBRACE
    (40) ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE . ELSE statement

    ELSE            shift and go to state 171
    SEMICOLON       reduce using rule 36 (unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE .)
    IF              reduce using rule 36 (unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE .)
    TYPE            reduce using rule 36 (unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE .)
    WHILE           reduce using rule 36 (unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE .)
    RETURN          reduce using rule 36 (unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE .)
    NAME            reduce using rule 36 (unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE .)
    TIMES           reduce using rule 36 (unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE .)
    RBRACE          reduce using rule 36 (unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE .)


state 170

    (38) ifblock -> IF LPAREN conditional RPAREN statement ELSE LBRACE fbody . RBRACE

    RBRACE          shift and go to state 172


state 171

    (35) unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE . unmatchedstatement
    (39) ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE . LBRACE fbody RBRACE
    (40) ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE . statement
    (33) unmatchedstatement -> . IF LPAREN conditional RPAREN allstatement
    (34) unmatchedstatement -> . IF LPAREN conditional RPAREN statement ELSE unmatchedstatement
    (35) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement
    (36) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE
    (22) statement -> . assignment
    (23) statement -> . declaration
    (24) statement -> . whileblock
    (25) statement -> . ifblock
    (26) statement -> . returnstatement
    (27) statement -> . functioncall
    (32) statement -> . SEMICOLON
    (68) assignment -> . assignment_base SEMICOLON
    (61) declaration -> . TYPE dlist1 SEMICOLON
    (41) whileblock -> . WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE
    (37) ifblock -> . IF LPAREN conditional RPAREN statement ELSE statement
    (38) ifblock -> . IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE
    (39) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE
    (40) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement
    (28) returnstatement -> . RETURN expression SEMICOLON
    (29) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (69) assignment_base -> . TIMES pointervar EQUALS expression
    (70) assignment_base -> . NAME EQUALS expression

    LBRACE          shift and go to state 175
    IF              shift and go to state 55
    SEMICOLON       shift and go to state 45
    TYPE            shift and go to state 59
    WHILE           shift and go to state 43
    RETURN          shift and go to state 42
    NAME            shift and go to state 56
    TIMES           shift and go to state 53

    unmatchedstatement             shift and go to state 173
    declaration                    shift and go to state 52
    assignment                     shift and go to state 51
    whileblock                     shift and go to state 46
    ifblock                        shift and go to state 47
    statement                      shift and go to state 174
    functioncall                   shift and go to state 49
    returnstatement                shift and go to state 58
    assignment_base                shift and go to state 50

state 172

    (38) ifblock -> IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE .

    SEMICOLON       reduce using rule 38 (ifblock -> IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE .)
    IF              reduce using rule 38 (ifblock -> IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE .)
    TYPE            reduce using rule 38 (ifblock -> IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE .)
    WHILE           reduce using rule 38 (ifblock -> IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE .)
    RETURN          reduce using rule 38 (ifblock -> IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE .)
    NAME            reduce using rule 38 (ifblock -> IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE .)
    TIMES           reduce using rule 38 (ifblock -> IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE .)
    RBRACE          reduce using rule 38 (ifblock -> IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE .)
    ELSE            reduce using rule 38 (ifblock -> IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE .)


state 173

    (35) unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement .

    SEMICOLON       reduce using rule 35 (unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement .)
    IF              reduce using rule 35 (unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement .)
    TYPE            reduce using rule 35 (unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement .)
    WHILE           reduce using rule 35 (unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement .)
    RETURN          reduce using rule 35 (unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement .)
    NAME            reduce using rule 35 (unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement .)
    TIMES           reduce using rule 35 (unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement .)
    RBRACE          reduce using rule 35 (unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement .)


state 174

    (40) ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement .

    SEMICOLON       reduce using rule 40 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement .)
    IF              reduce using rule 40 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement .)
    TYPE            reduce using rule 40 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement .)
    WHILE           reduce using rule 40 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement .)
    RETURN          reduce using rule 40 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement .)
    NAME            reduce using rule 40 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement .)
    TIMES           reduce using rule 40 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement .)
    RBRACE          reduce using rule 40 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement .)
    ELSE            reduce using rule 40 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement .)


state 175

    (39) ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE . fbody RBRACE
    (18) fbody -> . allstatement fbody
    (19) fbody -> .
    (20) allstatement -> . statement
    (21) allstatement -> . unmatchedstatement
    (22) statement -> . assignment
    (23) statement -> . declaration
    (24) statement -> . whileblock
    (25) statement -> . ifblock
    (26) statement -> . returnstatement
    (27) statement -> . functioncall
    (32) statement -> . SEMICOLON
    (33) unmatchedstatement -> . IF LPAREN conditional RPAREN allstatement
    (34) unmatchedstatement -> . IF LPAREN conditional RPAREN statement ELSE unmatchedstatement
    (35) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement
    (36) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE
    (68) assignment -> . assignment_base SEMICOLON
    (61) declaration -> . TYPE dlist1 SEMICOLON
    (41) whileblock -> . WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE
    (37) ifblock -> . IF LPAREN conditional RPAREN statement ELSE statement
    (38) ifblock -> . IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE
    (39) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE
    (40) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement
    (28) returnstatement -> . RETURN expression SEMICOLON
    (29) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (69) assignment_base -> . TIMES pointervar EQUALS expression
    (70) assignment_base -> . NAME EQUALS expression

    RBRACE          reduce using rule 19 (fbody -> .)
    SEMICOLON       shift and go to state 45
    IF              shift and go to state 55
    TYPE            shift and go to state 59
    WHILE           shift and go to state 43
    RETURN          shift and go to state 42
    NAME            shift and go to state 56
    TIMES           shift and go to state 53

    unmatchedstatement             shift and go to state 44
    declaration                    shift and go to state 52
    assignment                     shift and go to state 51
    whileblock                     shift and go to state 46
    ifblock                        shift and go to state 47
    allstatement                   shift and go to state 57
    statement                      shift and go to state 48
    fbody                          shift and go to state 176
    functioncall                   shift and go to state 49
    returnstatement                shift and go to state 58
    assignment_base                shift and go to state 50

state 176

    (39) ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody . RBRACE

    RBRACE          shift and go to state 177


state 177

    (39) ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE .

    SEMICOLON       reduce using rule 39 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE .)
    IF              reduce using rule 39 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE .)
    TYPE            reduce using rule 39 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE .)
    WHILE           reduce using rule 39 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE .)
    RETURN          reduce using rule 39 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE .)
    NAME            reduce using rule 39 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE .)
    TIMES           reduce using rule 39 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE .)
    RBRACE          reduce using rule 39 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE .)
    ELSE            reduce using rule 39 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE .)

