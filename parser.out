Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> master
Rule 1     master -> program
Rule 2     program -> function
Rule 3     program -> function program
Rule 4     program -> declaration program
Rule 5     program -> prototype program
Rule 6     prototype -> TYPE NAME LPAREN paramlist RPAREN SEMICOLON
Rule 7     function -> TYPE NAME LPAREN paramlist RPAREN LBRACE fbody RBRACE
Rule 8     paramlist -> <empty>
Rule 9     paramlist -> TYPE NAME paramlist2
Rule 10    paramlist -> TYPE specialvar paramlist2
Rule 11    paramlist2 -> <empty>
Rule 12    paramlist2 -> COMMA TYPE NAME paramlist2
Rule 13    paramlist2 -> COMMA TYPE specialvar paramlist2
Rule 14    fbody -> allstatement fbody
Rule 15    fbody -> <empty>
Rule 16    allstatement -> statement
Rule 17    allstatement -> unmatchedstatement
Rule 18    statement -> assignment
Rule 19    statement -> declaration
Rule 20    statement -> whileblock
Rule 21    statement -> ifblock
Rule 22    statement -> returnstatement
Rule 23    statement -> functioncall
Rule 24    returnstatement -> RETURN expression SEMICOLON
Rule 25    functioncall -> NAME LPAREN arguments RPAREN SEMICOLON
Rule 26    arguments -> expression
Rule 27    arguments -> expression COMMA arguments
Rule 28    statement -> SEMICOLON
Rule 29    unmatchedstatement -> IF LPAREN conditional RPAREN allstatement
Rule 30    unmatchedstatement -> IF LPAREN conditional RPAREN statement ELSE unmatchedstatement
Rule 31    unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement
Rule 32    unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE
Rule 33    ifblock -> IF LPAREN conditional RPAREN statement ELSE statement
Rule 34    ifblock -> IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE
Rule 35    ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE
Rule 36    ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement
Rule 37    whileblock -> WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE
Rule 38    conditional -> LPAREN conditional RPAREN
Rule 39    conditional -> conditionbase
Rule 40    conditional -> NOT LPAREN conditional RPAREN
Rule 41    conditional -> conditional LESSTHANEQ conditional
Rule 42    conditional -> conditional GREATERTHANEQ conditional
Rule 43    conditional -> conditional UNEQUAL conditional
Rule 44    conditional -> conditional EQUALCHECK conditional
Rule 45    conditional -> conditional LESSTHAN conditional
Rule 46    conditional -> conditional GREATERTHAN conditional
Rule 47    conditional -> conditional ANDOPERATOR conditional
Rule 48    conditional -> conditional OROPERATOR conditional
Rule 49    conditionbase -> CS LESSTHANEQ CS
Rule 50    conditionbase -> CS GREATERTHANEQ CS
Rule 51    conditionbase -> CS UNEQUAL CS
Rule 52    conditionbase -> CS EQUALCHECK CS
Rule 53    conditionbase -> CS LESSTHAN CS
Rule 54    conditionbase -> CS GREATERTHAN CS
Rule 55    CS -> expression
Rule 56    CS -> NOT LPAREN expression RPAREN
Rule 57    declaration -> TYPE dlist1 SEMICOLON
Rule 58    dlist1 -> NAME
Rule 59    dlist1 -> NAME COMMA dlist1
Rule 60    dlist1 -> specialvar
Rule 61    dlist1 -> specialvar COMMA dlist1
Rule 62    specialvar -> TIMES specialvar
Rule 63    specialvar -> TIMES NAME
Rule 64    assignment -> assignment_base SEMICOLON
Rule 65    assignment_base -> TIMES pointervar EQUALS expression
Rule 66    assignment_base -> NAME EQUALS expression
Rule 67    expression -> expression PLUS expression
Rule 68    expression -> expression MINUS expression
Rule 69    expression -> expression DIVIDE expression
Rule 70    expression -> expression TIMES expression
Rule 71    expression -> MINUS expression
Rule 72    expression -> LPAREN expression RPAREN
Rule 73    expression -> functioncall
Rule 74    expression -> allnumbers
Rule 75    allnumbers -> FLOAT
Rule 76    allnumbers -> NUMBER
Rule 77    expression -> pointervar
Rule 78    pointervar -> TIMES pointervar
Rule 79    pointervar -> ADDROF pointervar
Rule 80    pointervar -> NAME

Terminals, with rules where they appear

ADDROF               : 79
ANDOPERATOR          : 47
COMMA                : 12 13 27 59 61
DIVIDE               : 69
ELSE                 : 30 31 33 34 35 36
EQUALCHECK           : 44 52
EQUALS               : 65 66
FLOAT                : 75
GREATERTHAN          : 46 54
GREATERTHANEQ        : 42 50
IF                   : 29 30 31 32 33 34 35 36
LBRACE               : 7 31 32 34 35 35 36 37
LESSTHAN             : 45 53
LESSTHANEQ           : 41 49
LPAREN               : 6 7 25 29 30 31 32 33 34 35 36 37 38 40 56 72
MINUS                : 68 71
NAME                 : 6 7 9 12 25 58 59 63 66 80
NOT                  : 40 56
NUMBER               : 76
OROPERATOR           : 48
PLUS                 : 67
RBRACE               : 7 31 32 34 35 35 36 37
RETURN               : 24
RPAREN               : 6 7 25 29 30 31 32 33 34 35 36 37 38 40 56 72
SEMICOLON            : 6 24 25 28 57 64
TIMES                : 62 63 65 70 78
TYPE                 : 6 7 9 10 12 13 57
UNEQUAL              : 43 51
WHILE                : 37
error                : 

Nonterminals, with rules where they appear

CS                   : 49 49 50 50 51 51 52 52 53 53 54 54
allnumbers           : 74
allstatement         : 14 29
arguments            : 25 27
assignment           : 18
assignment_base      : 64
conditional          : 29 30 31 32 33 34 35 36 37 38 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48
conditionbase        : 39
declaration          : 4 19
dlist1               : 57 59 61
expression           : 24 26 27 55 56 65 66 67 67 68 68 69 69 70 70 71 72
fbody                : 7 14 31 32 34 35 35 36 37
function             : 2 3
functioncall         : 23 73
ifblock              : 21
master               : 0
paramlist            : 6 7
paramlist2           : 9 10 12 13
pointervar           : 65 77 78 79
program              : 1 3 4 5
prototype            : 5
returnstatement      : 22
specialvar           : 10 13 60 61 62
statement            : 16 30 33 33 34 36
unmatchedstatement   : 17 30 31
whileblock           : 20

Parsing method: LALR

state 0

    (0) S' -> . master
    (1) master -> . program
    (2) program -> . function
    (3) program -> . function program
    (4) program -> . declaration program
    (5) program -> . prototype program
    (7) function -> . TYPE NAME LPAREN paramlist RPAREN LBRACE fbody RBRACE
    (57) declaration -> . TYPE dlist1 SEMICOLON
    (6) prototype -> . TYPE NAME LPAREN paramlist RPAREN SEMICOLON

    TYPE            shift and go to state 6

    function                       shift and go to state 1
    program                        shift and go to state 2
    master                         shift and go to state 3
    declaration                    shift and go to state 4
    prototype                      shift and go to state 5

state 1

    (2) program -> function .
    (3) program -> function . program
    (2) program -> . function
    (3) program -> . function program
    (4) program -> . declaration program
    (5) program -> . prototype program
    (7) function -> . TYPE NAME LPAREN paramlist RPAREN LBRACE fbody RBRACE
    (57) declaration -> . TYPE dlist1 SEMICOLON
    (6) prototype -> . TYPE NAME LPAREN paramlist RPAREN SEMICOLON

    $end            reduce using rule 2 (program -> function .)
    TYPE            shift and go to state 6

    function                       shift and go to state 1
    declaration                    shift and go to state 4
    program                        shift and go to state 7
    prototype                      shift and go to state 5

state 2

    (1) master -> program .

    $end            reduce using rule 1 (master -> program .)


state 3

    (0) S' -> master .



state 4

    (4) program -> declaration . program
    (2) program -> . function
    (3) program -> . function program
    (4) program -> . declaration program
    (5) program -> . prototype program
    (7) function -> . TYPE NAME LPAREN paramlist RPAREN LBRACE fbody RBRACE
    (57) declaration -> . TYPE dlist1 SEMICOLON
    (6) prototype -> . TYPE NAME LPAREN paramlist RPAREN SEMICOLON

    TYPE            shift and go to state 6

    function                       shift and go to state 1
    declaration                    shift and go to state 4
    program                        shift and go to state 8
    prototype                      shift and go to state 5

state 5

    (5) program -> prototype . program
    (2) program -> . function
    (3) program -> . function program
    (4) program -> . declaration program
    (5) program -> . prototype program
    (7) function -> . TYPE NAME LPAREN paramlist RPAREN LBRACE fbody RBRACE
    (57) declaration -> . TYPE dlist1 SEMICOLON
    (6) prototype -> . TYPE NAME LPAREN paramlist RPAREN SEMICOLON

    TYPE            shift and go to state 6

    function                       shift and go to state 1
    declaration                    shift and go to state 4
    program                        shift and go to state 9
    prototype                      shift and go to state 5

state 6

    (7) function -> TYPE . NAME LPAREN paramlist RPAREN LBRACE fbody RBRACE
    (57) declaration -> TYPE . dlist1 SEMICOLON
    (6) prototype -> TYPE . NAME LPAREN paramlist RPAREN SEMICOLON
    (58) dlist1 -> . NAME
    (59) dlist1 -> . NAME COMMA dlist1
    (60) dlist1 -> . specialvar
    (61) dlist1 -> . specialvar COMMA dlist1
    (62) specialvar -> . TIMES specialvar
    (63) specialvar -> . TIMES NAME

    NAME            shift and go to state 10
    TIMES           shift and go to state 11

    specialvar                     shift and go to state 13
    dlist1                         shift and go to state 12

state 7

    (3) program -> function program .

    $end            reduce using rule 3 (program -> function program .)


state 8

    (4) program -> declaration program .

    $end            reduce using rule 4 (program -> declaration program .)


state 9

    (5) program -> prototype program .

    $end            reduce using rule 5 (program -> prototype program .)


state 10

    (7) function -> TYPE NAME . LPAREN paramlist RPAREN LBRACE fbody RBRACE
    (6) prototype -> TYPE NAME . LPAREN paramlist RPAREN SEMICOLON
    (58) dlist1 -> NAME .
    (59) dlist1 -> NAME . COMMA dlist1

    LPAREN          shift and go to state 15
    SEMICOLON       reduce using rule 58 (dlist1 -> NAME .)
    COMMA           shift and go to state 14


state 11

    (62) specialvar -> TIMES . specialvar
    (63) specialvar -> TIMES . NAME
    (62) specialvar -> . TIMES specialvar
    (63) specialvar -> . TIMES NAME

    NAME            shift and go to state 17
    TIMES           shift and go to state 11

    specialvar                     shift and go to state 16

state 12

    (57) declaration -> TYPE dlist1 . SEMICOLON

    SEMICOLON       shift and go to state 18


state 13

    (60) dlist1 -> specialvar .
    (61) dlist1 -> specialvar . COMMA dlist1

    SEMICOLON       reduce using rule 60 (dlist1 -> specialvar .)
    COMMA           shift and go to state 19


state 14

    (59) dlist1 -> NAME COMMA . dlist1
    (58) dlist1 -> . NAME
    (59) dlist1 -> . NAME COMMA dlist1
    (60) dlist1 -> . specialvar
    (61) dlist1 -> . specialvar COMMA dlist1
    (62) specialvar -> . TIMES specialvar
    (63) specialvar -> . TIMES NAME

    NAME            shift and go to state 21
    TIMES           shift and go to state 11

    specialvar                     shift and go to state 13
    dlist1                         shift and go to state 20

state 15

    (7) function -> TYPE NAME LPAREN . paramlist RPAREN LBRACE fbody RBRACE
    (6) prototype -> TYPE NAME LPAREN . paramlist RPAREN SEMICOLON
    (8) paramlist -> .
    (9) paramlist -> . TYPE NAME paramlist2
    (10) paramlist -> . TYPE specialvar paramlist2

    RPAREN          reduce using rule 8 (paramlist -> .)
    TYPE            shift and go to state 23

    paramlist                      shift and go to state 22

state 16

    (62) specialvar -> TIMES specialvar .

    COMMA           reduce using rule 62 (specialvar -> TIMES specialvar .)
    SEMICOLON       reduce using rule 62 (specialvar -> TIMES specialvar .)
    RPAREN          reduce using rule 62 (specialvar -> TIMES specialvar .)


state 17

    (63) specialvar -> TIMES NAME .

    COMMA           reduce using rule 63 (specialvar -> TIMES NAME .)
    SEMICOLON       reduce using rule 63 (specialvar -> TIMES NAME .)
    RPAREN          reduce using rule 63 (specialvar -> TIMES NAME .)


state 18

    (57) declaration -> TYPE dlist1 SEMICOLON .

    ELSE            reduce using rule 57 (declaration -> TYPE dlist1 SEMICOLON .)
    SEMICOLON       reduce using rule 57 (declaration -> TYPE dlist1 SEMICOLON .)
    IF              reduce using rule 57 (declaration -> TYPE dlist1 SEMICOLON .)
    TYPE            reduce using rule 57 (declaration -> TYPE dlist1 SEMICOLON .)
    WHILE           reduce using rule 57 (declaration -> TYPE dlist1 SEMICOLON .)
    RETURN          reduce using rule 57 (declaration -> TYPE dlist1 SEMICOLON .)
    NAME            reduce using rule 57 (declaration -> TYPE dlist1 SEMICOLON .)
    TIMES           reduce using rule 57 (declaration -> TYPE dlist1 SEMICOLON .)
    RBRACE          reduce using rule 57 (declaration -> TYPE dlist1 SEMICOLON .)


state 19

    (61) dlist1 -> specialvar COMMA . dlist1
    (58) dlist1 -> . NAME
    (59) dlist1 -> . NAME COMMA dlist1
    (60) dlist1 -> . specialvar
    (61) dlist1 -> . specialvar COMMA dlist1
    (62) specialvar -> . TIMES specialvar
    (63) specialvar -> . TIMES NAME

    NAME            shift and go to state 21
    TIMES           shift and go to state 11

    specialvar                     shift and go to state 13
    dlist1                         shift and go to state 24

state 20

    (59) dlist1 -> NAME COMMA dlist1 .

    SEMICOLON       reduce using rule 59 (dlist1 -> NAME COMMA dlist1 .)


state 21

    (58) dlist1 -> NAME .
    (59) dlist1 -> NAME . COMMA dlist1

    SEMICOLON       reduce using rule 58 (dlist1 -> NAME .)
    COMMA           shift and go to state 14


state 22

    (7) function -> TYPE NAME LPAREN paramlist . RPAREN LBRACE fbody RBRACE
    (6) prototype -> TYPE NAME LPAREN paramlist . RPAREN SEMICOLON

    RPAREN          shift and go to state 25


state 23

    (9) paramlist -> TYPE . NAME paramlist2
    (10) paramlist -> TYPE . specialvar paramlist2
    (62) specialvar -> . TIMES specialvar
    (63) specialvar -> . TIMES NAME

    NAME            shift and go to state 27
    TIMES           shift and go to state 11

    specialvar                     shift and go to state 26

state 24

    (61) dlist1 -> specialvar COMMA dlist1 .

    SEMICOLON       reduce using rule 61 (dlist1 -> specialvar COMMA dlist1 .)


state 25

    (7) function -> TYPE NAME LPAREN paramlist RPAREN . LBRACE fbody RBRACE
    (6) prototype -> TYPE NAME LPAREN paramlist RPAREN . SEMICOLON

    LBRACE          shift and go to state 28
    SEMICOLON       shift and go to state 29


state 26

    (10) paramlist -> TYPE specialvar . paramlist2
    (11) paramlist2 -> .
    (12) paramlist2 -> . COMMA TYPE NAME paramlist2
    (13) paramlist2 -> . COMMA TYPE specialvar paramlist2

    RPAREN          reduce using rule 11 (paramlist2 -> .)
    COMMA           shift and go to state 30

    paramlist2                     shift and go to state 31

state 27

    (9) paramlist -> TYPE NAME . paramlist2
    (11) paramlist2 -> .
    (12) paramlist2 -> . COMMA TYPE NAME paramlist2
    (13) paramlist2 -> . COMMA TYPE specialvar paramlist2

    RPAREN          reduce using rule 11 (paramlist2 -> .)
    COMMA           shift and go to state 30

    paramlist2                     shift and go to state 32

state 28

    (7) function -> TYPE NAME LPAREN paramlist RPAREN LBRACE . fbody RBRACE
    (14) fbody -> . allstatement fbody
    (15) fbody -> .
    (16) allstatement -> . statement
    (17) allstatement -> . unmatchedstatement
    (18) statement -> . assignment
    (19) statement -> . declaration
    (20) statement -> . whileblock
    (21) statement -> . ifblock
    (22) statement -> . returnstatement
    (23) statement -> . functioncall
    (28) statement -> . SEMICOLON
    (29) unmatchedstatement -> . IF LPAREN conditional RPAREN allstatement
    (30) unmatchedstatement -> . IF LPAREN conditional RPAREN statement ELSE unmatchedstatement
    (31) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement
    (32) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE
    (64) assignment -> . assignment_base SEMICOLON
    (57) declaration -> . TYPE dlist1 SEMICOLON
    (37) whileblock -> . WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE
    (33) ifblock -> . IF LPAREN conditional RPAREN statement ELSE statement
    (34) ifblock -> . IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE
    (35) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE
    (36) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement
    (24) returnstatement -> . RETURN expression SEMICOLON
    (25) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (65) assignment_base -> . TIMES pointervar EQUALS expression
    (66) assignment_base -> . NAME EQUALS expression

    RBRACE          reduce using rule 15 (fbody -> .)
    SEMICOLON       shift and go to state 36
    IF              shift and go to state 46
    TYPE            shift and go to state 50
    WHILE           shift and go to state 34
    RETURN          shift and go to state 33
    NAME            shift and go to state 47
    TIMES           shift and go to state 44

    unmatchedstatement             shift and go to state 35
    assignment                     shift and go to state 42
    declaration                    shift and go to state 43
    whileblock                     shift and go to state 37
    ifblock                        shift and go to state 38
    allstatement                   shift and go to state 48
    statement                      shift and go to state 39
    fbody                          shift and go to state 45
    functioncall                   shift and go to state 40
    returnstatement                shift and go to state 49
    assignment_base                shift and go to state 41

state 29

    (6) prototype -> TYPE NAME LPAREN paramlist RPAREN SEMICOLON .

    TYPE            reduce using rule 6 (prototype -> TYPE NAME LPAREN paramlist RPAREN SEMICOLON .)


state 30

    (12) paramlist2 -> COMMA . TYPE NAME paramlist2
    (13) paramlist2 -> COMMA . TYPE specialvar paramlist2

    TYPE            shift and go to state 51


state 31

    (10) paramlist -> TYPE specialvar paramlist2 .

    RPAREN          reduce using rule 10 (paramlist -> TYPE specialvar paramlist2 .)


state 32

    (9) paramlist -> TYPE NAME paramlist2 .

    RPAREN          reduce using rule 9 (paramlist -> TYPE NAME paramlist2 .)


state 33

    (24) returnstatement -> RETURN . expression SEMICOLON
    (67) expression -> . expression PLUS expression
    (68) expression -> . expression MINUS expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression TIMES expression
    (71) expression -> . MINUS expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . functioncall
    (74) expression -> . allnumbers
    (77) expression -> . pointervar
    (25) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (75) allnumbers -> . FLOAT
    (76) allnumbers -> . NUMBER
    (78) pointervar -> . TIMES pointervar
    (79) pointervar -> . ADDROF pointervar
    (80) pointervar -> . NAME

    MINUS           shift and go to state 61
    LPAREN          shift and go to state 59
    NAME            shift and go to state 62
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 56
    TIMES           shift and go to state 57
    ADDROF          shift and go to state 53

    functioncall                   shift and go to state 58
    pointervar                     shift and go to state 55
    allnumbers                     shift and go to state 54
    expression                     shift and go to state 60

state 34

    (37) whileblock -> WHILE . LPAREN conditional RPAREN LBRACE fbody RBRACE

    LPAREN          shift and go to state 63


state 35

    (17) allstatement -> unmatchedstatement .

    SEMICOLON       reduce using rule 17 (allstatement -> unmatchedstatement .)
    IF              reduce using rule 17 (allstatement -> unmatchedstatement .)
    TYPE            reduce using rule 17 (allstatement -> unmatchedstatement .)
    WHILE           reduce using rule 17 (allstatement -> unmatchedstatement .)
    RETURN          reduce using rule 17 (allstatement -> unmatchedstatement .)
    NAME            reduce using rule 17 (allstatement -> unmatchedstatement .)
    TIMES           reduce using rule 17 (allstatement -> unmatchedstatement .)
    RBRACE          reduce using rule 17 (allstatement -> unmatchedstatement .)


state 36

    (28) statement -> SEMICOLON .

    SEMICOLON       reduce using rule 28 (statement -> SEMICOLON .)
    IF              reduce using rule 28 (statement -> SEMICOLON .)
    TYPE            reduce using rule 28 (statement -> SEMICOLON .)
    WHILE           reduce using rule 28 (statement -> SEMICOLON .)
    RETURN          reduce using rule 28 (statement -> SEMICOLON .)
    NAME            reduce using rule 28 (statement -> SEMICOLON .)
    TIMES           reduce using rule 28 (statement -> SEMICOLON .)
    RBRACE          reduce using rule 28 (statement -> SEMICOLON .)
    ELSE            reduce using rule 28 (statement -> SEMICOLON .)


state 37

    (20) statement -> whileblock .

    SEMICOLON       reduce using rule 20 (statement -> whileblock .)
    IF              reduce using rule 20 (statement -> whileblock .)
    TYPE            reduce using rule 20 (statement -> whileblock .)
    WHILE           reduce using rule 20 (statement -> whileblock .)
    RETURN          reduce using rule 20 (statement -> whileblock .)
    NAME            reduce using rule 20 (statement -> whileblock .)
    TIMES           reduce using rule 20 (statement -> whileblock .)
    RBRACE          reduce using rule 20 (statement -> whileblock .)
    ELSE            reduce using rule 20 (statement -> whileblock .)


state 38

    (21) statement -> ifblock .

    SEMICOLON       reduce using rule 21 (statement -> ifblock .)
    IF              reduce using rule 21 (statement -> ifblock .)
    TYPE            reduce using rule 21 (statement -> ifblock .)
    WHILE           reduce using rule 21 (statement -> ifblock .)
    RETURN          reduce using rule 21 (statement -> ifblock .)
    NAME            reduce using rule 21 (statement -> ifblock .)
    TIMES           reduce using rule 21 (statement -> ifblock .)
    RBRACE          reduce using rule 21 (statement -> ifblock .)
    ELSE            reduce using rule 21 (statement -> ifblock .)


state 39

    (16) allstatement -> statement .

    SEMICOLON       reduce using rule 16 (allstatement -> statement .)
    IF              reduce using rule 16 (allstatement -> statement .)
    TYPE            reduce using rule 16 (allstatement -> statement .)
    WHILE           reduce using rule 16 (allstatement -> statement .)
    RETURN          reduce using rule 16 (allstatement -> statement .)
    NAME            reduce using rule 16 (allstatement -> statement .)
    TIMES           reduce using rule 16 (allstatement -> statement .)
    RBRACE          reduce using rule 16 (allstatement -> statement .)


state 40

    (23) statement -> functioncall .

    SEMICOLON       reduce using rule 23 (statement -> functioncall .)
    IF              reduce using rule 23 (statement -> functioncall .)
    TYPE            reduce using rule 23 (statement -> functioncall .)
    WHILE           reduce using rule 23 (statement -> functioncall .)
    RETURN          reduce using rule 23 (statement -> functioncall .)
    NAME            reduce using rule 23 (statement -> functioncall .)
    TIMES           reduce using rule 23 (statement -> functioncall .)
    RBRACE          reduce using rule 23 (statement -> functioncall .)
    ELSE            reduce using rule 23 (statement -> functioncall .)


state 41

    (64) assignment -> assignment_base . SEMICOLON

    SEMICOLON       shift and go to state 64


state 42

    (18) statement -> assignment .

    SEMICOLON       reduce using rule 18 (statement -> assignment .)
    IF              reduce using rule 18 (statement -> assignment .)
    TYPE            reduce using rule 18 (statement -> assignment .)
    WHILE           reduce using rule 18 (statement -> assignment .)
    RETURN          reduce using rule 18 (statement -> assignment .)
    NAME            reduce using rule 18 (statement -> assignment .)
    TIMES           reduce using rule 18 (statement -> assignment .)
    RBRACE          reduce using rule 18 (statement -> assignment .)
    ELSE            reduce using rule 18 (statement -> assignment .)


state 43

    (19) statement -> declaration .

    SEMICOLON       reduce using rule 19 (statement -> declaration .)
    IF              reduce using rule 19 (statement -> declaration .)
    TYPE            reduce using rule 19 (statement -> declaration .)
    WHILE           reduce using rule 19 (statement -> declaration .)
    RETURN          reduce using rule 19 (statement -> declaration .)
    NAME            reduce using rule 19 (statement -> declaration .)
    TIMES           reduce using rule 19 (statement -> declaration .)
    RBRACE          reduce using rule 19 (statement -> declaration .)
    ELSE            reduce using rule 19 (statement -> declaration .)


state 44

    (65) assignment_base -> TIMES . pointervar EQUALS expression
    (78) pointervar -> . TIMES pointervar
    (79) pointervar -> . ADDROF pointervar
    (80) pointervar -> . NAME

    TIMES           shift and go to state 57
    ADDROF          shift and go to state 53
    NAME            shift and go to state 65

    pointervar                     shift and go to state 66

state 45

    (7) function -> TYPE NAME LPAREN paramlist RPAREN LBRACE fbody . RBRACE

    RBRACE          shift and go to state 67


state 46

    (29) unmatchedstatement -> IF . LPAREN conditional RPAREN allstatement
    (30) unmatchedstatement -> IF . LPAREN conditional RPAREN statement ELSE unmatchedstatement
    (31) unmatchedstatement -> IF . LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement
    (32) unmatchedstatement -> IF . LPAREN conditional RPAREN LBRACE fbody RBRACE
    (33) ifblock -> IF . LPAREN conditional RPAREN statement ELSE statement
    (34) ifblock -> IF . LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE
    (35) ifblock -> IF . LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE
    (36) ifblock -> IF . LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement

    LPAREN          shift and go to state 68


state 47

    (25) functioncall -> NAME . LPAREN arguments RPAREN SEMICOLON
    (66) assignment_base -> NAME . EQUALS expression

    LPAREN          shift and go to state 70
    EQUALS          shift and go to state 69


state 48

    (14) fbody -> allstatement . fbody
    (14) fbody -> . allstatement fbody
    (15) fbody -> .
    (16) allstatement -> . statement
    (17) allstatement -> . unmatchedstatement
    (18) statement -> . assignment
    (19) statement -> . declaration
    (20) statement -> . whileblock
    (21) statement -> . ifblock
    (22) statement -> . returnstatement
    (23) statement -> . functioncall
    (28) statement -> . SEMICOLON
    (29) unmatchedstatement -> . IF LPAREN conditional RPAREN allstatement
    (30) unmatchedstatement -> . IF LPAREN conditional RPAREN statement ELSE unmatchedstatement
    (31) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement
    (32) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE
    (64) assignment -> . assignment_base SEMICOLON
    (57) declaration -> . TYPE dlist1 SEMICOLON
    (37) whileblock -> . WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE
    (33) ifblock -> . IF LPAREN conditional RPAREN statement ELSE statement
    (34) ifblock -> . IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE
    (35) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE
    (36) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement
    (24) returnstatement -> . RETURN expression SEMICOLON
    (25) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (65) assignment_base -> . TIMES pointervar EQUALS expression
    (66) assignment_base -> . NAME EQUALS expression

    RBRACE          reduce using rule 15 (fbody -> .)
    SEMICOLON       shift and go to state 36
    IF              shift and go to state 46
    TYPE            shift and go to state 50
    WHILE           shift and go to state 34
    RETURN          shift and go to state 33
    NAME            shift and go to state 47
    TIMES           shift and go to state 44

    unmatchedstatement             shift and go to state 35
    assignment                     shift and go to state 42
    fbody                          shift and go to state 71
    whileblock                     shift and go to state 37
    ifblock                        shift and go to state 38
    allstatement                   shift and go to state 48
    statement                      shift and go to state 39
    declaration                    shift and go to state 43
    functioncall                   shift and go to state 40
    returnstatement                shift and go to state 49
    assignment_base                shift and go to state 41

state 49

    (22) statement -> returnstatement .

    SEMICOLON       reduce using rule 22 (statement -> returnstatement .)
    IF              reduce using rule 22 (statement -> returnstatement .)
    TYPE            reduce using rule 22 (statement -> returnstatement .)
    WHILE           reduce using rule 22 (statement -> returnstatement .)
    RETURN          reduce using rule 22 (statement -> returnstatement .)
    NAME            reduce using rule 22 (statement -> returnstatement .)
    TIMES           reduce using rule 22 (statement -> returnstatement .)
    RBRACE          reduce using rule 22 (statement -> returnstatement .)
    ELSE            reduce using rule 22 (statement -> returnstatement .)


state 50

    (57) declaration -> TYPE . dlist1 SEMICOLON
    (58) dlist1 -> . NAME
    (59) dlist1 -> . NAME COMMA dlist1
    (60) dlist1 -> . specialvar
    (61) dlist1 -> . specialvar COMMA dlist1
    (62) specialvar -> . TIMES specialvar
    (63) specialvar -> . TIMES NAME

    NAME            shift and go to state 21
    TIMES           shift and go to state 11

    specialvar                     shift and go to state 13
    dlist1                         shift and go to state 12

state 51

    (12) paramlist2 -> COMMA TYPE . NAME paramlist2
    (13) paramlist2 -> COMMA TYPE . specialvar paramlist2
    (62) specialvar -> . TIMES specialvar
    (63) specialvar -> . TIMES NAME

    NAME            shift and go to state 72
    TIMES           shift and go to state 11

    specialvar                     shift and go to state 73

state 52

    (75) allnumbers -> FLOAT .

    PLUS            reduce using rule 75 (allnumbers -> FLOAT .)
    MINUS           reduce using rule 75 (allnumbers -> FLOAT .)
    DIVIDE          reduce using rule 75 (allnumbers -> FLOAT .)
    TIMES           reduce using rule 75 (allnumbers -> FLOAT .)
    SEMICOLON       reduce using rule 75 (allnumbers -> FLOAT .)
    RPAREN          reduce using rule 75 (allnumbers -> FLOAT .)
    LESSTHANEQ      reduce using rule 75 (allnumbers -> FLOAT .)
    GREATERTHANEQ   reduce using rule 75 (allnumbers -> FLOAT .)
    UNEQUAL         reduce using rule 75 (allnumbers -> FLOAT .)
    EQUALCHECK      reduce using rule 75 (allnumbers -> FLOAT .)
    LESSTHAN        reduce using rule 75 (allnumbers -> FLOAT .)
    GREATERTHAN     reduce using rule 75 (allnumbers -> FLOAT .)
    COMMA           reduce using rule 75 (allnumbers -> FLOAT .)
    ANDOPERATOR     reduce using rule 75 (allnumbers -> FLOAT .)
    OROPERATOR      reduce using rule 75 (allnumbers -> FLOAT .)


state 53

    (79) pointervar -> ADDROF . pointervar
    (78) pointervar -> . TIMES pointervar
    (79) pointervar -> . ADDROF pointervar
    (80) pointervar -> . NAME

    TIMES           shift and go to state 57
    ADDROF          shift and go to state 53
    NAME            shift and go to state 65

    pointervar                     shift and go to state 74

state 54

    (74) expression -> allnumbers .

    PLUS            reduce using rule 74 (expression -> allnumbers .)
    MINUS           reduce using rule 74 (expression -> allnumbers .)
    DIVIDE          reduce using rule 74 (expression -> allnumbers .)
    TIMES           reduce using rule 74 (expression -> allnumbers .)
    SEMICOLON       reduce using rule 74 (expression -> allnumbers .)
    RPAREN          reduce using rule 74 (expression -> allnumbers .)
    LESSTHANEQ      reduce using rule 74 (expression -> allnumbers .)
    GREATERTHANEQ   reduce using rule 74 (expression -> allnumbers .)
    UNEQUAL         reduce using rule 74 (expression -> allnumbers .)
    EQUALCHECK      reduce using rule 74 (expression -> allnumbers .)
    LESSTHAN        reduce using rule 74 (expression -> allnumbers .)
    GREATERTHAN     reduce using rule 74 (expression -> allnumbers .)
    COMMA           reduce using rule 74 (expression -> allnumbers .)
    ANDOPERATOR     reduce using rule 74 (expression -> allnumbers .)
    OROPERATOR      reduce using rule 74 (expression -> allnumbers .)


state 55

    (77) expression -> pointervar .

    PLUS            reduce using rule 77 (expression -> pointervar .)
    MINUS           reduce using rule 77 (expression -> pointervar .)
    DIVIDE          reduce using rule 77 (expression -> pointervar .)
    TIMES           reduce using rule 77 (expression -> pointervar .)
    SEMICOLON       reduce using rule 77 (expression -> pointervar .)
    RPAREN          reduce using rule 77 (expression -> pointervar .)
    LESSTHANEQ      reduce using rule 77 (expression -> pointervar .)
    GREATERTHANEQ   reduce using rule 77 (expression -> pointervar .)
    UNEQUAL         reduce using rule 77 (expression -> pointervar .)
    EQUALCHECK      reduce using rule 77 (expression -> pointervar .)
    LESSTHAN        reduce using rule 77 (expression -> pointervar .)
    GREATERTHAN     reduce using rule 77 (expression -> pointervar .)
    COMMA           reduce using rule 77 (expression -> pointervar .)
    ANDOPERATOR     reduce using rule 77 (expression -> pointervar .)
    OROPERATOR      reduce using rule 77 (expression -> pointervar .)


state 56

    (76) allnumbers -> NUMBER .

    PLUS            reduce using rule 76 (allnumbers -> NUMBER .)
    MINUS           reduce using rule 76 (allnumbers -> NUMBER .)
    DIVIDE          reduce using rule 76 (allnumbers -> NUMBER .)
    TIMES           reduce using rule 76 (allnumbers -> NUMBER .)
    SEMICOLON       reduce using rule 76 (allnumbers -> NUMBER .)
    RPAREN          reduce using rule 76 (allnumbers -> NUMBER .)
    LESSTHANEQ      reduce using rule 76 (allnumbers -> NUMBER .)
    GREATERTHANEQ   reduce using rule 76 (allnumbers -> NUMBER .)
    UNEQUAL         reduce using rule 76 (allnumbers -> NUMBER .)
    EQUALCHECK      reduce using rule 76 (allnumbers -> NUMBER .)
    LESSTHAN        reduce using rule 76 (allnumbers -> NUMBER .)
    GREATERTHAN     reduce using rule 76 (allnumbers -> NUMBER .)
    COMMA           reduce using rule 76 (allnumbers -> NUMBER .)
    ANDOPERATOR     reduce using rule 76 (allnumbers -> NUMBER .)
    OROPERATOR      reduce using rule 76 (allnumbers -> NUMBER .)


state 57

    (78) pointervar -> TIMES . pointervar
    (78) pointervar -> . TIMES pointervar
    (79) pointervar -> . ADDROF pointervar
    (80) pointervar -> . NAME

    TIMES           shift and go to state 57
    ADDROF          shift and go to state 53
    NAME            shift and go to state 65

    pointervar                     shift and go to state 75

state 58

    (73) expression -> functioncall .

    PLUS            reduce using rule 73 (expression -> functioncall .)
    MINUS           reduce using rule 73 (expression -> functioncall .)
    DIVIDE          reduce using rule 73 (expression -> functioncall .)
    TIMES           reduce using rule 73 (expression -> functioncall .)
    SEMICOLON       reduce using rule 73 (expression -> functioncall .)
    RPAREN          reduce using rule 73 (expression -> functioncall .)
    LESSTHANEQ      reduce using rule 73 (expression -> functioncall .)
    GREATERTHANEQ   reduce using rule 73 (expression -> functioncall .)
    UNEQUAL         reduce using rule 73 (expression -> functioncall .)
    EQUALCHECK      reduce using rule 73 (expression -> functioncall .)
    LESSTHAN        reduce using rule 73 (expression -> functioncall .)
    GREATERTHAN     reduce using rule 73 (expression -> functioncall .)
    COMMA           reduce using rule 73 (expression -> functioncall .)
    ANDOPERATOR     reduce using rule 73 (expression -> functioncall .)
    OROPERATOR      reduce using rule 73 (expression -> functioncall .)


state 59

    (72) expression -> LPAREN . expression RPAREN
    (67) expression -> . expression PLUS expression
    (68) expression -> . expression MINUS expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression TIMES expression
    (71) expression -> . MINUS expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . functioncall
    (74) expression -> . allnumbers
    (77) expression -> . pointervar
    (25) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (75) allnumbers -> . FLOAT
    (76) allnumbers -> . NUMBER
    (78) pointervar -> . TIMES pointervar
    (79) pointervar -> . ADDROF pointervar
    (80) pointervar -> . NAME

    MINUS           shift and go to state 61
    LPAREN          shift and go to state 59
    NAME            shift and go to state 62
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 56
    TIMES           shift and go to state 57
    ADDROF          shift and go to state 53

    functioncall                   shift and go to state 58
    pointervar                     shift and go to state 55
    allnumbers                     shift and go to state 54
    expression                     shift and go to state 76

state 60

    (24) returnstatement -> RETURN expression . SEMICOLON
    (67) expression -> expression . PLUS expression
    (68) expression -> expression . MINUS expression
    (69) expression -> expression . DIVIDE expression
    (70) expression -> expression . TIMES expression

    SEMICOLON       shift and go to state 78
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    DIVIDE          shift and go to state 77
    TIMES           shift and go to state 79


state 61

    (71) expression -> MINUS . expression
    (67) expression -> . expression PLUS expression
    (68) expression -> . expression MINUS expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression TIMES expression
    (71) expression -> . MINUS expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . functioncall
    (74) expression -> . allnumbers
    (77) expression -> . pointervar
    (25) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (75) allnumbers -> . FLOAT
    (76) allnumbers -> . NUMBER
    (78) pointervar -> . TIMES pointervar
    (79) pointervar -> . ADDROF pointervar
    (80) pointervar -> . NAME

    MINUS           shift and go to state 61
    LPAREN          shift and go to state 59
    NAME            shift and go to state 62
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 56
    TIMES           shift and go to state 57
    ADDROF          shift and go to state 53

    functioncall                   shift and go to state 58
    pointervar                     shift and go to state 55
    allnumbers                     shift and go to state 54
    expression                     shift and go to state 82

state 62

    (25) functioncall -> NAME . LPAREN arguments RPAREN SEMICOLON
    (80) pointervar -> NAME .

    LPAREN          shift and go to state 70
    RPAREN          reduce using rule 80 (pointervar -> NAME .)
    PLUS            reduce using rule 80 (pointervar -> NAME .)
    MINUS           reduce using rule 80 (pointervar -> NAME .)
    DIVIDE          reduce using rule 80 (pointervar -> NAME .)
    TIMES           reduce using rule 80 (pointervar -> NAME .)
    COMMA           reduce using rule 80 (pointervar -> NAME .)
    SEMICOLON       reduce using rule 80 (pointervar -> NAME .)
    LESSTHANEQ      reduce using rule 80 (pointervar -> NAME .)
    GREATERTHANEQ   reduce using rule 80 (pointervar -> NAME .)
    UNEQUAL         reduce using rule 80 (pointervar -> NAME .)
    EQUALCHECK      reduce using rule 80 (pointervar -> NAME .)
    LESSTHAN        reduce using rule 80 (pointervar -> NAME .)
    GREATERTHAN     reduce using rule 80 (pointervar -> NAME .)
    ANDOPERATOR     reduce using rule 80 (pointervar -> NAME .)
    OROPERATOR      reduce using rule 80 (pointervar -> NAME .)


state 63

    (37) whileblock -> WHILE LPAREN . conditional RPAREN LBRACE fbody RBRACE
    (38) conditional -> . LPAREN conditional RPAREN
    (39) conditional -> . conditionbase
    (40) conditional -> . NOT LPAREN conditional RPAREN
    (41) conditional -> . conditional LESSTHANEQ conditional
    (42) conditional -> . conditional GREATERTHANEQ conditional
    (43) conditional -> . conditional UNEQUAL conditional
    (44) conditional -> . conditional EQUALCHECK conditional
    (45) conditional -> . conditional LESSTHAN conditional
    (46) conditional -> . conditional GREATERTHAN conditional
    (47) conditional -> . conditional ANDOPERATOR conditional
    (48) conditional -> . conditional OROPERATOR conditional
    (49) conditionbase -> . CS LESSTHANEQ CS
    (50) conditionbase -> . CS GREATERTHANEQ CS
    (51) conditionbase -> . CS UNEQUAL CS
    (52) conditionbase -> . CS EQUALCHECK CS
    (53) conditionbase -> . CS LESSTHAN CS
    (54) conditionbase -> . CS GREATERTHAN CS
    (55) CS -> . expression
    (56) CS -> . NOT LPAREN expression RPAREN
    (67) expression -> . expression PLUS expression
    (68) expression -> . expression MINUS expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression TIMES expression
    (71) expression -> . MINUS expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . functioncall
    (74) expression -> . allnumbers
    (77) expression -> . pointervar
    (25) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (75) allnumbers -> . FLOAT
    (76) allnumbers -> . NUMBER
    (78) pointervar -> . TIMES pointervar
    (79) pointervar -> . ADDROF pointervar
    (80) pointervar -> . NAME

    LPAREN          shift and go to state 85
    NOT             shift and go to state 87
    MINUS           shift and go to state 61
    NAME            shift and go to state 62
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 56
    TIMES           shift and go to state 57
    ADDROF          shift and go to state 53

    allnumbers                     shift and go to state 54
    pointervar                     shift and go to state 55
    conditionbase                  shift and go to state 83
    conditional                    shift and go to state 84
    functioncall                   shift and go to state 58
    CS                             shift and go to state 86
    expression                     shift and go to state 88

state 64

    (64) assignment -> assignment_base SEMICOLON .

    SEMICOLON       reduce using rule 64 (assignment -> assignment_base SEMICOLON .)
    IF              reduce using rule 64 (assignment -> assignment_base SEMICOLON .)
    TYPE            reduce using rule 64 (assignment -> assignment_base SEMICOLON .)
    WHILE           reduce using rule 64 (assignment -> assignment_base SEMICOLON .)
    RETURN          reduce using rule 64 (assignment -> assignment_base SEMICOLON .)
    NAME            reduce using rule 64 (assignment -> assignment_base SEMICOLON .)
    TIMES           reduce using rule 64 (assignment -> assignment_base SEMICOLON .)
    RBRACE          reduce using rule 64 (assignment -> assignment_base SEMICOLON .)
    ELSE            reduce using rule 64 (assignment -> assignment_base SEMICOLON .)


state 65

    (80) pointervar -> NAME .

    SEMICOLON       reduce using rule 80 (pointervar -> NAME .)
    PLUS            reduce using rule 80 (pointervar -> NAME .)
    MINUS           reduce using rule 80 (pointervar -> NAME .)
    DIVIDE          reduce using rule 80 (pointervar -> NAME .)
    TIMES           reduce using rule 80 (pointervar -> NAME .)
    EQUALS          reduce using rule 80 (pointervar -> NAME .)
    RPAREN          reduce using rule 80 (pointervar -> NAME .)
    LESSTHANEQ      reduce using rule 80 (pointervar -> NAME .)
    GREATERTHANEQ   reduce using rule 80 (pointervar -> NAME .)
    UNEQUAL         reduce using rule 80 (pointervar -> NAME .)
    EQUALCHECK      reduce using rule 80 (pointervar -> NAME .)
    LESSTHAN        reduce using rule 80 (pointervar -> NAME .)
    GREATERTHAN     reduce using rule 80 (pointervar -> NAME .)
    COMMA           reduce using rule 80 (pointervar -> NAME .)
    ANDOPERATOR     reduce using rule 80 (pointervar -> NAME .)
    OROPERATOR      reduce using rule 80 (pointervar -> NAME .)


state 66

    (65) assignment_base -> TIMES pointervar . EQUALS expression

    EQUALS          shift and go to state 89


state 67

    (7) function -> TYPE NAME LPAREN paramlist RPAREN LBRACE fbody RBRACE .

    TYPE            reduce using rule 7 (function -> TYPE NAME LPAREN paramlist RPAREN LBRACE fbody RBRACE .)
    $end            reduce using rule 7 (function -> TYPE NAME LPAREN paramlist RPAREN LBRACE fbody RBRACE .)


state 68

    (29) unmatchedstatement -> IF LPAREN . conditional RPAREN allstatement
    (30) unmatchedstatement -> IF LPAREN . conditional RPAREN statement ELSE unmatchedstatement
    (31) unmatchedstatement -> IF LPAREN . conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement
    (32) unmatchedstatement -> IF LPAREN . conditional RPAREN LBRACE fbody RBRACE
    (33) ifblock -> IF LPAREN . conditional RPAREN statement ELSE statement
    (34) ifblock -> IF LPAREN . conditional RPAREN statement ELSE LBRACE fbody RBRACE
    (35) ifblock -> IF LPAREN . conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE
    (36) ifblock -> IF LPAREN . conditional RPAREN LBRACE fbody RBRACE ELSE statement
    (38) conditional -> . LPAREN conditional RPAREN
    (39) conditional -> . conditionbase
    (40) conditional -> . NOT LPAREN conditional RPAREN
    (41) conditional -> . conditional LESSTHANEQ conditional
    (42) conditional -> . conditional GREATERTHANEQ conditional
    (43) conditional -> . conditional UNEQUAL conditional
    (44) conditional -> . conditional EQUALCHECK conditional
    (45) conditional -> . conditional LESSTHAN conditional
    (46) conditional -> . conditional GREATERTHAN conditional
    (47) conditional -> . conditional ANDOPERATOR conditional
    (48) conditional -> . conditional OROPERATOR conditional
    (49) conditionbase -> . CS LESSTHANEQ CS
    (50) conditionbase -> . CS GREATERTHANEQ CS
    (51) conditionbase -> . CS UNEQUAL CS
    (52) conditionbase -> . CS EQUALCHECK CS
    (53) conditionbase -> . CS LESSTHAN CS
    (54) conditionbase -> . CS GREATERTHAN CS
    (55) CS -> . expression
    (56) CS -> . NOT LPAREN expression RPAREN
    (67) expression -> . expression PLUS expression
    (68) expression -> . expression MINUS expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression TIMES expression
    (71) expression -> . MINUS expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . functioncall
    (74) expression -> . allnumbers
    (77) expression -> . pointervar
    (25) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (75) allnumbers -> . FLOAT
    (76) allnumbers -> . NUMBER
    (78) pointervar -> . TIMES pointervar
    (79) pointervar -> . ADDROF pointervar
    (80) pointervar -> . NAME

    LPAREN          shift and go to state 85
    NOT             shift and go to state 87
    MINUS           shift and go to state 61
    NAME            shift and go to state 62
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 56
    TIMES           shift and go to state 57
    ADDROF          shift and go to state 53

    allnumbers                     shift and go to state 54
    pointervar                     shift and go to state 55
    conditionbase                  shift and go to state 83
    conditional                    shift and go to state 90
    CS                             shift and go to state 86
    functioncall                   shift and go to state 58
    expression                     shift and go to state 88

state 69

    (66) assignment_base -> NAME EQUALS . expression
    (67) expression -> . expression PLUS expression
    (68) expression -> . expression MINUS expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression TIMES expression
    (71) expression -> . MINUS expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . functioncall
    (74) expression -> . allnumbers
    (77) expression -> . pointervar
    (25) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (75) allnumbers -> . FLOAT
    (76) allnumbers -> . NUMBER
    (78) pointervar -> . TIMES pointervar
    (79) pointervar -> . ADDROF pointervar
    (80) pointervar -> . NAME

    MINUS           shift and go to state 61
    LPAREN          shift and go to state 59
    NAME            shift and go to state 62
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 56
    TIMES           shift and go to state 57
    ADDROF          shift and go to state 53

    functioncall                   shift and go to state 58
    pointervar                     shift and go to state 55
    allnumbers                     shift and go to state 54
    expression                     shift and go to state 91

state 70

    (25) functioncall -> NAME LPAREN . arguments RPAREN SEMICOLON
    (26) arguments -> . expression
    (27) arguments -> . expression COMMA arguments
    (67) expression -> . expression PLUS expression
    (68) expression -> . expression MINUS expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression TIMES expression
    (71) expression -> . MINUS expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . functioncall
    (74) expression -> . allnumbers
    (77) expression -> . pointervar
    (25) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (75) allnumbers -> . FLOAT
    (76) allnumbers -> . NUMBER
    (78) pointervar -> . TIMES pointervar
    (79) pointervar -> . ADDROF pointervar
    (80) pointervar -> . NAME

    MINUS           shift and go to state 61
    LPAREN          shift and go to state 59
    NAME            shift and go to state 62
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 56
    TIMES           shift and go to state 57
    ADDROF          shift and go to state 53

    functioncall                   shift and go to state 58
    pointervar                     shift and go to state 55
    allnumbers                     shift and go to state 54
    expression                     shift and go to state 93
    arguments                      shift and go to state 92

state 71

    (14) fbody -> allstatement fbody .

    RBRACE          reduce using rule 14 (fbody -> allstatement fbody .)


state 72

    (12) paramlist2 -> COMMA TYPE NAME . paramlist2
    (11) paramlist2 -> .
    (12) paramlist2 -> . COMMA TYPE NAME paramlist2
    (13) paramlist2 -> . COMMA TYPE specialvar paramlist2

    RPAREN          reduce using rule 11 (paramlist2 -> .)
    COMMA           shift and go to state 30

    paramlist2                     shift and go to state 94

state 73

    (13) paramlist2 -> COMMA TYPE specialvar . paramlist2
    (11) paramlist2 -> .
    (12) paramlist2 -> . COMMA TYPE NAME paramlist2
    (13) paramlist2 -> . COMMA TYPE specialvar paramlist2

    RPAREN          reduce using rule 11 (paramlist2 -> .)
    COMMA           shift and go to state 30

    paramlist2                     shift and go to state 95

state 74

    (79) pointervar -> ADDROF pointervar .

    RPAREN          reduce using rule 79 (pointervar -> ADDROF pointervar .)
    PLUS            reduce using rule 79 (pointervar -> ADDROF pointervar .)
    MINUS           reduce using rule 79 (pointervar -> ADDROF pointervar .)
    DIVIDE          reduce using rule 79 (pointervar -> ADDROF pointervar .)
    TIMES           reduce using rule 79 (pointervar -> ADDROF pointervar .)
    COMMA           reduce using rule 79 (pointervar -> ADDROF pointervar .)
    SEMICOLON       reduce using rule 79 (pointervar -> ADDROF pointervar .)
    LESSTHANEQ      reduce using rule 79 (pointervar -> ADDROF pointervar .)
    GREATERTHANEQ   reduce using rule 79 (pointervar -> ADDROF pointervar .)
    UNEQUAL         reduce using rule 79 (pointervar -> ADDROF pointervar .)
    EQUALCHECK      reduce using rule 79 (pointervar -> ADDROF pointervar .)
    LESSTHAN        reduce using rule 79 (pointervar -> ADDROF pointervar .)
    GREATERTHAN     reduce using rule 79 (pointervar -> ADDROF pointervar .)
    ANDOPERATOR     reduce using rule 79 (pointervar -> ADDROF pointervar .)
    OROPERATOR      reduce using rule 79 (pointervar -> ADDROF pointervar .)
    EQUALS          reduce using rule 79 (pointervar -> ADDROF pointervar .)


state 75

    (78) pointervar -> TIMES pointervar .

    RPAREN          reduce using rule 78 (pointervar -> TIMES pointervar .)
    PLUS            reduce using rule 78 (pointervar -> TIMES pointervar .)
    MINUS           reduce using rule 78 (pointervar -> TIMES pointervar .)
    DIVIDE          reduce using rule 78 (pointervar -> TIMES pointervar .)
    TIMES           reduce using rule 78 (pointervar -> TIMES pointervar .)
    COMMA           reduce using rule 78 (pointervar -> TIMES pointervar .)
    SEMICOLON       reduce using rule 78 (pointervar -> TIMES pointervar .)
    LESSTHANEQ      reduce using rule 78 (pointervar -> TIMES pointervar .)
    GREATERTHANEQ   reduce using rule 78 (pointervar -> TIMES pointervar .)
    UNEQUAL         reduce using rule 78 (pointervar -> TIMES pointervar .)
    EQUALCHECK      reduce using rule 78 (pointervar -> TIMES pointervar .)
    LESSTHAN        reduce using rule 78 (pointervar -> TIMES pointervar .)
    GREATERTHAN     reduce using rule 78 (pointervar -> TIMES pointervar .)
    ANDOPERATOR     reduce using rule 78 (pointervar -> TIMES pointervar .)
    OROPERATOR      reduce using rule 78 (pointervar -> TIMES pointervar .)
    EQUALS          reduce using rule 78 (pointervar -> TIMES pointervar .)


state 76

    (72) expression -> LPAREN expression . RPAREN
    (67) expression -> expression . PLUS expression
    (68) expression -> expression . MINUS expression
    (69) expression -> expression . DIVIDE expression
    (70) expression -> expression . TIMES expression

    RPAREN          shift and go to state 96
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    DIVIDE          shift and go to state 77
    TIMES           shift and go to state 79


state 77

    (69) expression -> expression DIVIDE . expression
    (67) expression -> . expression PLUS expression
    (68) expression -> . expression MINUS expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression TIMES expression
    (71) expression -> . MINUS expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . functioncall
    (74) expression -> . allnumbers
    (77) expression -> . pointervar
    (25) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (75) allnumbers -> . FLOAT
    (76) allnumbers -> . NUMBER
    (78) pointervar -> . TIMES pointervar
    (79) pointervar -> . ADDROF pointervar
    (80) pointervar -> . NAME

    MINUS           shift and go to state 61
    LPAREN          shift and go to state 59
    NAME            shift and go to state 62
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 56
    TIMES           shift and go to state 57
    ADDROF          shift and go to state 53

    functioncall                   shift and go to state 58
    pointervar                     shift and go to state 55
    allnumbers                     shift and go to state 54
    expression                     shift and go to state 97

state 78

    (24) returnstatement -> RETURN expression SEMICOLON .

    SEMICOLON       reduce using rule 24 (returnstatement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 24 (returnstatement -> RETURN expression SEMICOLON .)
    TYPE            reduce using rule 24 (returnstatement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 24 (returnstatement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 24 (returnstatement -> RETURN expression SEMICOLON .)
    NAME            reduce using rule 24 (returnstatement -> RETURN expression SEMICOLON .)
    TIMES           reduce using rule 24 (returnstatement -> RETURN expression SEMICOLON .)
    RBRACE          reduce using rule 24 (returnstatement -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 24 (returnstatement -> RETURN expression SEMICOLON .)


state 79

    (70) expression -> expression TIMES . expression
    (67) expression -> . expression PLUS expression
    (68) expression -> . expression MINUS expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression TIMES expression
    (71) expression -> . MINUS expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . functioncall
    (74) expression -> . allnumbers
    (77) expression -> . pointervar
    (25) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (75) allnumbers -> . FLOAT
    (76) allnumbers -> . NUMBER
    (78) pointervar -> . TIMES pointervar
    (79) pointervar -> . ADDROF pointervar
    (80) pointervar -> . NAME

    MINUS           shift and go to state 61
    LPAREN          shift and go to state 59
    NAME            shift and go to state 62
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 56
    TIMES           shift and go to state 57
    ADDROF          shift and go to state 53

    functioncall                   shift and go to state 58
    pointervar                     shift and go to state 55
    allnumbers                     shift and go to state 54
    expression                     shift and go to state 98

state 80

    (67) expression -> expression PLUS . expression
    (67) expression -> . expression PLUS expression
    (68) expression -> . expression MINUS expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression TIMES expression
    (71) expression -> . MINUS expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . functioncall
    (74) expression -> . allnumbers
    (77) expression -> . pointervar
    (25) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (75) allnumbers -> . FLOAT
    (76) allnumbers -> . NUMBER
    (78) pointervar -> . TIMES pointervar
    (79) pointervar -> . ADDROF pointervar
    (80) pointervar -> . NAME

    MINUS           shift and go to state 61
    LPAREN          shift and go to state 59
    NAME            shift and go to state 62
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 56
    TIMES           shift and go to state 57
    ADDROF          shift and go to state 53

    functioncall                   shift and go to state 58
    pointervar                     shift and go to state 55
    allnumbers                     shift and go to state 54
    expression                     shift and go to state 99

state 81

    (68) expression -> expression MINUS . expression
    (67) expression -> . expression PLUS expression
    (68) expression -> . expression MINUS expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression TIMES expression
    (71) expression -> . MINUS expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . functioncall
    (74) expression -> . allnumbers
    (77) expression -> . pointervar
    (25) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (75) allnumbers -> . FLOAT
    (76) allnumbers -> . NUMBER
    (78) pointervar -> . TIMES pointervar
    (79) pointervar -> . ADDROF pointervar
    (80) pointervar -> . NAME

    MINUS           shift and go to state 61
    LPAREN          shift and go to state 59
    NAME            shift and go to state 62
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 56
    TIMES           shift and go to state 57
    ADDROF          shift and go to state 53

    functioncall                   shift and go to state 58
    pointervar                     shift and go to state 55
    allnumbers                     shift and go to state 54
    expression                     shift and go to state 100

state 82

    (71) expression -> MINUS expression .
    (67) expression -> expression . PLUS expression
    (68) expression -> expression . MINUS expression
    (69) expression -> expression . DIVIDE expression
    (70) expression -> expression . TIMES expression

    PLUS            reduce using rule 71 (expression -> MINUS expression .)
    MINUS           reduce using rule 71 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 71 (expression -> MINUS expression .)
    TIMES           reduce using rule 71 (expression -> MINUS expression .)
    SEMICOLON       reduce using rule 71 (expression -> MINUS expression .)
    RPAREN          reduce using rule 71 (expression -> MINUS expression .)
    LESSTHANEQ      reduce using rule 71 (expression -> MINUS expression .)
    GREATERTHANEQ   reduce using rule 71 (expression -> MINUS expression .)
    UNEQUAL         reduce using rule 71 (expression -> MINUS expression .)
    EQUALCHECK      reduce using rule 71 (expression -> MINUS expression .)
    LESSTHAN        reduce using rule 71 (expression -> MINUS expression .)
    GREATERTHAN     reduce using rule 71 (expression -> MINUS expression .)
    COMMA           reduce using rule 71 (expression -> MINUS expression .)
    ANDOPERATOR     reduce using rule 71 (expression -> MINUS expression .)
    OROPERATOR      reduce using rule 71 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 80 ]
  ! MINUS           [ shift and go to state 81 ]
  ! DIVIDE          [ shift and go to state 77 ]
  ! TIMES           [ shift and go to state 79 ]


state 83

    (39) conditional -> conditionbase .

    LESSTHANEQ      reduce using rule 39 (conditional -> conditionbase .)
    GREATERTHANEQ   reduce using rule 39 (conditional -> conditionbase .)
    UNEQUAL         reduce using rule 39 (conditional -> conditionbase .)
    EQUALCHECK      reduce using rule 39 (conditional -> conditionbase .)
    LESSTHAN        reduce using rule 39 (conditional -> conditionbase .)
    GREATERTHAN     reduce using rule 39 (conditional -> conditionbase .)
    ANDOPERATOR     reduce using rule 39 (conditional -> conditionbase .)
    OROPERATOR      reduce using rule 39 (conditional -> conditionbase .)
    RPAREN          reduce using rule 39 (conditional -> conditionbase .)


state 84

    (37) whileblock -> WHILE LPAREN conditional . RPAREN LBRACE fbody RBRACE
    (41) conditional -> conditional . LESSTHANEQ conditional
    (42) conditional -> conditional . GREATERTHANEQ conditional
    (43) conditional -> conditional . UNEQUAL conditional
    (44) conditional -> conditional . EQUALCHECK conditional
    (45) conditional -> conditional . LESSTHAN conditional
    (46) conditional -> conditional . GREATERTHAN conditional
    (47) conditional -> conditional . ANDOPERATOR conditional
    (48) conditional -> conditional . OROPERATOR conditional

    RPAREN          shift and go to state 101
    LESSTHANEQ      shift and go to state 108
    GREATERTHANEQ   shift and go to state 106
    UNEQUAL         shift and go to state 107
    EQUALCHECK      shift and go to state 109
    LESSTHAN        shift and go to state 103
    GREATERTHAN     shift and go to state 102
    ANDOPERATOR     shift and go to state 105
    OROPERATOR      shift and go to state 104


state 85

    (38) conditional -> LPAREN . conditional RPAREN
    (72) expression -> LPAREN . expression RPAREN
    (38) conditional -> . LPAREN conditional RPAREN
    (39) conditional -> . conditionbase
    (40) conditional -> . NOT LPAREN conditional RPAREN
    (41) conditional -> . conditional LESSTHANEQ conditional
    (42) conditional -> . conditional GREATERTHANEQ conditional
    (43) conditional -> . conditional UNEQUAL conditional
    (44) conditional -> . conditional EQUALCHECK conditional
    (45) conditional -> . conditional LESSTHAN conditional
    (46) conditional -> . conditional GREATERTHAN conditional
    (47) conditional -> . conditional ANDOPERATOR conditional
    (48) conditional -> . conditional OROPERATOR conditional
    (67) expression -> . expression PLUS expression
    (68) expression -> . expression MINUS expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression TIMES expression
    (71) expression -> . MINUS expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . functioncall
    (74) expression -> . allnumbers
    (77) expression -> . pointervar
    (49) conditionbase -> . CS LESSTHANEQ CS
    (50) conditionbase -> . CS GREATERTHANEQ CS
    (51) conditionbase -> . CS UNEQUAL CS
    (52) conditionbase -> . CS EQUALCHECK CS
    (53) conditionbase -> . CS LESSTHAN CS
    (54) conditionbase -> . CS GREATERTHAN CS
    (25) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (75) allnumbers -> . FLOAT
    (76) allnumbers -> . NUMBER
    (78) pointervar -> . TIMES pointervar
    (79) pointervar -> . ADDROF pointervar
    (80) pointervar -> . NAME
    (55) CS -> . expression
    (56) CS -> . NOT LPAREN expression RPAREN

    LPAREN          shift and go to state 85
    NOT             shift and go to state 87
    MINUS           shift and go to state 61
    NAME            shift and go to state 62
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 56
    TIMES           shift and go to state 57
    ADDROF          shift and go to state 53

    allnumbers                     shift and go to state 54
    pointervar                     shift and go to state 55
    conditionbase                  shift and go to state 83
    conditional                    shift and go to state 110
    functioncall                   shift and go to state 58
    CS                             shift and go to state 86
    expression                     shift and go to state 111

state 86

    (49) conditionbase -> CS . LESSTHANEQ CS
    (50) conditionbase -> CS . GREATERTHANEQ CS
    (51) conditionbase -> CS . UNEQUAL CS
    (52) conditionbase -> CS . EQUALCHECK CS
    (53) conditionbase -> CS . LESSTHAN CS
    (54) conditionbase -> CS . GREATERTHAN CS

    LESSTHANEQ      shift and go to state 116
    GREATERTHANEQ   shift and go to state 114
    UNEQUAL         shift and go to state 112
    EQUALCHECK      shift and go to state 117
    LESSTHAN        shift and go to state 113
    GREATERTHAN     shift and go to state 115


state 87

    (40) conditional -> NOT . LPAREN conditional RPAREN
    (56) CS -> NOT . LPAREN expression RPAREN

    LPAREN          shift and go to state 118


state 88

    (55) CS -> expression .
    (67) expression -> expression . PLUS expression
    (68) expression -> expression . MINUS expression
    (69) expression -> expression . DIVIDE expression
    (70) expression -> expression . TIMES expression

    RPAREN          reduce using rule 55 (CS -> expression .)
    LESSTHANEQ      reduce using rule 55 (CS -> expression .)
    GREATERTHANEQ   reduce using rule 55 (CS -> expression .)
    UNEQUAL         reduce using rule 55 (CS -> expression .)
    EQUALCHECK      reduce using rule 55 (CS -> expression .)
    LESSTHAN        reduce using rule 55 (CS -> expression .)
    GREATERTHAN     reduce using rule 55 (CS -> expression .)
    ANDOPERATOR     reduce using rule 55 (CS -> expression .)
    OROPERATOR      reduce using rule 55 (CS -> expression .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    DIVIDE          shift and go to state 77
    TIMES           shift and go to state 79


state 89

    (65) assignment_base -> TIMES pointervar EQUALS . expression
    (67) expression -> . expression PLUS expression
    (68) expression -> . expression MINUS expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression TIMES expression
    (71) expression -> . MINUS expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . functioncall
    (74) expression -> . allnumbers
    (77) expression -> . pointervar
    (25) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (75) allnumbers -> . FLOAT
    (76) allnumbers -> . NUMBER
    (78) pointervar -> . TIMES pointervar
    (79) pointervar -> . ADDROF pointervar
    (80) pointervar -> . NAME

    MINUS           shift and go to state 61
    LPAREN          shift and go to state 59
    NAME            shift and go to state 62
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 56
    TIMES           shift and go to state 57
    ADDROF          shift and go to state 53

    expression                     shift and go to state 119
    allnumbers                     shift and go to state 54
    pointervar                     shift and go to state 55
    functioncall                   shift and go to state 58

state 90

    (29) unmatchedstatement -> IF LPAREN conditional . RPAREN allstatement
    (30) unmatchedstatement -> IF LPAREN conditional . RPAREN statement ELSE unmatchedstatement
    (31) unmatchedstatement -> IF LPAREN conditional . RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement
    (32) unmatchedstatement -> IF LPAREN conditional . RPAREN LBRACE fbody RBRACE
    (33) ifblock -> IF LPAREN conditional . RPAREN statement ELSE statement
    (34) ifblock -> IF LPAREN conditional . RPAREN statement ELSE LBRACE fbody RBRACE
    (35) ifblock -> IF LPAREN conditional . RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE
    (36) ifblock -> IF LPAREN conditional . RPAREN LBRACE fbody RBRACE ELSE statement
    (41) conditional -> conditional . LESSTHANEQ conditional
    (42) conditional -> conditional . GREATERTHANEQ conditional
    (43) conditional -> conditional . UNEQUAL conditional
    (44) conditional -> conditional . EQUALCHECK conditional
    (45) conditional -> conditional . LESSTHAN conditional
    (46) conditional -> conditional . GREATERTHAN conditional
    (47) conditional -> conditional . ANDOPERATOR conditional
    (48) conditional -> conditional . OROPERATOR conditional

    RPAREN          shift and go to state 120
    LESSTHANEQ      shift and go to state 108
    GREATERTHANEQ   shift and go to state 106
    UNEQUAL         shift and go to state 107
    EQUALCHECK      shift and go to state 109
    LESSTHAN        shift and go to state 103
    GREATERTHAN     shift and go to state 102
    ANDOPERATOR     shift and go to state 105
    OROPERATOR      shift and go to state 104


state 91

    (66) assignment_base -> NAME EQUALS expression .
    (67) expression -> expression . PLUS expression
    (68) expression -> expression . MINUS expression
    (69) expression -> expression . DIVIDE expression
    (70) expression -> expression . TIMES expression

    SEMICOLON       reduce using rule 66 (assignment_base -> NAME EQUALS expression .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    DIVIDE          shift and go to state 77
    TIMES           shift and go to state 79


state 92

    (25) functioncall -> NAME LPAREN arguments . RPAREN SEMICOLON

    RPAREN          shift and go to state 121


state 93

    (26) arguments -> expression .
    (27) arguments -> expression . COMMA arguments
    (67) expression -> expression . PLUS expression
    (68) expression -> expression . MINUS expression
    (69) expression -> expression . DIVIDE expression
    (70) expression -> expression . TIMES expression

    RPAREN          reduce using rule 26 (arguments -> expression .)
    COMMA           shift and go to state 122
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    DIVIDE          shift and go to state 77
    TIMES           shift and go to state 79


state 94

    (12) paramlist2 -> COMMA TYPE NAME paramlist2 .

    RPAREN          reduce using rule 12 (paramlist2 -> COMMA TYPE NAME paramlist2 .)


state 95

    (13) paramlist2 -> COMMA TYPE specialvar paramlist2 .

    RPAREN          reduce using rule 13 (paramlist2 -> COMMA TYPE specialvar paramlist2 .)


state 96

    (72) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 72 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 72 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 72 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 72 (expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 72 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 72 (expression -> LPAREN expression RPAREN .)
    LESSTHANEQ      reduce using rule 72 (expression -> LPAREN expression RPAREN .)
    GREATERTHANEQ   reduce using rule 72 (expression -> LPAREN expression RPAREN .)
    UNEQUAL         reduce using rule 72 (expression -> LPAREN expression RPAREN .)
    EQUALCHECK      reduce using rule 72 (expression -> LPAREN expression RPAREN .)
    LESSTHAN        reduce using rule 72 (expression -> LPAREN expression RPAREN .)
    GREATERTHAN     reduce using rule 72 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 72 (expression -> LPAREN expression RPAREN .)
    ANDOPERATOR     reduce using rule 72 (expression -> LPAREN expression RPAREN .)
    OROPERATOR      reduce using rule 72 (expression -> LPAREN expression RPAREN .)


state 97

    (69) expression -> expression DIVIDE expression .
    (67) expression -> expression . PLUS expression
    (68) expression -> expression . MINUS expression
    (69) expression -> expression . DIVIDE expression
    (70) expression -> expression . TIMES expression

    PLUS            reduce using rule 69 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 69 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 69 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 69 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 69 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 69 (expression -> expression DIVIDE expression .)
    LESSTHANEQ      reduce using rule 69 (expression -> expression DIVIDE expression .)
    GREATERTHANEQ   reduce using rule 69 (expression -> expression DIVIDE expression .)
    UNEQUAL         reduce using rule 69 (expression -> expression DIVIDE expression .)
    EQUALCHECK      reduce using rule 69 (expression -> expression DIVIDE expression .)
    LESSTHAN        reduce using rule 69 (expression -> expression DIVIDE expression .)
    GREATERTHAN     reduce using rule 69 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 69 (expression -> expression DIVIDE expression .)
    ANDOPERATOR     reduce using rule 69 (expression -> expression DIVIDE expression .)
    OROPERATOR      reduce using rule 69 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 80 ]
  ! MINUS           [ shift and go to state 81 ]
  ! DIVIDE          [ shift and go to state 77 ]
  ! TIMES           [ shift and go to state 79 ]


state 98

    (70) expression -> expression TIMES expression .
    (67) expression -> expression . PLUS expression
    (68) expression -> expression . MINUS expression
    (69) expression -> expression . DIVIDE expression
    (70) expression -> expression . TIMES expression

    PLUS            reduce using rule 70 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 70 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 70 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 70 (expression -> expression TIMES expression .)
    SEMICOLON       reduce using rule 70 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 70 (expression -> expression TIMES expression .)
    LESSTHANEQ      reduce using rule 70 (expression -> expression TIMES expression .)
    GREATERTHANEQ   reduce using rule 70 (expression -> expression TIMES expression .)
    UNEQUAL         reduce using rule 70 (expression -> expression TIMES expression .)
    EQUALCHECK      reduce using rule 70 (expression -> expression TIMES expression .)
    LESSTHAN        reduce using rule 70 (expression -> expression TIMES expression .)
    GREATERTHAN     reduce using rule 70 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 70 (expression -> expression TIMES expression .)
    ANDOPERATOR     reduce using rule 70 (expression -> expression TIMES expression .)
    OROPERATOR      reduce using rule 70 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 80 ]
  ! MINUS           [ shift and go to state 81 ]
  ! DIVIDE          [ shift and go to state 77 ]
  ! TIMES           [ shift and go to state 79 ]


state 99

    (67) expression -> expression PLUS expression .
    (67) expression -> expression . PLUS expression
    (68) expression -> expression . MINUS expression
    (69) expression -> expression . DIVIDE expression
    (70) expression -> expression . TIMES expression

    PLUS            reduce using rule 67 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 67 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 67 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 67 (expression -> expression PLUS expression .)
    LESSTHANEQ      reduce using rule 67 (expression -> expression PLUS expression .)
    GREATERTHANEQ   reduce using rule 67 (expression -> expression PLUS expression .)
    UNEQUAL         reduce using rule 67 (expression -> expression PLUS expression .)
    EQUALCHECK      reduce using rule 67 (expression -> expression PLUS expression .)
    LESSTHAN        reduce using rule 67 (expression -> expression PLUS expression .)
    GREATERTHAN     reduce using rule 67 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 67 (expression -> expression PLUS expression .)
    ANDOPERATOR     reduce using rule 67 (expression -> expression PLUS expression .)
    OROPERATOR      reduce using rule 67 (expression -> expression PLUS expression .)
    DIVIDE          shift and go to state 77
    TIMES           shift and go to state 79

  ! DIVIDE          [ reduce using rule 67 (expression -> expression PLUS expression .) ]
  ! TIMES           [ reduce using rule 67 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 80 ]
  ! MINUS           [ shift and go to state 81 ]


state 100

    (68) expression -> expression MINUS expression .
    (67) expression -> expression . PLUS expression
    (68) expression -> expression . MINUS expression
    (69) expression -> expression . DIVIDE expression
    (70) expression -> expression . TIMES expression

    PLUS            reduce using rule 68 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 68 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 68 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 68 (expression -> expression MINUS expression .)
    LESSTHANEQ      reduce using rule 68 (expression -> expression MINUS expression .)
    GREATERTHANEQ   reduce using rule 68 (expression -> expression MINUS expression .)
    UNEQUAL         reduce using rule 68 (expression -> expression MINUS expression .)
    EQUALCHECK      reduce using rule 68 (expression -> expression MINUS expression .)
    LESSTHAN        reduce using rule 68 (expression -> expression MINUS expression .)
    GREATERTHAN     reduce using rule 68 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 68 (expression -> expression MINUS expression .)
    ANDOPERATOR     reduce using rule 68 (expression -> expression MINUS expression .)
    OROPERATOR      reduce using rule 68 (expression -> expression MINUS expression .)
    DIVIDE          shift and go to state 77
    TIMES           shift and go to state 79

  ! DIVIDE          [ reduce using rule 68 (expression -> expression MINUS expression .) ]
  ! TIMES           [ reduce using rule 68 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 80 ]
  ! MINUS           [ shift and go to state 81 ]


state 101

    (37) whileblock -> WHILE LPAREN conditional RPAREN . LBRACE fbody RBRACE

    LBRACE          shift and go to state 123


state 102

    (46) conditional -> conditional GREATERTHAN . conditional
    (38) conditional -> . LPAREN conditional RPAREN
    (39) conditional -> . conditionbase
    (40) conditional -> . NOT LPAREN conditional RPAREN
    (41) conditional -> . conditional LESSTHANEQ conditional
    (42) conditional -> . conditional GREATERTHANEQ conditional
    (43) conditional -> . conditional UNEQUAL conditional
    (44) conditional -> . conditional EQUALCHECK conditional
    (45) conditional -> . conditional LESSTHAN conditional
    (46) conditional -> . conditional GREATERTHAN conditional
    (47) conditional -> . conditional ANDOPERATOR conditional
    (48) conditional -> . conditional OROPERATOR conditional
    (49) conditionbase -> . CS LESSTHANEQ CS
    (50) conditionbase -> . CS GREATERTHANEQ CS
    (51) conditionbase -> . CS UNEQUAL CS
    (52) conditionbase -> . CS EQUALCHECK CS
    (53) conditionbase -> . CS LESSTHAN CS
    (54) conditionbase -> . CS GREATERTHAN CS
    (55) CS -> . expression
    (56) CS -> . NOT LPAREN expression RPAREN
    (67) expression -> . expression PLUS expression
    (68) expression -> . expression MINUS expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression TIMES expression
    (71) expression -> . MINUS expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . functioncall
    (74) expression -> . allnumbers
    (77) expression -> . pointervar
    (25) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (75) allnumbers -> . FLOAT
    (76) allnumbers -> . NUMBER
    (78) pointervar -> . TIMES pointervar
    (79) pointervar -> . ADDROF pointervar
    (80) pointervar -> . NAME

    LPAREN          shift and go to state 85
    NOT             shift and go to state 87
    MINUS           shift and go to state 61
    NAME            shift and go to state 62
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 56
    TIMES           shift and go to state 57
    ADDROF          shift and go to state 53

    allnumbers                     shift and go to state 54
    pointervar                     shift and go to state 55
    conditionbase                  shift and go to state 83
    conditional                    shift and go to state 124
    functioncall                   shift and go to state 58
    CS                             shift and go to state 86
    expression                     shift and go to state 88

state 103

    (45) conditional -> conditional LESSTHAN . conditional
    (38) conditional -> . LPAREN conditional RPAREN
    (39) conditional -> . conditionbase
    (40) conditional -> . NOT LPAREN conditional RPAREN
    (41) conditional -> . conditional LESSTHANEQ conditional
    (42) conditional -> . conditional GREATERTHANEQ conditional
    (43) conditional -> . conditional UNEQUAL conditional
    (44) conditional -> . conditional EQUALCHECK conditional
    (45) conditional -> . conditional LESSTHAN conditional
    (46) conditional -> . conditional GREATERTHAN conditional
    (47) conditional -> . conditional ANDOPERATOR conditional
    (48) conditional -> . conditional OROPERATOR conditional
    (49) conditionbase -> . CS LESSTHANEQ CS
    (50) conditionbase -> . CS GREATERTHANEQ CS
    (51) conditionbase -> . CS UNEQUAL CS
    (52) conditionbase -> . CS EQUALCHECK CS
    (53) conditionbase -> . CS LESSTHAN CS
    (54) conditionbase -> . CS GREATERTHAN CS
    (55) CS -> . expression
    (56) CS -> . NOT LPAREN expression RPAREN
    (67) expression -> . expression PLUS expression
    (68) expression -> . expression MINUS expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression TIMES expression
    (71) expression -> . MINUS expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . functioncall
    (74) expression -> . allnumbers
    (77) expression -> . pointervar
    (25) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (75) allnumbers -> . FLOAT
    (76) allnumbers -> . NUMBER
    (78) pointervar -> . TIMES pointervar
    (79) pointervar -> . ADDROF pointervar
    (80) pointervar -> . NAME

    LPAREN          shift and go to state 85
    NOT             shift and go to state 87
    MINUS           shift and go to state 61
    NAME            shift and go to state 62
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 56
    TIMES           shift and go to state 57
    ADDROF          shift and go to state 53

    allnumbers                     shift and go to state 54
    pointervar                     shift and go to state 55
    conditionbase                  shift and go to state 83
    conditional                    shift and go to state 125
    functioncall                   shift and go to state 58
    CS                             shift and go to state 86
    expression                     shift and go to state 88

state 104

    (48) conditional -> conditional OROPERATOR . conditional
    (38) conditional -> . LPAREN conditional RPAREN
    (39) conditional -> . conditionbase
    (40) conditional -> . NOT LPAREN conditional RPAREN
    (41) conditional -> . conditional LESSTHANEQ conditional
    (42) conditional -> . conditional GREATERTHANEQ conditional
    (43) conditional -> . conditional UNEQUAL conditional
    (44) conditional -> . conditional EQUALCHECK conditional
    (45) conditional -> . conditional LESSTHAN conditional
    (46) conditional -> . conditional GREATERTHAN conditional
    (47) conditional -> . conditional ANDOPERATOR conditional
    (48) conditional -> . conditional OROPERATOR conditional
    (49) conditionbase -> . CS LESSTHANEQ CS
    (50) conditionbase -> . CS GREATERTHANEQ CS
    (51) conditionbase -> . CS UNEQUAL CS
    (52) conditionbase -> . CS EQUALCHECK CS
    (53) conditionbase -> . CS LESSTHAN CS
    (54) conditionbase -> . CS GREATERTHAN CS
    (55) CS -> . expression
    (56) CS -> . NOT LPAREN expression RPAREN
    (67) expression -> . expression PLUS expression
    (68) expression -> . expression MINUS expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression TIMES expression
    (71) expression -> . MINUS expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . functioncall
    (74) expression -> . allnumbers
    (77) expression -> . pointervar
    (25) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (75) allnumbers -> . FLOAT
    (76) allnumbers -> . NUMBER
    (78) pointervar -> . TIMES pointervar
    (79) pointervar -> . ADDROF pointervar
    (80) pointervar -> . NAME

    LPAREN          shift and go to state 85
    NOT             shift and go to state 87
    MINUS           shift and go to state 61
    NAME            shift and go to state 62
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 56
    TIMES           shift and go to state 57
    ADDROF          shift and go to state 53

    allnumbers                     shift and go to state 54
    pointervar                     shift and go to state 55
    conditionbase                  shift and go to state 83
    conditional                    shift and go to state 126
    functioncall                   shift and go to state 58
    CS                             shift and go to state 86
    expression                     shift and go to state 88

state 105

    (47) conditional -> conditional ANDOPERATOR . conditional
    (38) conditional -> . LPAREN conditional RPAREN
    (39) conditional -> . conditionbase
    (40) conditional -> . NOT LPAREN conditional RPAREN
    (41) conditional -> . conditional LESSTHANEQ conditional
    (42) conditional -> . conditional GREATERTHANEQ conditional
    (43) conditional -> . conditional UNEQUAL conditional
    (44) conditional -> . conditional EQUALCHECK conditional
    (45) conditional -> . conditional LESSTHAN conditional
    (46) conditional -> . conditional GREATERTHAN conditional
    (47) conditional -> . conditional ANDOPERATOR conditional
    (48) conditional -> . conditional OROPERATOR conditional
    (49) conditionbase -> . CS LESSTHANEQ CS
    (50) conditionbase -> . CS GREATERTHANEQ CS
    (51) conditionbase -> . CS UNEQUAL CS
    (52) conditionbase -> . CS EQUALCHECK CS
    (53) conditionbase -> . CS LESSTHAN CS
    (54) conditionbase -> . CS GREATERTHAN CS
    (55) CS -> . expression
    (56) CS -> . NOT LPAREN expression RPAREN
    (67) expression -> . expression PLUS expression
    (68) expression -> . expression MINUS expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression TIMES expression
    (71) expression -> . MINUS expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . functioncall
    (74) expression -> . allnumbers
    (77) expression -> . pointervar
    (25) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (75) allnumbers -> . FLOAT
    (76) allnumbers -> . NUMBER
    (78) pointervar -> . TIMES pointervar
    (79) pointervar -> . ADDROF pointervar
    (80) pointervar -> . NAME

    LPAREN          shift and go to state 85
    NOT             shift and go to state 87
    MINUS           shift and go to state 61
    NAME            shift and go to state 62
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 56
    TIMES           shift and go to state 57
    ADDROF          shift and go to state 53

    allnumbers                     shift and go to state 54
    pointervar                     shift and go to state 55
    conditionbase                  shift and go to state 83
    conditional                    shift and go to state 127
    functioncall                   shift and go to state 58
    CS                             shift and go to state 86
    expression                     shift and go to state 88

state 106

    (42) conditional -> conditional GREATERTHANEQ . conditional
    (38) conditional -> . LPAREN conditional RPAREN
    (39) conditional -> . conditionbase
    (40) conditional -> . NOT LPAREN conditional RPAREN
    (41) conditional -> . conditional LESSTHANEQ conditional
    (42) conditional -> . conditional GREATERTHANEQ conditional
    (43) conditional -> . conditional UNEQUAL conditional
    (44) conditional -> . conditional EQUALCHECK conditional
    (45) conditional -> . conditional LESSTHAN conditional
    (46) conditional -> . conditional GREATERTHAN conditional
    (47) conditional -> . conditional ANDOPERATOR conditional
    (48) conditional -> . conditional OROPERATOR conditional
    (49) conditionbase -> . CS LESSTHANEQ CS
    (50) conditionbase -> . CS GREATERTHANEQ CS
    (51) conditionbase -> . CS UNEQUAL CS
    (52) conditionbase -> . CS EQUALCHECK CS
    (53) conditionbase -> . CS LESSTHAN CS
    (54) conditionbase -> . CS GREATERTHAN CS
    (55) CS -> . expression
    (56) CS -> . NOT LPAREN expression RPAREN
    (67) expression -> . expression PLUS expression
    (68) expression -> . expression MINUS expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression TIMES expression
    (71) expression -> . MINUS expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . functioncall
    (74) expression -> . allnumbers
    (77) expression -> . pointervar
    (25) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (75) allnumbers -> . FLOAT
    (76) allnumbers -> . NUMBER
    (78) pointervar -> . TIMES pointervar
    (79) pointervar -> . ADDROF pointervar
    (80) pointervar -> . NAME

    LPAREN          shift and go to state 85
    NOT             shift and go to state 87
    MINUS           shift and go to state 61
    NAME            shift and go to state 62
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 56
    TIMES           shift and go to state 57
    ADDROF          shift and go to state 53

    allnumbers                     shift and go to state 54
    pointervar                     shift and go to state 55
    conditionbase                  shift and go to state 83
    conditional                    shift and go to state 128
    functioncall                   shift and go to state 58
    CS                             shift and go to state 86
    expression                     shift and go to state 88

state 107

    (43) conditional -> conditional UNEQUAL . conditional
    (38) conditional -> . LPAREN conditional RPAREN
    (39) conditional -> . conditionbase
    (40) conditional -> . NOT LPAREN conditional RPAREN
    (41) conditional -> . conditional LESSTHANEQ conditional
    (42) conditional -> . conditional GREATERTHANEQ conditional
    (43) conditional -> . conditional UNEQUAL conditional
    (44) conditional -> . conditional EQUALCHECK conditional
    (45) conditional -> . conditional LESSTHAN conditional
    (46) conditional -> . conditional GREATERTHAN conditional
    (47) conditional -> . conditional ANDOPERATOR conditional
    (48) conditional -> . conditional OROPERATOR conditional
    (49) conditionbase -> . CS LESSTHANEQ CS
    (50) conditionbase -> . CS GREATERTHANEQ CS
    (51) conditionbase -> . CS UNEQUAL CS
    (52) conditionbase -> . CS EQUALCHECK CS
    (53) conditionbase -> . CS LESSTHAN CS
    (54) conditionbase -> . CS GREATERTHAN CS
    (55) CS -> . expression
    (56) CS -> . NOT LPAREN expression RPAREN
    (67) expression -> . expression PLUS expression
    (68) expression -> . expression MINUS expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression TIMES expression
    (71) expression -> . MINUS expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . functioncall
    (74) expression -> . allnumbers
    (77) expression -> . pointervar
    (25) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (75) allnumbers -> . FLOAT
    (76) allnumbers -> . NUMBER
    (78) pointervar -> . TIMES pointervar
    (79) pointervar -> . ADDROF pointervar
    (80) pointervar -> . NAME

    LPAREN          shift and go to state 85
    NOT             shift and go to state 87
    MINUS           shift and go to state 61
    NAME            shift and go to state 62
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 56
    TIMES           shift and go to state 57
    ADDROF          shift and go to state 53

    allnumbers                     shift and go to state 54
    pointervar                     shift and go to state 55
    conditionbase                  shift and go to state 83
    conditional                    shift and go to state 129
    functioncall                   shift and go to state 58
    CS                             shift and go to state 86
    expression                     shift and go to state 88

state 108

    (41) conditional -> conditional LESSTHANEQ . conditional
    (38) conditional -> . LPAREN conditional RPAREN
    (39) conditional -> . conditionbase
    (40) conditional -> . NOT LPAREN conditional RPAREN
    (41) conditional -> . conditional LESSTHANEQ conditional
    (42) conditional -> . conditional GREATERTHANEQ conditional
    (43) conditional -> . conditional UNEQUAL conditional
    (44) conditional -> . conditional EQUALCHECK conditional
    (45) conditional -> . conditional LESSTHAN conditional
    (46) conditional -> . conditional GREATERTHAN conditional
    (47) conditional -> . conditional ANDOPERATOR conditional
    (48) conditional -> . conditional OROPERATOR conditional
    (49) conditionbase -> . CS LESSTHANEQ CS
    (50) conditionbase -> . CS GREATERTHANEQ CS
    (51) conditionbase -> . CS UNEQUAL CS
    (52) conditionbase -> . CS EQUALCHECK CS
    (53) conditionbase -> . CS LESSTHAN CS
    (54) conditionbase -> . CS GREATERTHAN CS
    (55) CS -> . expression
    (56) CS -> . NOT LPAREN expression RPAREN
    (67) expression -> . expression PLUS expression
    (68) expression -> . expression MINUS expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression TIMES expression
    (71) expression -> . MINUS expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . functioncall
    (74) expression -> . allnumbers
    (77) expression -> . pointervar
    (25) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (75) allnumbers -> . FLOAT
    (76) allnumbers -> . NUMBER
    (78) pointervar -> . TIMES pointervar
    (79) pointervar -> . ADDROF pointervar
    (80) pointervar -> . NAME

    LPAREN          shift and go to state 85
    NOT             shift and go to state 87
    MINUS           shift and go to state 61
    NAME            shift and go to state 62
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 56
    TIMES           shift and go to state 57
    ADDROF          shift and go to state 53

    allnumbers                     shift and go to state 54
    pointervar                     shift and go to state 55
    conditionbase                  shift and go to state 83
    conditional                    shift and go to state 130
    functioncall                   shift and go to state 58
    CS                             shift and go to state 86
    expression                     shift and go to state 88

state 109

    (44) conditional -> conditional EQUALCHECK . conditional
    (38) conditional -> . LPAREN conditional RPAREN
    (39) conditional -> . conditionbase
    (40) conditional -> . NOT LPAREN conditional RPAREN
    (41) conditional -> . conditional LESSTHANEQ conditional
    (42) conditional -> . conditional GREATERTHANEQ conditional
    (43) conditional -> . conditional UNEQUAL conditional
    (44) conditional -> . conditional EQUALCHECK conditional
    (45) conditional -> . conditional LESSTHAN conditional
    (46) conditional -> . conditional GREATERTHAN conditional
    (47) conditional -> . conditional ANDOPERATOR conditional
    (48) conditional -> . conditional OROPERATOR conditional
    (49) conditionbase -> . CS LESSTHANEQ CS
    (50) conditionbase -> . CS GREATERTHANEQ CS
    (51) conditionbase -> . CS UNEQUAL CS
    (52) conditionbase -> . CS EQUALCHECK CS
    (53) conditionbase -> . CS LESSTHAN CS
    (54) conditionbase -> . CS GREATERTHAN CS
    (55) CS -> . expression
    (56) CS -> . NOT LPAREN expression RPAREN
    (67) expression -> . expression PLUS expression
    (68) expression -> . expression MINUS expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression TIMES expression
    (71) expression -> . MINUS expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . functioncall
    (74) expression -> . allnumbers
    (77) expression -> . pointervar
    (25) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (75) allnumbers -> . FLOAT
    (76) allnumbers -> . NUMBER
    (78) pointervar -> . TIMES pointervar
    (79) pointervar -> . ADDROF pointervar
    (80) pointervar -> . NAME

    LPAREN          shift and go to state 85
    NOT             shift and go to state 87
    MINUS           shift and go to state 61
    NAME            shift and go to state 62
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 56
    TIMES           shift and go to state 57
    ADDROF          shift and go to state 53

    allnumbers                     shift and go to state 54
    pointervar                     shift and go to state 55
    conditionbase                  shift and go to state 83
    conditional                    shift and go to state 131
    functioncall                   shift and go to state 58
    CS                             shift and go to state 86
    expression                     shift and go to state 88

state 110

    (38) conditional -> LPAREN conditional . RPAREN
    (41) conditional -> conditional . LESSTHANEQ conditional
    (42) conditional -> conditional . GREATERTHANEQ conditional
    (43) conditional -> conditional . UNEQUAL conditional
    (44) conditional -> conditional . EQUALCHECK conditional
    (45) conditional -> conditional . LESSTHAN conditional
    (46) conditional -> conditional . GREATERTHAN conditional
    (47) conditional -> conditional . ANDOPERATOR conditional
    (48) conditional -> conditional . OROPERATOR conditional

    RPAREN          shift and go to state 132
    LESSTHANEQ      shift and go to state 108
    GREATERTHANEQ   shift and go to state 106
    UNEQUAL         shift and go to state 107
    EQUALCHECK      shift and go to state 109
    LESSTHAN        shift and go to state 103
    GREATERTHAN     shift and go to state 102
    ANDOPERATOR     shift and go to state 105
    OROPERATOR      shift and go to state 104


state 111

    (72) expression -> LPAREN expression . RPAREN
    (67) expression -> expression . PLUS expression
    (68) expression -> expression . MINUS expression
    (69) expression -> expression . DIVIDE expression
    (70) expression -> expression . TIMES expression
    (55) CS -> expression .

    RPAREN          shift and go to state 96
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    DIVIDE          shift and go to state 77
    TIMES           shift and go to state 79
    LESSTHANEQ      reduce using rule 55 (CS -> expression .)
    GREATERTHANEQ   reduce using rule 55 (CS -> expression .)
    UNEQUAL         reduce using rule 55 (CS -> expression .)
    EQUALCHECK      reduce using rule 55 (CS -> expression .)
    LESSTHAN        reduce using rule 55 (CS -> expression .)
    GREATERTHAN     reduce using rule 55 (CS -> expression .)


state 112

    (51) conditionbase -> CS UNEQUAL . CS
    (55) CS -> . expression
    (56) CS -> . NOT LPAREN expression RPAREN
    (67) expression -> . expression PLUS expression
    (68) expression -> . expression MINUS expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression TIMES expression
    (71) expression -> . MINUS expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . functioncall
    (74) expression -> . allnumbers
    (77) expression -> . pointervar
    (25) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (75) allnumbers -> . FLOAT
    (76) allnumbers -> . NUMBER
    (78) pointervar -> . TIMES pointervar
    (79) pointervar -> . ADDROF pointervar
    (80) pointervar -> . NAME

    NOT             shift and go to state 133
    MINUS           shift and go to state 61
    LPAREN          shift and go to state 59
    NAME            shift and go to state 62
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 56
    TIMES           shift and go to state 57
    ADDROF          shift and go to state 53

    pointervar                     shift and go to state 55
    allnumbers                     shift and go to state 54
    functioncall                   shift and go to state 58
    CS                             shift and go to state 134
    expression                     shift and go to state 88

state 113

    (53) conditionbase -> CS LESSTHAN . CS
    (55) CS -> . expression
    (56) CS -> . NOT LPAREN expression RPAREN
    (67) expression -> . expression PLUS expression
    (68) expression -> . expression MINUS expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression TIMES expression
    (71) expression -> . MINUS expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . functioncall
    (74) expression -> . allnumbers
    (77) expression -> . pointervar
    (25) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (75) allnumbers -> . FLOAT
    (76) allnumbers -> . NUMBER
    (78) pointervar -> . TIMES pointervar
    (79) pointervar -> . ADDROF pointervar
    (80) pointervar -> . NAME

    NOT             shift and go to state 133
    MINUS           shift and go to state 61
    LPAREN          shift and go to state 59
    NAME            shift and go to state 62
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 56
    TIMES           shift and go to state 57
    ADDROF          shift and go to state 53

    pointervar                     shift and go to state 55
    allnumbers                     shift and go to state 54
    functioncall                   shift and go to state 58
    CS                             shift and go to state 135
    expression                     shift and go to state 88

state 114

    (50) conditionbase -> CS GREATERTHANEQ . CS
    (55) CS -> . expression
    (56) CS -> . NOT LPAREN expression RPAREN
    (67) expression -> . expression PLUS expression
    (68) expression -> . expression MINUS expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression TIMES expression
    (71) expression -> . MINUS expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . functioncall
    (74) expression -> . allnumbers
    (77) expression -> . pointervar
    (25) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (75) allnumbers -> . FLOAT
    (76) allnumbers -> . NUMBER
    (78) pointervar -> . TIMES pointervar
    (79) pointervar -> . ADDROF pointervar
    (80) pointervar -> . NAME

    NOT             shift and go to state 133
    MINUS           shift and go to state 61
    LPAREN          shift and go to state 59
    NAME            shift and go to state 62
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 56
    TIMES           shift and go to state 57
    ADDROF          shift and go to state 53

    pointervar                     shift and go to state 55
    allnumbers                     shift and go to state 54
    functioncall                   shift and go to state 58
    CS                             shift and go to state 136
    expression                     shift and go to state 88

state 115

    (54) conditionbase -> CS GREATERTHAN . CS
    (55) CS -> . expression
    (56) CS -> . NOT LPAREN expression RPAREN
    (67) expression -> . expression PLUS expression
    (68) expression -> . expression MINUS expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression TIMES expression
    (71) expression -> . MINUS expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . functioncall
    (74) expression -> . allnumbers
    (77) expression -> . pointervar
    (25) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (75) allnumbers -> . FLOAT
    (76) allnumbers -> . NUMBER
    (78) pointervar -> . TIMES pointervar
    (79) pointervar -> . ADDROF pointervar
    (80) pointervar -> . NAME

    NOT             shift and go to state 133
    MINUS           shift and go to state 61
    LPAREN          shift and go to state 59
    NAME            shift and go to state 62
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 56
    TIMES           shift and go to state 57
    ADDROF          shift and go to state 53

    pointervar                     shift and go to state 55
    allnumbers                     shift and go to state 54
    functioncall                   shift and go to state 58
    CS                             shift and go to state 137
    expression                     shift and go to state 88

state 116

    (49) conditionbase -> CS LESSTHANEQ . CS
    (55) CS -> . expression
    (56) CS -> . NOT LPAREN expression RPAREN
    (67) expression -> . expression PLUS expression
    (68) expression -> . expression MINUS expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression TIMES expression
    (71) expression -> . MINUS expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . functioncall
    (74) expression -> . allnumbers
    (77) expression -> . pointervar
    (25) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (75) allnumbers -> . FLOAT
    (76) allnumbers -> . NUMBER
    (78) pointervar -> . TIMES pointervar
    (79) pointervar -> . ADDROF pointervar
    (80) pointervar -> . NAME

    NOT             shift and go to state 133
    MINUS           shift and go to state 61
    LPAREN          shift and go to state 59
    NAME            shift and go to state 62
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 56
    TIMES           shift and go to state 57
    ADDROF          shift and go to state 53

    pointervar                     shift and go to state 55
    allnumbers                     shift and go to state 54
    functioncall                   shift and go to state 58
    CS                             shift and go to state 138
    expression                     shift and go to state 88

state 117

    (52) conditionbase -> CS EQUALCHECK . CS
    (55) CS -> . expression
    (56) CS -> . NOT LPAREN expression RPAREN
    (67) expression -> . expression PLUS expression
    (68) expression -> . expression MINUS expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression TIMES expression
    (71) expression -> . MINUS expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . functioncall
    (74) expression -> . allnumbers
    (77) expression -> . pointervar
    (25) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (75) allnumbers -> . FLOAT
    (76) allnumbers -> . NUMBER
    (78) pointervar -> . TIMES pointervar
    (79) pointervar -> . ADDROF pointervar
    (80) pointervar -> . NAME

    NOT             shift and go to state 133
    MINUS           shift and go to state 61
    LPAREN          shift and go to state 59
    NAME            shift and go to state 62
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 56
    TIMES           shift and go to state 57
    ADDROF          shift and go to state 53

    pointervar                     shift and go to state 55
    allnumbers                     shift and go to state 54
    functioncall                   shift and go to state 58
    CS                             shift and go to state 139
    expression                     shift and go to state 88

state 118

    (40) conditional -> NOT LPAREN . conditional RPAREN
    (56) CS -> NOT LPAREN . expression RPAREN
    (38) conditional -> . LPAREN conditional RPAREN
    (39) conditional -> . conditionbase
    (40) conditional -> . NOT LPAREN conditional RPAREN
    (41) conditional -> . conditional LESSTHANEQ conditional
    (42) conditional -> . conditional GREATERTHANEQ conditional
    (43) conditional -> . conditional UNEQUAL conditional
    (44) conditional -> . conditional EQUALCHECK conditional
    (45) conditional -> . conditional LESSTHAN conditional
    (46) conditional -> . conditional GREATERTHAN conditional
    (47) conditional -> . conditional ANDOPERATOR conditional
    (48) conditional -> . conditional OROPERATOR conditional
    (67) expression -> . expression PLUS expression
    (68) expression -> . expression MINUS expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression TIMES expression
    (71) expression -> . MINUS expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . functioncall
    (74) expression -> . allnumbers
    (77) expression -> . pointervar
    (49) conditionbase -> . CS LESSTHANEQ CS
    (50) conditionbase -> . CS GREATERTHANEQ CS
    (51) conditionbase -> . CS UNEQUAL CS
    (52) conditionbase -> . CS EQUALCHECK CS
    (53) conditionbase -> . CS LESSTHAN CS
    (54) conditionbase -> . CS GREATERTHAN CS
    (25) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (75) allnumbers -> . FLOAT
    (76) allnumbers -> . NUMBER
    (78) pointervar -> . TIMES pointervar
    (79) pointervar -> . ADDROF pointervar
    (80) pointervar -> . NAME
    (55) CS -> . expression
    (56) CS -> . NOT LPAREN expression RPAREN

    LPAREN          shift and go to state 85
    NOT             shift and go to state 87
    MINUS           shift and go to state 61
    NAME            shift and go to state 62
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 56
    TIMES           shift and go to state 57
    ADDROF          shift and go to state 53

    allnumbers                     shift and go to state 54
    pointervar                     shift and go to state 55
    conditionbase                  shift and go to state 83
    conditional                    shift and go to state 140
    functioncall                   shift and go to state 58
    CS                             shift and go to state 86
    expression                     shift and go to state 141

state 119

    (65) assignment_base -> TIMES pointervar EQUALS expression .
    (67) expression -> expression . PLUS expression
    (68) expression -> expression . MINUS expression
    (69) expression -> expression . DIVIDE expression
    (70) expression -> expression . TIMES expression

    SEMICOLON       reduce using rule 65 (assignment_base -> TIMES pointervar EQUALS expression .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    DIVIDE          shift and go to state 77
    TIMES           shift and go to state 79


state 120

    (29) unmatchedstatement -> IF LPAREN conditional RPAREN . allstatement
    (30) unmatchedstatement -> IF LPAREN conditional RPAREN . statement ELSE unmatchedstatement
    (31) unmatchedstatement -> IF LPAREN conditional RPAREN . LBRACE fbody RBRACE ELSE unmatchedstatement
    (32) unmatchedstatement -> IF LPAREN conditional RPAREN . LBRACE fbody RBRACE
    (33) ifblock -> IF LPAREN conditional RPAREN . statement ELSE statement
    (34) ifblock -> IF LPAREN conditional RPAREN . statement ELSE LBRACE fbody RBRACE
    (35) ifblock -> IF LPAREN conditional RPAREN . LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE
    (36) ifblock -> IF LPAREN conditional RPAREN . LBRACE fbody RBRACE ELSE statement
    (16) allstatement -> . statement
    (17) allstatement -> . unmatchedstatement
    (18) statement -> . assignment
    (19) statement -> . declaration
    (20) statement -> . whileblock
    (21) statement -> . ifblock
    (22) statement -> . returnstatement
    (23) statement -> . functioncall
    (28) statement -> . SEMICOLON
    (29) unmatchedstatement -> . IF LPAREN conditional RPAREN allstatement
    (30) unmatchedstatement -> . IF LPAREN conditional RPAREN statement ELSE unmatchedstatement
    (31) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement
    (32) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE
    (64) assignment -> . assignment_base SEMICOLON
    (57) declaration -> . TYPE dlist1 SEMICOLON
    (37) whileblock -> . WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE
    (33) ifblock -> . IF LPAREN conditional RPAREN statement ELSE statement
    (34) ifblock -> . IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE
    (35) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE
    (36) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement
    (24) returnstatement -> . RETURN expression SEMICOLON
    (25) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (65) assignment_base -> . TIMES pointervar EQUALS expression
    (66) assignment_base -> . NAME EQUALS expression

    LBRACE          shift and go to state 143
    SEMICOLON       shift and go to state 36
    IF              shift and go to state 46
    TYPE            shift and go to state 50
    WHILE           shift and go to state 34
    RETURN          shift and go to state 33
    NAME            shift and go to state 47
    TIMES           shift and go to state 44

    unmatchedstatement             shift and go to state 35
    declaration                    shift and go to state 43
    assignment                     shift and go to state 42
    whileblock                     shift and go to state 37
    ifblock                        shift and go to state 38
    allstatement                   shift and go to state 144
    statement                      shift and go to state 142
    functioncall                   shift and go to state 40
    returnstatement                shift and go to state 49
    assignment_base                shift and go to state 41

state 121

    (25) functioncall -> NAME LPAREN arguments RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 145


state 122

    (27) arguments -> expression COMMA . arguments
    (26) arguments -> . expression
    (27) arguments -> . expression COMMA arguments
    (67) expression -> . expression PLUS expression
    (68) expression -> . expression MINUS expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression TIMES expression
    (71) expression -> . MINUS expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . functioncall
    (74) expression -> . allnumbers
    (77) expression -> . pointervar
    (25) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (75) allnumbers -> . FLOAT
    (76) allnumbers -> . NUMBER
    (78) pointervar -> . TIMES pointervar
    (79) pointervar -> . ADDROF pointervar
    (80) pointervar -> . NAME

    MINUS           shift and go to state 61
    LPAREN          shift and go to state 59
    NAME            shift and go to state 62
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 56
    TIMES           shift and go to state 57
    ADDROF          shift and go to state 53

    functioncall                   shift and go to state 58
    pointervar                     shift and go to state 55
    allnumbers                     shift and go to state 54
    expression                     shift and go to state 93
    arguments                      shift and go to state 146

state 123

    (37) whileblock -> WHILE LPAREN conditional RPAREN LBRACE . fbody RBRACE
    (14) fbody -> . allstatement fbody
    (15) fbody -> .
    (16) allstatement -> . statement
    (17) allstatement -> . unmatchedstatement
    (18) statement -> . assignment
    (19) statement -> . declaration
    (20) statement -> . whileblock
    (21) statement -> . ifblock
    (22) statement -> . returnstatement
    (23) statement -> . functioncall
    (28) statement -> . SEMICOLON
    (29) unmatchedstatement -> . IF LPAREN conditional RPAREN allstatement
    (30) unmatchedstatement -> . IF LPAREN conditional RPAREN statement ELSE unmatchedstatement
    (31) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement
    (32) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE
    (64) assignment -> . assignment_base SEMICOLON
    (57) declaration -> . TYPE dlist1 SEMICOLON
    (37) whileblock -> . WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE
    (33) ifblock -> . IF LPAREN conditional RPAREN statement ELSE statement
    (34) ifblock -> . IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE
    (35) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE
    (36) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement
    (24) returnstatement -> . RETURN expression SEMICOLON
    (25) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (65) assignment_base -> . TIMES pointervar EQUALS expression
    (66) assignment_base -> . NAME EQUALS expression

    RBRACE          reduce using rule 15 (fbody -> .)
    SEMICOLON       shift and go to state 36
    IF              shift and go to state 46
    TYPE            shift and go to state 50
    WHILE           shift and go to state 34
    RETURN          shift and go to state 33
    NAME            shift and go to state 47
    TIMES           shift and go to state 44

    unmatchedstatement             shift and go to state 35
    declaration                    shift and go to state 43
    assignment                     shift and go to state 42
    whileblock                     shift and go to state 37
    ifblock                        shift and go to state 38
    allstatement                   shift and go to state 48
    statement                      shift and go to state 39
    fbody                          shift and go to state 147
    functioncall                   shift and go to state 40
    returnstatement                shift and go to state 49
    assignment_base                shift and go to state 41

state 124

    (46) conditional -> conditional GREATERTHAN conditional .
    (41) conditional -> conditional . LESSTHANEQ conditional
    (42) conditional -> conditional . GREATERTHANEQ conditional
    (43) conditional -> conditional . UNEQUAL conditional
    (44) conditional -> conditional . EQUALCHECK conditional
    (45) conditional -> conditional . LESSTHAN conditional
    (46) conditional -> conditional . GREATERTHAN conditional
    (47) conditional -> conditional . ANDOPERATOR conditional
    (48) conditional -> conditional . OROPERATOR conditional

    LESSTHANEQ      reduce using rule 46 (conditional -> conditional GREATERTHAN conditional .)
    GREATERTHANEQ   reduce using rule 46 (conditional -> conditional GREATERTHAN conditional .)
    UNEQUAL         reduce using rule 46 (conditional -> conditional GREATERTHAN conditional .)
    EQUALCHECK      reduce using rule 46 (conditional -> conditional GREATERTHAN conditional .)
    LESSTHAN        reduce using rule 46 (conditional -> conditional GREATERTHAN conditional .)
    GREATERTHAN     reduce using rule 46 (conditional -> conditional GREATERTHAN conditional .)
    ANDOPERATOR     reduce using rule 46 (conditional -> conditional GREATERTHAN conditional .)
    OROPERATOR      reduce using rule 46 (conditional -> conditional GREATERTHAN conditional .)
    RPAREN          reduce using rule 46 (conditional -> conditional GREATERTHAN conditional .)

  ! LESSTHANEQ      [ shift and go to state 108 ]
  ! GREATERTHANEQ   [ shift and go to state 106 ]
  ! UNEQUAL         [ shift and go to state 107 ]
  ! EQUALCHECK      [ shift and go to state 109 ]
  ! LESSTHAN        [ shift and go to state 103 ]
  ! GREATERTHAN     [ shift and go to state 102 ]
  ! ANDOPERATOR     [ shift and go to state 105 ]
  ! OROPERATOR      [ shift and go to state 104 ]


state 125

    (45) conditional -> conditional LESSTHAN conditional .
    (41) conditional -> conditional . LESSTHANEQ conditional
    (42) conditional -> conditional . GREATERTHANEQ conditional
    (43) conditional -> conditional . UNEQUAL conditional
    (44) conditional -> conditional . EQUALCHECK conditional
    (45) conditional -> conditional . LESSTHAN conditional
    (46) conditional -> conditional . GREATERTHAN conditional
    (47) conditional -> conditional . ANDOPERATOR conditional
    (48) conditional -> conditional . OROPERATOR conditional

    LESSTHANEQ      reduce using rule 45 (conditional -> conditional LESSTHAN conditional .)
    GREATERTHANEQ   reduce using rule 45 (conditional -> conditional LESSTHAN conditional .)
    UNEQUAL         reduce using rule 45 (conditional -> conditional LESSTHAN conditional .)
    EQUALCHECK      reduce using rule 45 (conditional -> conditional LESSTHAN conditional .)
    LESSTHAN        reduce using rule 45 (conditional -> conditional LESSTHAN conditional .)
    GREATERTHAN     reduce using rule 45 (conditional -> conditional LESSTHAN conditional .)
    ANDOPERATOR     reduce using rule 45 (conditional -> conditional LESSTHAN conditional .)
    OROPERATOR      reduce using rule 45 (conditional -> conditional LESSTHAN conditional .)
    RPAREN          reduce using rule 45 (conditional -> conditional LESSTHAN conditional .)

  ! LESSTHANEQ      [ shift and go to state 108 ]
  ! GREATERTHANEQ   [ shift and go to state 106 ]
  ! UNEQUAL         [ shift and go to state 107 ]
  ! EQUALCHECK      [ shift and go to state 109 ]
  ! LESSTHAN        [ shift and go to state 103 ]
  ! GREATERTHAN     [ shift and go to state 102 ]
  ! ANDOPERATOR     [ shift and go to state 105 ]
  ! OROPERATOR      [ shift and go to state 104 ]


state 126

    (48) conditional -> conditional OROPERATOR conditional .
    (41) conditional -> conditional . LESSTHANEQ conditional
    (42) conditional -> conditional . GREATERTHANEQ conditional
    (43) conditional -> conditional . UNEQUAL conditional
    (44) conditional -> conditional . EQUALCHECK conditional
    (45) conditional -> conditional . LESSTHAN conditional
    (46) conditional -> conditional . GREATERTHAN conditional
    (47) conditional -> conditional . ANDOPERATOR conditional
    (48) conditional -> conditional . OROPERATOR conditional

    OROPERATOR      reduce using rule 48 (conditional -> conditional OROPERATOR conditional .)
    RPAREN          reduce using rule 48 (conditional -> conditional OROPERATOR conditional .)
    LESSTHANEQ      shift and go to state 108
    GREATERTHANEQ   shift and go to state 106
    UNEQUAL         shift and go to state 107
    EQUALCHECK      shift and go to state 109
    LESSTHAN        shift and go to state 103
    GREATERTHAN     shift and go to state 102
    ANDOPERATOR     shift and go to state 105

  ! LESSTHANEQ      [ reduce using rule 48 (conditional -> conditional OROPERATOR conditional .) ]
  ! GREATERTHANEQ   [ reduce using rule 48 (conditional -> conditional OROPERATOR conditional .) ]
  ! UNEQUAL         [ reduce using rule 48 (conditional -> conditional OROPERATOR conditional .) ]
  ! EQUALCHECK      [ reduce using rule 48 (conditional -> conditional OROPERATOR conditional .) ]
  ! LESSTHAN        [ reduce using rule 48 (conditional -> conditional OROPERATOR conditional .) ]
  ! GREATERTHAN     [ reduce using rule 48 (conditional -> conditional OROPERATOR conditional .) ]
  ! ANDOPERATOR     [ reduce using rule 48 (conditional -> conditional OROPERATOR conditional .) ]
  ! OROPERATOR      [ shift and go to state 104 ]


state 127

    (47) conditional -> conditional ANDOPERATOR conditional .
    (41) conditional -> conditional . LESSTHANEQ conditional
    (42) conditional -> conditional . GREATERTHANEQ conditional
    (43) conditional -> conditional . UNEQUAL conditional
    (44) conditional -> conditional . EQUALCHECK conditional
    (45) conditional -> conditional . LESSTHAN conditional
    (46) conditional -> conditional . GREATERTHAN conditional
    (47) conditional -> conditional . ANDOPERATOR conditional
    (48) conditional -> conditional . OROPERATOR conditional

    ANDOPERATOR     reduce using rule 47 (conditional -> conditional ANDOPERATOR conditional .)
    OROPERATOR      reduce using rule 47 (conditional -> conditional ANDOPERATOR conditional .)
    RPAREN          reduce using rule 47 (conditional -> conditional ANDOPERATOR conditional .)
    LESSTHANEQ      shift and go to state 108
    GREATERTHANEQ   shift and go to state 106
    UNEQUAL         shift and go to state 107
    EQUALCHECK      shift and go to state 109
    LESSTHAN        shift and go to state 103
    GREATERTHAN     shift and go to state 102

  ! LESSTHANEQ      [ reduce using rule 47 (conditional -> conditional ANDOPERATOR conditional .) ]
  ! GREATERTHANEQ   [ reduce using rule 47 (conditional -> conditional ANDOPERATOR conditional .) ]
  ! UNEQUAL         [ reduce using rule 47 (conditional -> conditional ANDOPERATOR conditional .) ]
  ! EQUALCHECK      [ reduce using rule 47 (conditional -> conditional ANDOPERATOR conditional .) ]
  ! LESSTHAN        [ reduce using rule 47 (conditional -> conditional ANDOPERATOR conditional .) ]
  ! GREATERTHAN     [ reduce using rule 47 (conditional -> conditional ANDOPERATOR conditional .) ]
  ! ANDOPERATOR     [ shift and go to state 105 ]
  ! OROPERATOR      [ shift and go to state 104 ]


state 128

    (42) conditional -> conditional GREATERTHANEQ conditional .
    (41) conditional -> conditional . LESSTHANEQ conditional
    (42) conditional -> conditional . GREATERTHANEQ conditional
    (43) conditional -> conditional . UNEQUAL conditional
    (44) conditional -> conditional . EQUALCHECK conditional
    (45) conditional -> conditional . LESSTHAN conditional
    (46) conditional -> conditional . GREATERTHAN conditional
    (47) conditional -> conditional . ANDOPERATOR conditional
    (48) conditional -> conditional . OROPERATOR conditional

    LESSTHANEQ      reduce using rule 42 (conditional -> conditional GREATERTHANEQ conditional .)
    GREATERTHANEQ   reduce using rule 42 (conditional -> conditional GREATERTHANEQ conditional .)
    UNEQUAL         reduce using rule 42 (conditional -> conditional GREATERTHANEQ conditional .)
    EQUALCHECK      reduce using rule 42 (conditional -> conditional GREATERTHANEQ conditional .)
    LESSTHAN        reduce using rule 42 (conditional -> conditional GREATERTHANEQ conditional .)
    GREATERTHAN     reduce using rule 42 (conditional -> conditional GREATERTHANEQ conditional .)
    ANDOPERATOR     reduce using rule 42 (conditional -> conditional GREATERTHANEQ conditional .)
    OROPERATOR      reduce using rule 42 (conditional -> conditional GREATERTHANEQ conditional .)
    RPAREN          reduce using rule 42 (conditional -> conditional GREATERTHANEQ conditional .)

  ! LESSTHANEQ      [ shift and go to state 108 ]
  ! GREATERTHANEQ   [ shift and go to state 106 ]
  ! UNEQUAL         [ shift and go to state 107 ]
  ! EQUALCHECK      [ shift and go to state 109 ]
  ! LESSTHAN        [ shift and go to state 103 ]
  ! GREATERTHAN     [ shift and go to state 102 ]
  ! ANDOPERATOR     [ shift and go to state 105 ]
  ! OROPERATOR      [ shift and go to state 104 ]


state 129

    (43) conditional -> conditional UNEQUAL conditional .
    (41) conditional -> conditional . LESSTHANEQ conditional
    (42) conditional -> conditional . GREATERTHANEQ conditional
    (43) conditional -> conditional . UNEQUAL conditional
    (44) conditional -> conditional . EQUALCHECK conditional
    (45) conditional -> conditional . LESSTHAN conditional
    (46) conditional -> conditional . GREATERTHAN conditional
    (47) conditional -> conditional . ANDOPERATOR conditional
    (48) conditional -> conditional . OROPERATOR conditional

    UNEQUAL         reduce using rule 43 (conditional -> conditional UNEQUAL conditional .)
    EQUALCHECK      reduce using rule 43 (conditional -> conditional UNEQUAL conditional .)
    ANDOPERATOR     reduce using rule 43 (conditional -> conditional UNEQUAL conditional .)
    OROPERATOR      reduce using rule 43 (conditional -> conditional UNEQUAL conditional .)
    RPAREN          reduce using rule 43 (conditional -> conditional UNEQUAL conditional .)
    LESSTHANEQ      shift and go to state 108
    GREATERTHANEQ   shift and go to state 106
    LESSTHAN        shift and go to state 103
    GREATERTHAN     shift and go to state 102

  ! LESSTHANEQ      [ reduce using rule 43 (conditional -> conditional UNEQUAL conditional .) ]
  ! GREATERTHANEQ   [ reduce using rule 43 (conditional -> conditional UNEQUAL conditional .) ]
  ! LESSTHAN        [ reduce using rule 43 (conditional -> conditional UNEQUAL conditional .) ]
  ! GREATERTHAN     [ reduce using rule 43 (conditional -> conditional UNEQUAL conditional .) ]
  ! UNEQUAL         [ shift and go to state 107 ]
  ! EQUALCHECK      [ shift and go to state 109 ]
  ! ANDOPERATOR     [ shift and go to state 105 ]
  ! OROPERATOR      [ shift and go to state 104 ]


state 130

    (41) conditional -> conditional LESSTHANEQ conditional .
    (41) conditional -> conditional . LESSTHANEQ conditional
    (42) conditional -> conditional . GREATERTHANEQ conditional
    (43) conditional -> conditional . UNEQUAL conditional
    (44) conditional -> conditional . EQUALCHECK conditional
    (45) conditional -> conditional . LESSTHAN conditional
    (46) conditional -> conditional . GREATERTHAN conditional
    (47) conditional -> conditional . ANDOPERATOR conditional
    (48) conditional -> conditional . OROPERATOR conditional

    LESSTHANEQ      reduce using rule 41 (conditional -> conditional LESSTHANEQ conditional .)
    GREATERTHANEQ   reduce using rule 41 (conditional -> conditional LESSTHANEQ conditional .)
    UNEQUAL         reduce using rule 41 (conditional -> conditional LESSTHANEQ conditional .)
    EQUALCHECK      reduce using rule 41 (conditional -> conditional LESSTHANEQ conditional .)
    LESSTHAN        reduce using rule 41 (conditional -> conditional LESSTHANEQ conditional .)
    GREATERTHAN     reduce using rule 41 (conditional -> conditional LESSTHANEQ conditional .)
    ANDOPERATOR     reduce using rule 41 (conditional -> conditional LESSTHANEQ conditional .)
    OROPERATOR      reduce using rule 41 (conditional -> conditional LESSTHANEQ conditional .)
    RPAREN          reduce using rule 41 (conditional -> conditional LESSTHANEQ conditional .)

  ! LESSTHANEQ      [ shift and go to state 108 ]
  ! GREATERTHANEQ   [ shift and go to state 106 ]
  ! UNEQUAL         [ shift and go to state 107 ]
  ! EQUALCHECK      [ shift and go to state 109 ]
  ! LESSTHAN        [ shift and go to state 103 ]
  ! GREATERTHAN     [ shift and go to state 102 ]
  ! ANDOPERATOR     [ shift and go to state 105 ]
  ! OROPERATOR      [ shift and go to state 104 ]


state 131

    (44) conditional -> conditional EQUALCHECK conditional .
    (41) conditional -> conditional . LESSTHANEQ conditional
    (42) conditional -> conditional . GREATERTHANEQ conditional
    (43) conditional -> conditional . UNEQUAL conditional
    (44) conditional -> conditional . EQUALCHECK conditional
    (45) conditional -> conditional . LESSTHAN conditional
    (46) conditional -> conditional . GREATERTHAN conditional
    (47) conditional -> conditional . ANDOPERATOR conditional
    (48) conditional -> conditional . OROPERATOR conditional

    UNEQUAL         reduce using rule 44 (conditional -> conditional EQUALCHECK conditional .)
    EQUALCHECK      reduce using rule 44 (conditional -> conditional EQUALCHECK conditional .)
    ANDOPERATOR     reduce using rule 44 (conditional -> conditional EQUALCHECK conditional .)
    OROPERATOR      reduce using rule 44 (conditional -> conditional EQUALCHECK conditional .)
    RPAREN          reduce using rule 44 (conditional -> conditional EQUALCHECK conditional .)
    LESSTHANEQ      shift and go to state 108
    GREATERTHANEQ   shift and go to state 106
    LESSTHAN        shift and go to state 103
    GREATERTHAN     shift and go to state 102

  ! LESSTHANEQ      [ reduce using rule 44 (conditional -> conditional EQUALCHECK conditional .) ]
  ! GREATERTHANEQ   [ reduce using rule 44 (conditional -> conditional EQUALCHECK conditional .) ]
  ! LESSTHAN        [ reduce using rule 44 (conditional -> conditional EQUALCHECK conditional .) ]
  ! GREATERTHAN     [ reduce using rule 44 (conditional -> conditional EQUALCHECK conditional .) ]
  ! UNEQUAL         [ shift and go to state 107 ]
  ! EQUALCHECK      [ shift and go to state 109 ]
  ! ANDOPERATOR     [ shift and go to state 105 ]
  ! OROPERATOR      [ shift and go to state 104 ]


state 132

    (38) conditional -> LPAREN conditional RPAREN .

    LESSTHANEQ      reduce using rule 38 (conditional -> LPAREN conditional RPAREN .)
    GREATERTHANEQ   reduce using rule 38 (conditional -> LPAREN conditional RPAREN .)
    UNEQUAL         reduce using rule 38 (conditional -> LPAREN conditional RPAREN .)
    EQUALCHECK      reduce using rule 38 (conditional -> LPAREN conditional RPAREN .)
    LESSTHAN        reduce using rule 38 (conditional -> LPAREN conditional RPAREN .)
    GREATERTHAN     reduce using rule 38 (conditional -> LPAREN conditional RPAREN .)
    ANDOPERATOR     reduce using rule 38 (conditional -> LPAREN conditional RPAREN .)
    OROPERATOR      reduce using rule 38 (conditional -> LPAREN conditional RPAREN .)
    RPAREN          reduce using rule 38 (conditional -> LPAREN conditional RPAREN .)


state 133

    (56) CS -> NOT . LPAREN expression RPAREN

    LPAREN          shift and go to state 148


state 134

    (51) conditionbase -> CS UNEQUAL CS .

    LESSTHANEQ      reduce using rule 51 (conditionbase -> CS UNEQUAL CS .)
    GREATERTHANEQ   reduce using rule 51 (conditionbase -> CS UNEQUAL CS .)
    UNEQUAL         reduce using rule 51 (conditionbase -> CS UNEQUAL CS .)
    EQUALCHECK      reduce using rule 51 (conditionbase -> CS UNEQUAL CS .)
    LESSTHAN        reduce using rule 51 (conditionbase -> CS UNEQUAL CS .)
    GREATERTHAN     reduce using rule 51 (conditionbase -> CS UNEQUAL CS .)
    ANDOPERATOR     reduce using rule 51 (conditionbase -> CS UNEQUAL CS .)
    OROPERATOR      reduce using rule 51 (conditionbase -> CS UNEQUAL CS .)
    RPAREN          reduce using rule 51 (conditionbase -> CS UNEQUAL CS .)


state 135

    (53) conditionbase -> CS LESSTHAN CS .

    LESSTHANEQ      reduce using rule 53 (conditionbase -> CS LESSTHAN CS .)
    GREATERTHANEQ   reduce using rule 53 (conditionbase -> CS LESSTHAN CS .)
    UNEQUAL         reduce using rule 53 (conditionbase -> CS LESSTHAN CS .)
    EQUALCHECK      reduce using rule 53 (conditionbase -> CS LESSTHAN CS .)
    LESSTHAN        reduce using rule 53 (conditionbase -> CS LESSTHAN CS .)
    GREATERTHAN     reduce using rule 53 (conditionbase -> CS LESSTHAN CS .)
    ANDOPERATOR     reduce using rule 53 (conditionbase -> CS LESSTHAN CS .)
    OROPERATOR      reduce using rule 53 (conditionbase -> CS LESSTHAN CS .)
    RPAREN          reduce using rule 53 (conditionbase -> CS LESSTHAN CS .)


state 136

    (50) conditionbase -> CS GREATERTHANEQ CS .

    LESSTHANEQ      reduce using rule 50 (conditionbase -> CS GREATERTHANEQ CS .)
    GREATERTHANEQ   reduce using rule 50 (conditionbase -> CS GREATERTHANEQ CS .)
    UNEQUAL         reduce using rule 50 (conditionbase -> CS GREATERTHANEQ CS .)
    EQUALCHECK      reduce using rule 50 (conditionbase -> CS GREATERTHANEQ CS .)
    LESSTHAN        reduce using rule 50 (conditionbase -> CS GREATERTHANEQ CS .)
    GREATERTHAN     reduce using rule 50 (conditionbase -> CS GREATERTHANEQ CS .)
    ANDOPERATOR     reduce using rule 50 (conditionbase -> CS GREATERTHANEQ CS .)
    OROPERATOR      reduce using rule 50 (conditionbase -> CS GREATERTHANEQ CS .)
    RPAREN          reduce using rule 50 (conditionbase -> CS GREATERTHANEQ CS .)


state 137

    (54) conditionbase -> CS GREATERTHAN CS .

    LESSTHANEQ      reduce using rule 54 (conditionbase -> CS GREATERTHAN CS .)
    GREATERTHANEQ   reduce using rule 54 (conditionbase -> CS GREATERTHAN CS .)
    UNEQUAL         reduce using rule 54 (conditionbase -> CS GREATERTHAN CS .)
    EQUALCHECK      reduce using rule 54 (conditionbase -> CS GREATERTHAN CS .)
    LESSTHAN        reduce using rule 54 (conditionbase -> CS GREATERTHAN CS .)
    GREATERTHAN     reduce using rule 54 (conditionbase -> CS GREATERTHAN CS .)
    ANDOPERATOR     reduce using rule 54 (conditionbase -> CS GREATERTHAN CS .)
    OROPERATOR      reduce using rule 54 (conditionbase -> CS GREATERTHAN CS .)
    RPAREN          reduce using rule 54 (conditionbase -> CS GREATERTHAN CS .)


state 138

    (49) conditionbase -> CS LESSTHANEQ CS .

    LESSTHANEQ      reduce using rule 49 (conditionbase -> CS LESSTHANEQ CS .)
    GREATERTHANEQ   reduce using rule 49 (conditionbase -> CS LESSTHANEQ CS .)
    UNEQUAL         reduce using rule 49 (conditionbase -> CS LESSTHANEQ CS .)
    EQUALCHECK      reduce using rule 49 (conditionbase -> CS LESSTHANEQ CS .)
    LESSTHAN        reduce using rule 49 (conditionbase -> CS LESSTHANEQ CS .)
    GREATERTHAN     reduce using rule 49 (conditionbase -> CS LESSTHANEQ CS .)
    ANDOPERATOR     reduce using rule 49 (conditionbase -> CS LESSTHANEQ CS .)
    OROPERATOR      reduce using rule 49 (conditionbase -> CS LESSTHANEQ CS .)
    RPAREN          reduce using rule 49 (conditionbase -> CS LESSTHANEQ CS .)


state 139

    (52) conditionbase -> CS EQUALCHECK CS .

    LESSTHANEQ      reduce using rule 52 (conditionbase -> CS EQUALCHECK CS .)
    GREATERTHANEQ   reduce using rule 52 (conditionbase -> CS EQUALCHECK CS .)
    UNEQUAL         reduce using rule 52 (conditionbase -> CS EQUALCHECK CS .)
    EQUALCHECK      reduce using rule 52 (conditionbase -> CS EQUALCHECK CS .)
    LESSTHAN        reduce using rule 52 (conditionbase -> CS EQUALCHECK CS .)
    GREATERTHAN     reduce using rule 52 (conditionbase -> CS EQUALCHECK CS .)
    ANDOPERATOR     reduce using rule 52 (conditionbase -> CS EQUALCHECK CS .)
    OROPERATOR      reduce using rule 52 (conditionbase -> CS EQUALCHECK CS .)
    RPAREN          reduce using rule 52 (conditionbase -> CS EQUALCHECK CS .)


state 140

    (40) conditional -> NOT LPAREN conditional . RPAREN
    (41) conditional -> conditional . LESSTHANEQ conditional
    (42) conditional -> conditional . GREATERTHANEQ conditional
    (43) conditional -> conditional . UNEQUAL conditional
    (44) conditional -> conditional . EQUALCHECK conditional
    (45) conditional -> conditional . LESSTHAN conditional
    (46) conditional -> conditional . GREATERTHAN conditional
    (47) conditional -> conditional . ANDOPERATOR conditional
    (48) conditional -> conditional . OROPERATOR conditional

    RPAREN          shift and go to state 149
    LESSTHANEQ      shift and go to state 108
    GREATERTHANEQ   shift and go to state 106
    UNEQUAL         shift and go to state 107
    EQUALCHECK      shift and go to state 109
    LESSTHAN        shift and go to state 103
    GREATERTHAN     shift and go to state 102
    ANDOPERATOR     shift and go to state 105
    OROPERATOR      shift and go to state 104


state 141

    (56) CS -> NOT LPAREN expression . RPAREN
    (67) expression -> expression . PLUS expression
    (68) expression -> expression . MINUS expression
    (69) expression -> expression . DIVIDE expression
    (70) expression -> expression . TIMES expression
    (55) CS -> expression .

    RPAREN          shift and go to state 150
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    DIVIDE          shift and go to state 77
    TIMES           shift and go to state 79
    LESSTHANEQ      reduce using rule 55 (CS -> expression .)
    GREATERTHANEQ   reduce using rule 55 (CS -> expression .)
    UNEQUAL         reduce using rule 55 (CS -> expression .)
    EQUALCHECK      reduce using rule 55 (CS -> expression .)
    LESSTHAN        reduce using rule 55 (CS -> expression .)
    GREATERTHAN     reduce using rule 55 (CS -> expression .)


state 142

    (30) unmatchedstatement -> IF LPAREN conditional RPAREN statement . ELSE unmatchedstatement
    (33) ifblock -> IF LPAREN conditional RPAREN statement . ELSE statement
    (34) ifblock -> IF LPAREN conditional RPAREN statement . ELSE LBRACE fbody RBRACE
    (16) allstatement -> statement .

    ELSE            shift and go to state 151
    SEMICOLON       reduce using rule 16 (allstatement -> statement .)
    IF              reduce using rule 16 (allstatement -> statement .)
    TYPE            reduce using rule 16 (allstatement -> statement .)
    WHILE           reduce using rule 16 (allstatement -> statement .)
    RETURN          reduce using rule 16 (allstatement -> statement .)
    NAME            reduce using rule 16 (allstatement -> statement .)
    TIMES           reduce using rule 16 (allstatement -> statement .)
    RBRACE          reduce using rule 16 (allstatement -> statement .)


state 143

    (31) unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE . fbody RBRACE ELSE unmatchedstatement
    (32) unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE . fbody RBRACE
    (35) ifblock -> IF LPAREN conditional RPAREN LBRACE . fbody RBRACE ELSE LBRACE fbody RBRACE
    (36) ifblock -> IF LPAREN conditional RPAREN LBRACE . fbody RBRACE ELSE statement
    (14) fbody -> . allstatement fbody
    (15) fbody -> .
    (16) allstatement -> . statement
    (17) allstatement -> . unmatchedstatement
    (18) statement -> . assignment
    (19) statement -> . declaration
    (20) statement -> . whileblock
    (21) statement -> . ifblock
    (22) statement -> . returnstatement
    (23) statement -> . functioncall
    (28) statement -> . SEMICOLON
    (29) unmatchedstatement -> . IF LPAREN conditional RPAREN allstatement
    (30) unmatchedstatement -> . IF LPAREN conditional RPAREN statement ELSE unmatchedstatement
    (31) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement
    (32) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE
    (64) assignment -> . assignment_base SEMICOLON
    (57) declaration -> . TYPE dlist1 SEMICOLON
    (37) whileblock -> . WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE
    (33) ifblock -> . IF LPAREN conditional RPAREN statement ELSE statement
    (34) ifblock -> . IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE
    (35) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE
    (36) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement
    (24) returnstatement -> . RETURN expression SEMICOLON
    (25) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (65) assignment_base -> . TIMES pointervar EQUALS expression
    (66) assignment_base -> . NAME EQUALS expression

    RBRACE          reduce using rule 15 (fbody -> .)
    SEMICOLON       shift and go to state 36
    IF              shift and go to state 46
    TYPE            shift and go to state 50
    WHILE           shift and go to state 34
    RETURN          shift and go to state 33
    NAME            shift and go to state 47
    TIMES           shift and go to state 44

    unmatchedstatement             shift and go to state 35
    declaration                    shift and go to state 43
    assignment                     shift and go to state 42
    whileblock                     shift and go to state 37
    ifblock                        shift and go to state 38
    allstatement                   shift and go to state 48
    statement                      shift and go to state 39
    fbody                          shift and go to state 152
    functioncall                   shift and go to state 40
    returnstatement                shift and go to state 49
    assignment_base                shift and go to state 41

state 144

    (29) unmatchedstatement -> IF LPAREN conditional RPAREN allstatement .

    SEMICOLON       reduce using rule 29 (unmatchedstatement -> IF LPAREN conditional RPAREN allstatement .)
    IF              reduce using rule 29 (unmatchedstatement -> IF LPAREN conditional RPAREN allstatement .)
    TYPE            reduce using rule 29 (unmatchedstatement -> IF LPAREN conditional RPAREN allstatement .)
    WHILE           reduce using rule 29 (unmatchedstatement -> IF LPAREN conditional RPAREN allstatement .)
    RETURN          reduce using rule 29 (unmatchedstatement -> IF LPAREN conditional RPAREN allstatement .)
    NAME            reduce using rule 29 (unmatchedstatement -> IF LPAREN conditional RPAREN allstatement .)
    TIMES           reduce using rule 29 (unmatchedstatement -> IF LPAREN conditional RPAREN allstatement .)
    RBRACE          reduce using rule 29 (unmatchedstatement -> IF LPAREN conditional RPAREN allstatement .)


state 145

    (25) functioncall -> NAME LPAREN arguments RPAREN SEMICOLON .

    SEMICOLON       reduce using rule 25 (functioncall -> NAME LPAREN arguments RPAREN SEMICOLON .)
    IF              reduce using rule 25 (functioncall -> NAME LPAREN arguments RPAREN SEMICOLON .)
    TYPE            reduce using rule 25 (functioncall -> NAME LPAREN arguments RPAREN SEMICOLON .)
    WHILE           reduce using rule 25 (functioncall -> NAME LPAREN arguments RPAREN SEMICOLON .)
    RETURN          reduce using rule 25 (functioncall -> NAME LPAREN arguments RPAREN SEMICOLON .)
    NAME            reduce using rule 25 (functioncall -> NAME LPAREN arguments RPAREN SEMICOLON .)
    TIMES           reduce using rule 25 (functioncall -> NAME LPAREN arguments RPAREN SEMICOLON .)
    RBRACE          reduce using rule 25 (functioncall -> NAME LPAREN arguments RPAREN SEMICOLON .)
    ELSE            reduce using rule 25 (functioncall -> NAME LPAREN arguments RPAREN SEMICOLON .)
    PLUS            reduce using rule 25 (functioncall -> NAME LPAREN arguments RPAREN SEMICOLON .)
    MINUS           reduce using rule 25 (functioncall -> NAME LPAREN arguments RPAREN SEMICOLON .)
    DIVIDE          reduce using rule 25 (functioncall -> NAME LPAREN arguments RPAREN SEMICOLON .)
    LESSTHANEQ      reduce using rule 25 (functioncall -> NAME LPAREN arguments RPAREN SEMICOLON .)
    GREATERTHANEQ   reduce using rule 25 (functioncall -> NAME LPAREN arguments RPAREN SEMICOLON .)
    UNEQUAL         reduce using rule 25 (functioncall -> NAME LPAREN arguments RPAREN SEMICOLON .)
    EQUALCHECK      reduce using rule 25 (functioncall -> NAME LPAREN arguments RPAREN SEMICOLON .)
    LESSTHAN        reduce using rule 25 (functioncall -> NAME LPAREN arguments RPAREN SEMICOLON .)
    GREATERTHAN     reduce using rule 25 (functioncall -> NAME LPAREN arguments RPAREN SEMICOLON .)
    COMMA           reduce using rule 25 (functioncall -> NAME LPAREN arguments RPAREN SEMICOLON .)
    RPAREN          reduce using rule 25 (functioncall -> NAME LPAREN arguments RPAREN SEMICOLON .)
    ANDOPERATOR     reduce using rule 25 (functioncall -> NAME LPAREN arguments RPAREN SEMICOLON .)
    OROPERATOR      reduce using rule 25 (functioncall -> NAME LPAREN arguments RPAREN SEMICOLON .)


state 146

    (27) arguments -> expression COMMA arguments .

    RPAREN          reduce using rule 27 (arguments -> expression COMMA arguments .)


state 147

    (37) whileblock -> WHILE LPAREN conditional RPAREN LBRACE fbody . RBRACE

    RBRACE          shift and go to state 153


state 148

    (56) CS -> NOT LPAREN . expression RPAREN
    (67) expression -> . expression PLUS expression
    (68) expression -> . expression MINUS expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression TIMES expression
    (71) expression -> . MINUS expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . functioncall
    (74) expression -> . allnumbers
    (77) expression -> . pointervar
    (25) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (75) allnumbers -> . FLOAT
    (76) allnumbers -> . NUMBER
    (78) pointervar -> . TIMES pointervar
    (79) pointervar -> . ADDROF pointervar
    (80) pointervar -> . NAME

    MINUS           shift and go to state 61
    LPAREN          shift and go to state 59
    NAME            shift and go to state 62
    FLOAT           shift and go to state 52
    NUMBER          shift and go to state 56
    TIMES           shift and go to state 57
    ADDROF          shift and go to state 53

    functioncall                   shift and go to state 58
    pointervar                     shift and go to state 55
    allnumbers                     shift and go to state 54
    expression                     shift and go to state 154

state 149

    (40) conditional -> NOT LPAREN conditional RPAREN .

    LESSTHANEQ      reduce using rule 40 (conditional -> NOT LPAREN conditional RPAREN .)
    GREATERTHANEQ   reduce using rule 40 (conditional -> NOT LPAREN conditional RPAREN .)
    UNEQUAL         reduce using rule 40 (conditional -> NOT LPAREN conditional RPAREN .)
    EQUALCHECK      reduce using rule 40 (conditional -> NOT LPAREN conditional RPAREN .)
    LESSTHAN        reduce using rule 40 (conditional -> NOT LPAREN conditional RPAREN .)
    GREATERTHAN     reduce using rule 40 (conditional -> NOT LPAREN conditional RPAREN .)
    ANDOPERATOR     reduce using rule 40 (conditional -> NOT LPAREN conditional RPAREN .)
    OROPERATOR      reduce using rule 40 (conditional -> NOT LPAREN conditional RPAREN .)
    RPAREN          reduce using rule 40 (conditional -> NOT LPAREN conditional RPAREN .)


state 150

    (56) CS -> NOT LPAREN expression RPAREN .

    RPAREN          reduce using rule 56 (CS -> NOT LPAREN expression RPAREN .)
    LESSTHANEQ      reduce using rule 56 (CS -> NOT LPAREN expression RPAREN .)
    GREATERTHANEQ   reduce using rule 56 (CS -> NOT LPAREN expression RPAREN .)
    UNEQUAL         reduce using rule 56 (CS -> NOT LPAREN expression RPAREN .)
    EQUALCHECK      reduce using rule 56 (CS -> NOT LPAREN expression RPAREN .)
    LESSTHAN        reduce using rule 56 (CS -> NOT LPAREN expression RPAREN .)
    GREATERTHAN     reduce using rule 56 (CS -> NOT LPAREN expression RPAREN .)
    ANDOPERATOR     reduce using rule 56 (CS -> NOT LPAREN expression RPAREN .)
    OROPERATOR      reduce using rule 56 (CS -> NOT LPAREN expression RPAREN .)


state 151

    (30) unmatchedstatement -> IF LPAREN conditional RPAREN statement ELSE . unmatchedstatement
    (33) ifblock -> IF LPAREN conditional RPAREN statement ELSE . statement
    (34) ifblock -> IF LPAREN conditional RPAREN statement ELSE . LBRACE fbody RBRACE
    (29) unmatchedstatement -> . IF LPAREN conditional RPAREN allstatement
    (30) unmatchedstatement -> . IF LPAREN conditional RPAREN statement ELSE unmatchedstatement
    (31) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement
    (32) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE
    (18) statement -> . assignment
    (19) statement -> . declaration
    (20) statement -> . whileblock
    (21) statement -> . ifblock
    (22) statement -> . returnstatement
    (23) statement -> . functioncall
    (28) statement -> . SEMICOLON
    (64) assignment -> . assignment_base SEMICOLON
    (57) declaration -> . TYPE dlist1 SEMICOLON
    (37) whileblock -> . WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE
    (33) ifblock -> . IF LPAREN conditional RPAREN statement ELSE statement
    (34) ifblock -> . IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE
    (35) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE
    (36) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement
    (24) returnstatement -> . RETURN expression SEMICOLON
    (25) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (65) assignment_base -> . TIMES pointervar EQUALS expression
    (66) assignment_base -> . NAME EQUALS expression

    LBRACE          shift and go to state 157
    IF              shift and go to state 46
    SEMICOLON       shift and go to state 36
    TYPE            shift and go to state 50
    WHILE           shift and go to state 34
    RETURN          shift and go to state 33
    NAME            shift and go to state 47
    TIMES           shift and go to state 44

    unmatchedstatement             shift and go to state 155
    declaration                    shift and go to state 43
    assignment                     shift and go to state 42
    whileblock                     shift and go to state 37
    ifblock                        shift and go to state 38
    statement                      shift and go to state 156
    functioncall                   shift and go to state 40
    returnstatement                shift and go to state 49
    assignment_base                shift and go to state 41

state 152

    (31) unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody . RBRACE ELSE unmatchedstatement
    (32) unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody . RBRACE
    (35) ifblock -> IF LPAREN conditional RPAREN LBRACE fbody . RBRACE ELSE LBRACE fbody RBRACE
    (36) ifblock -> IF LPAREN conditional RPAREN LBRACE fbody . RBRACE ELSE statement

    RBRACE          shift and go to state 158


state 153

    (37) whileblock -> WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE .

    SEMICOLON       reduce using rule 37 (whileblock -> WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE .)
    IF              reduce using rule 37 (whileblock -> WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE .)
    TYPE            reduce using rule 37 (whileblock -> WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE .)
    WHILE           reduce using rule 37 (whileblock -> WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE .)
    RETURN          reduce using rule 37 (whileblock -> WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE .)
    NAME            reduce using rule 37 (whileblock -> WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE .)
    TIMES           reduce using rule 37 (whileblock -> WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE .)
    RBRACE          reduce using rule 37 (whileblock -> WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE .)
    ELSE            reduce using rule 37 (whileblock -> WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE .)


state 154

    (56) CS -> NOT LPAREN expression . RPAREN
    (67) expression -> expression . PLUS expression
    (68) expression -> expression . MINUS expression
    (69) expression -> expression . DIVIDE expression
    (70) expression -> expression . TIMES expression

    RPAREN          shift and go to state 150
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    DIVIDE          shift and go to state 77
    TIMES           shift and go to state 79


state 155

    (30) unmatchedstatement -> IF LPAREN conditional RPAREN statement ELSE unmatchedstatement .

    SEMICOLON       reduce using rule 30 (unmatchedstatement -> IF LPAREN conditional RPAREN statement ELSE unmatchedstatement .)
    IF              reduce using rule 30 (unmatchedstatement -> IF LPAREN conditional RPAREN statement ELSE unmatchedstatement .)
    TYPE            reduce using rule 30 (unmatchedstatement -> IF LPAREN conditional RPAREN statement ELSE unmatchedstatement .)
    WHILE           reduce using rule 30 (unmatchedstatement -> IF LPAREN conditional RPAREN statement ELSE unmatchedstatement .)
    RETURN          reduce using rule 30 (unmatchedstatement -> IF LPAREN conditional RPAREN statement ELSE unmatchedstatement .)
    NAME            reduce using rule 30 (unmatchedstatement -> IF LPAREN conditional RPAREN statement ELSE unmatchedstatement .)
    TIMES           reduce using rule 30 (unmatchedstatement -> IF LPAREN conditional RPAREN statement ELSE unmatchedstatement .)
    RBRACE          reduce using rule 30 (unmatchedstatement -> IF LPAREN conditional RPAREN statement ELSE unmatchedstatement .)


state 156

    (33) ifblock -> IF LPAREN conditional RPAREN statement ELSE statement .

    SEMICOLON       reduce using rule 33 (ifblock -> IF LPAREN conditional RPAREN statement ELSE statement .)
    IF              reduce using rule 33 (ifblock -> IF LPAREN conditional RPAREN statement ELSE statement .)
    TYPE            reduce using rule 33 (ifblock -> IF LPAREN conditional RPAREN statement ELSE statement .)
    WHILE           reduce using rule 33 (ifblock -> IF LPAREN conditional RPAREN statement ELSE statement .)
    RETURN          reduce using rule 33 (ifblock -> IF LPAREN conditional RPAREN statement ELSE statement .)
    NAME            reduce using rule 33 (ifblock -> IF LPAREN conditional RPAREN statement ELSE statement .)
    TIMES           reduce using rule 33 (ifblock -> IF LPAREN conditional RPAREN statement ELSE statement .)
    RBRACE          reduce using rule 33 (ifblock -> IF LPAREN conditional RPAREN statement ELSE statement .)
    ELSE            reduce using rule 33 (ifblock -> IF LPAREN conditional RPAREN statement ELSE statement .)


state 157

    (34) ifblock -> IF LPAREN conditional RPAREN statement ELSE LBRACE . fbody RBRACE
    (14) fbody -> . allstatement fbody
    (15) fbody -> .
    (16) allstatement -> . statement
    (17) allstatement -> . unmatchedstatement
    (18) statement -> . assignment
    (19) statement -> . declaration
    (20) statement -> . whileblock
    (21) statement -> . ifblock
    (22) statement -> . returnstatement
    (23) statement -> . functioncall
    (28) statement -> . SEMICOLON
    (29) unmatchedstatement -> . IF LPAREN conditional RPAREN allstatement
    (30) unmatchedstatement -> . IF LPAREN conditional RPAREN statement ELSE unmatchedstatement
    (31) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement
    (32) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE
    (64) assignment -> . assignment_base SEMICOLON
    (57) declaration -> . TYPE dlist1 SEMICOLON
    (37) whileblock -> . WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE
    (33) ifblock -> . IF LPAREN conditional RPAREN statement ELSE statement
    (34) ifblock -> . IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE
    (35) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE
    (36) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement
    (24) returnstatement -> . RETURN expression SEMICOLON
    (25) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (65) assignment_base -> . TIMES pointervar EQUALS expression
    (66) assignment_base -> . NAME EQUALS expression

    RBRACE          reduce using rule 15 (fbody -> .)
    SEMICOLON       shift and go to state 36
    IF              shift and go to state 46
    TYPE            shift and go to state 50
    WHILE           shift and go to state 34
    RETURN          shift and go to state 33
    NAME            shift and go to state 47
    TIMES           shift and go to state 44

    unmatchedstatement             shift and go to state 35
    declaration                    shift and go to state 43
    assignment                     shift and go to state 42
    whileblock                     shift and go to state 37
    ifblock                        shift and go to state 38
    allstatement                   shift and go to state 48
    statement                      shift and go to state 39
    fbody                          shift and go to state 159
    functioncall                   shift and go to state 40
    returnstatement                shift and go to state 49
    assignment_base                shift and go to state 41

state 158

    (31) unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE . ELSE unmatchedstatement
    (32) unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE .
    (35) ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE . ELSE LBRACE fbody RBRACE
    (36) ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE . ELSE statement

    ELSE            shift and go to state 160
    SEMICOLON       reduce using rule 32 (unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE .)
    IF              reduce using rule 32 (unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE .)
    TYPE            reduce using rule 32 (unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE .)
    WHILE           reduce using rule 32 (unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE .)
    RETURN          reduce using rule 32 (unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE .)
    NAME            reduce using rule 32 (unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE .)
    TIMES           reduce using rule 32 (unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE .)
    RBRACE          reduce using rule 32 (unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE .)


state 159

    (34) ifblock -> IF LPAREN conditional RPAREN statement ELSE LBRACE fbody . RBRACE

    RBRACE          shift and go to state 161


state 160

    (31) unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE . unmatchedstatement
    (35) ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE . LBRACE fbody RBRACE
    (36) ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE . statement
    (29) unmatchedstatement -> . IF LPAREN conditional RPAREN allstatement
    (30) unmatchedstatement -> . IF LPAREN conditional RPAREN statement ELSE unmatchedstatement
    (31) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement
    (32) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE
    (18) statement -> . assignment
    (19) statement -> . declaration
    (20) statement -> . whileblock
    (21) statement -> . ifblock
    (22) statement -> . returnstatement
    (23) statement -> . functioncall
    (28) statement -> . SEMICOLON
    (64) assignment -> . assignment_base SEMICOLON
    (57) declaration -> . TYPE dlist1 SEMICOLON
    (37) whileblock -> . WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE
    (33) ifblock -> . IF LPAREN conditional RPAREN statement ELSE statement
    (34) ifblock -> . IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE
    (35) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE
    (36) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement
    (24) returnstatement -> . RETURN expression SEMICOLON
    (25) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (65) assignment_base -> . TIMES pointervar EQUALS expression
    (66) assignment_base -> . NAME EQUALS expression

    LBRACE          shift and go to state 164
    IF              shift and go to state 46
    SEMICOLON       shift and go to state 36
    TYPE            shift and go to state 50
    WHILE           shift and go to state 34
    RETURN          shift and go to state 33
    NAME            shift and go to state 47
    TIMES           shift and go to state 44

    unmatchedstatement             shift and go to state 162
    declaration                    shift and go to state 43
    assignment                     shift and go to state 42
    whileblock                     shift and go to state 37
    ifblock                        shift and go to state 38
    statement                      shift and go to state 163
    functioncall                   shift and go to state 40
    returnstatement                shift and go to state 49
    assignment_base                shift and go to state 41

state 161

    (34) ifblock -> IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE .

    SEMICOLON       reduce using rule 34 (ifblock -> IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE .)
    IF              reduce using rule 34 (ifblock -> IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE .)
    TYPE            reduce using rule 34 (ifblock -> IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE .)
    WHILE           reduce using rule 34 (ifblock -> IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE .)
    RETURN          reduce using rule 34 (ifblock -> IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE .)
    NAME            reduce using rule 34 (ifblock -> IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE .)
    TIMES           reduce using rule 34 (ifblock -> IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE .)
    RBRACE          reduce using rule 34 (ifblock -> IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE .)
    ELSE            reduce using rule 34 (ifblock -> IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE .)


state 162

    (31) unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement .

    SEMICOLON       reduce using rule 31 (unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement .)
    IF              reduce using rule 31 (unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement .)
    TYPE            reduce using rule 31 (unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement .)
    WHILE           reduce using rule 31 (unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement .)
    RETURN          reduce using rule 31 (unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement .)
    NAME            reduce using rule 31 (unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement .)
    TIMES           reduce using rule 31 (unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement .)
    RBRACE          reduce using rule 31 (unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement .)


state 163

    (36) ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement .

    SEMICOLON       reduce using rule 36 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement .)
    IF              reduce using rule 36 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement .)
    TYPE            reduce using rule 36 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement .)
    WHILE           reduce using rule 36 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement .)
    RETURN          reduce using rule 36 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement .)
    NAME            reduce using rule 36 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement .)
    TIMES           reduce using rule 36 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement .)
    RBRACE          reduce using rule 36 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement .)
    ELSE            reduce using rule 36 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement .)


state 164

    (35) ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE . fbody RBRACE
    (14) fbody -> . allstatement fbody
    (15) fbody -> .
    (16) allstatement -> . statement
    (17) allstatement -> . unmatchedstatement
    (18) statement -> . assignment
    (19) statement -> . declaration
    (20) statement -> . whileblock
    (21) statement -> . ifblock
    (22) statement -> . returnstatement
    (23) statement -> . functioncall
    (28) statement -> . SEMICOLON
    (29) unmatchedstatement -> . IF LPAREN conditional RPAREN allstatement
    (30) unmatchedstatement -> . IF LPAREN conditional RPAREN statement ELSE unmatchedstatement
    (31) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement
    (32) unmatchedstatement -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE
    (64) assignment -> . assignment_base SEMICOLON
    (57) declaration -> . TYPE dlist1 SEMICOLON
    (37) whileblock -> . WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE
    (33) ifblock -> . IF LPAREN conditional RPAREN statement ELSE statement
    (34) ifblock -> . IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE
    (35) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE
    (36) ifblock -> . IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement
    (24) returnstatement -> . RETURN expression SEMICOLON
    (25) functioncall -> . NAME LPAREN arguments RPAREN SEMICOLON
    (65) assignment_base -> . TIMES pointervar EQUALS expression
    (66) assignment_base -> . NAME EQUALS expression

    RBRACE          reduce using rule 15 (fbody -> .)
    SEMICOLON       shift and go to state 36
    IF              shift and go to state 46
    TYPE            shift and go to state 50
    WHILE           shift and go to state 34
    RETURN          shift and go to state 33
    NAME            shift and go to state 47
    TIMES           shift and go to state 44

    unmatchedstatement             shift and go to state 35
    declaration                    shift and go to state 43
    assignment                     shift and go to state 42
    whileblock                     shift and go to state 37
    ifblock                        shift and go to state 38
    allstatement                   shift and go to state 48
    statement                      shift and go to state 39
    fbody                          shift and go to state 165
    functioncall                   shift and go to state 40
    returnstatement                shift and go to state 49
    assignment_base                shift and go to state 41

state 165

    (35) ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody . RBRACE

    RBRACE          shift and go to state 166


state 166

    (35) ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE .

    SEMICOLON       reduce using rule 35 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE .)
    IF              reduce using rule 35 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE .)
    TYPE            reduce using rule 35 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE .)
    WHILE           reduce using rule 35 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE .)
    RETURN          reduce using rule 35 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE .)
    NAME            reduce using rule 35 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE .)
    TIMES           reduce using rule 35 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE .)
    RBRACE          reduce using rule 35 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE .)
    ELSE            reduce using rule 35 (ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE .)

