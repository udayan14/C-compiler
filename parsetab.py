
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'NUMBER TYPE SEMICOLON EQUALS COMMA LPAREN RPAREN LBRACE RBRACE ADDROF VALOF NAME program : function \n                | function programfunction : TYPE NAME LPAREN RPAREN LBRACE fbody RBRACEfbody : statement\n            | statement fbodystatement : assignment\n                | declaration\n        \n        declaration : TYPE dlist1 SEMICOLON\n    \n        declaration : TYPE dlist2 SEMICOLON\n    dlist1 : NAME \n            | NAME COMMA dlist1  \n    dlist2 : VALOF NAME \n            | VALOF NAME  COMMA dlist2  \n    \n        assignment : assignment_list SEMICOLON\n                    \n    \n        assignment_list : assignment_inter\n                        | assignment_inter COMMA assignment_list\n    \n    assignment_inter : assignment_base\n                    | VALOF NAME EQUALS assignment_inter\n     assignment_base : VALOF NAME EQUALS NUMBER \n            | VALOF NAME EQUALS VALOF NAME \n            | NAME EQUALS ADDROF NAME  '
    
_lr_action_items = {'LPAREN':([5,],[6,]),'VALOF':([8,9,12,14,16,25,27,30,32,34,40,],[11,-7,21,-6,11,-14,11,37,-8,-9,21,]),'LBRACE':([7,],[8,]),'RBRACE':([9,14,16,18,25,26,32,34,],[-7,-6,-4,28,-14,-5,-8,-9,]),'NAME':([2,8,9,11,12,14,16,21,25,27,29,30,32,33,34,37,],[5,10,-7,20,23,-6,10,31,-14,10,36,10,-8,23,-9,42,]),'TYPE':([0,1,8,9,14,16,25,28,32,34,],[2,2,12,-7,-6,12,-14,-3,-8,-9,]),'EQUALS':([10,20,42,],[19,30,30,]),'$end':([1,3,4,28,],[-1,0,-2,-3,]),'SEMICOLON':([13,15,17,22,23,24,31,35,36,38,39,41,42,43,],[25,-17,-15,32,-10,34,-12,-16,-21,-19,-18,-11,-20,-13,]),'RPAREN':([6,],[7,]),'NUMBER':([30,],[38,]),'COMMA':([15,17,23,31,36,38,39,42,],[-17,27,33,40,-21,-19,-18,-20,]),'ADDROF':([19,],[29,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'declaration':([8,16,],[9,9,]),'assignment_list':([8,16,27,],[13,13,35,]),'assignment':([8,16,],[14,14,]),'dlist1':([12,33,],[22,41,]),'assignment_base':([8,16,27,30,],[15,15,15,15,]),'function':([0,1,],[1,1,]),'statement':([8,16,],[16,16,]),'assignment_inter':([8,16,27,30,],[17,17,17,39,]),'dlist2':([12,40,],[24,43,]),'fbody':([8,16,],[18,26,]),'program':([0,1,],[3,4,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> function','program',1,'p_program','level1.py',51),
  ('program -> function program','program',2,'p_program','level1.py',52),
  ('function -> TYPE NAME LPAREN RPAREN LBRACE fbody RBRACE','function',7,'p_function','level1.py',55),
  ('fbody -> statement','fbody',1,'p_fbody','level1.py',59),
  ('fbody -> statement fbody','fbody',2,'p_fbody','level1.py',60),
  ('statement -> assignment','statement',1,'p_statement_expr','level1.py',64),
  ('statement -> declaration','statement',1,'p_statement_expr','level1.py',65),
  ('declaration -> TYPE dlist1 SEMICOLON','declaration',3,'p_declaration1','level1.py',72),
  ('declaration -> TYPE dlist2 SEMICOLON','declaration',3,'p_declaration2','level1.py',78),
  ('dlist1 -> NAME','dlist1',1,'p_dlist1','level1.py',83),
  ('dlist1 -> NAME COMMA dlist1','dlist1',3,'p_dlist1','level1.py',84),
  ('dlist2 -> VALOF NAME','dlist2',2,'p_dlist2','level1.py',92),
  ('dlist2 -> VALOF NAME COMMA dlist2','dlist2',4,'p_dlist2','level1.py',93),
  ('assignment -> assignment_list SEMICOLON','assignment',2,'p_assignment','level1.py',102),
  ('assignment_list -> assignment_inter','assignment_list',1,'p_assignment_list','level1.py',110),
  ('assignment_list -> assignment_inter COMMA assignment_list','assignment_list',3,'p_assignment_list','level1.py',111),
  ('assignment_inter -> assignment_base','assignment_inter',1,'p_assignment_inter','level1.py',120),
  ('assignment_inter -> VALOF NAME EQUALS assignment_inter','assignment_inter',4,'p_assignment_inter','level1.py',121),
  ('assignment_base -> VALOF NAME EQUALS NUMBER','assignment_base',4,'p_assignment_base','level1.py',128),
  ('assignment_base -> VALOF NAME EQUALS VALOF NAME','assignment_base',5,'p_assignment_base','level1.py',129),
  ('assignment_base -> NAME EQUALS ADDROF NAME','assignment_base',4,'p_assignment_base','level1.py',130),
]
