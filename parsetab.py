
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftOROPERATORleftANDOPERATORleftEQUALCHECKUNEQUALleftLESSTHANEQLESSTHANGREATERTHANEQGREATERTHANleftPLUSMINUSleftTIMESDIVIDErightVALOFADDROFrightNOTrightUMINUSNUMBER TYPE SEMICOLON EQUALS COMMA LPAREN RPAREN LBRACE RBRACE ANDOPERATOR OROPERATOR ADDROF NAME PLUS MINUS TIMES DIVIDE WHILE IF ELSE EQUALCHECK UNEQUAL LESSTHAN LESSTHANEQ GREATERTHAN GREATERTHANEQ NOT \n\tprogram : function \n\t\t\t\t| function program\n\t\n\tfunction : TYPE NAME LPAREN RPAREN LBRACE fbody RBRACE\n\t\n\tfbody : allstatement fbody\n\t\t\t| \n\t\n\tallstatement : statement\n\t\t\t\t| unmatchedstatement\n\t\n\tstatement : assignment\n\t\t\t| declaration\n\t\t\t| whileblock\n\t\t\t| ifblock\n\t\n\tstatement : SEMICOLON\n\t\n\tunmatchedstatement : IF LPAREN conditional RPAREN allstatement\n\t\t\t\t| IF LPAREN conditional RPAREN statement ELSE unmatchedstatement\n\t\t\t\t| IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement\n\t\n\tunmatchedstatement : IF LPAREN conditional RPAREN LBRACE fbody RBRACE\n\t\n\tifblock : IF LPAREN conditional RPAREN statement ELSE statement\n\t\t\t| IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE\n\t\t\t| IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE\n\t\n\tifblock : IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement\n\t\n\twhileblock : WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE\n\t\n\tconditional : LPAREN conditional RPAREN\n\t\n\tconditional : conditionbase\n\t\t\t\t| NOT LPAREN conditional RPAREN\n\t\t\t\t| conditional LESSTHANEQ conditional\n\t\t\t\t| conditional GREATERTHANEQ conditional\n\t\t\t\t| conditional UNEQUAL conditional\n\t\t\t\t| conditional EQUALCHECK conditional\n\t\t\t\t| conditional LESSTHAN conditional\n\t\t\t\t| conditional GREATERTHAN conditional\n\t\t\t\t| conditional ANDOPERATOR conditional\n\t\t\t\t| conditional OROPERATOR conditional\n\t\n\tconditionbase : CS LESSTHANEQ CS\n\t\t\t\t| CS GREATERTHANEQ CS\n\t\t\t\t| CS UNEQUAL CS\n\t\t\t\t| CS EQUALCHECK CS\n\t\t\t\t| CS LESSTHAN CS\n\t\t\t\t| CS GREATERTHAN CS\n\t\n\tCS : expression\n\t\t| NOT LPAREN expression RPAREN\n\t\n\t\tdeclaration : TYPE dlist1 SEMICOLON\n\t\n\tdlist1 : NAME  \n\t\t\t| NAME COMMA dlist1\n\t\n\tdlist1 : specialvar\n\t\t\t| specialvar  COMMA dlist1  \n\t\n\tspecialvar : TIMES specialvar %prec VALOF\n\t\t\t\t| TIMES NAME %prec VALOF\n\t\n\tassignment : assignment_base SEMICOLON\n\t \n\tassignment_base : TIMES pointervar EQUALS expression\n\t\t\t| NAME EQUALS expression \n\t \n\texpression : expression PLUS expression\n\t\t\t\t| expression MINUS expression\n\t\t\t\t| expression DIVIDE expression\n\t\n\texpression : expression TIMES expression\n\t\n\texpression : MINUS expression %prec UMINUS\n\t\n\texpression : LPAREN expression RPAREN\n\t\n\texpression : NUMBER\n\t\n\texpression : pointervar\n\t\n\tpointervar : TIMES pointervar %prec VALOF\n\t\n\tpointervar : ADDROF pointervar \n\t\n\tpointervar : NAME\n\t'
    
_lr_action_items = {'TYPE':([0,3,8,10,11,12,14,15,16,22,23,30,32,39,83,90,110,111,112,117,119,121,122,123,124,126,127,128,129,130,132,],[1,1,9,-7,-8,-11,-12,-10,9,-9,-6,-48,-3,-41,9,9,-6,-13,9,9,-21,-14,-17,9,-16,9,-18,-15,-20,9,-19,]),'PLUS':([35,45,49,50,54,55,56,60,71,84,85,86,97,99,100,101,102,120,],[-61,-57,-58,74,74,-60,-59,-55,74,74,74,74,-56,-53,-51,-52,-54,74,]),'EQUALCHECK':([35,45,46,47,49,50,51,52,55,56,60,71,72,86,87,88,89,91,92,93,94,95,96,97,98,99,100,101,102,104,105,106,107,108,109,113,114,],[-61,-57,66,-23,-58,-39,78,66,-60,-59,-55,-39,66,-39,66,-26,66,66,-28,-27,-30,-29,-25,-56,-22,-53,-51,-52,-54,-34,-36,-37,-35,-38,-33,-40,-24,]),'NAME':([1,8,9,10,11,12,14,15,16,21,22,23,27,28,30,31,33,34,36,38,39,40,43,48,53,57,61,62,63,65,66,67,68,69,70,73,74,75,76,77,78,79,80,81,82,83,90,110,111,112,116,117,119,121,122,123,124,126,127,128,129,130,132,],[4,20,24,-7,-8,-11,-12,-10,20,35,-9,-6,42,35,-48,35,35,35,35,24,-41,24,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,20,20,-6,-13,20,35,20,-21,-14,-17,20,-16,20,-18,-15,-20,20,-19,]),'DIVIDE':([35,45,49,50,54,55,56,60,71,84,85,86,97,99,100,101,102,120,],[-61,-57,-58,73,73,-60,-59,-55,73,73,73,73,-56,-53,73,73,-54,73,]),'ELSE':([11,12,14,15,22,30,39,110,119,122,124,127,129,132,],[-8,-11,-12,-10,-9,-48,-41,117,-21,-17,126,-18,-20,-19,]),'EQUALS':([20,35,37,55,56,],[33,-61,57,-60,-59,]),'WHILE':([8,10,11,12,14,15,16,22,23,30,39,83,90,110,111,112,117,119,121,122,123,124,126,127,128,129,130,132,],[13,-7,-8,-11,-12,-10,13,-9,-6,-48,-41,13,13,-6,-13,13,13,-21,-14,-17,13,-16,13,-18,-15,-20,13,-19,]),'SEMICOLON':([8,10,11,12,14,15,16,17,22,23,24,25,26,30,35,39,41,42,45,49,54,55,56,58,59,60,83,85,90,97,99,100,101,102,110,111,112,117,119,121,122,123,124,126,127,128,129,130,132,],[14,-7,-8,-11,-12,-10,14,30,-9,-6,-42,39,-44,-48,-61,-41,-46,-47,-57,-58,-50,-60,-59,-43,-45,-55,14,-49,14,-56,-53,-51,-52,-54,-6,-13,14,14,-21,-14,-17,14,-16,14,-18,-15,-20,14,-19,]),'RPAREN':([6,35,45,46,47,49,50,52,55,56,60,71,72,84,86,87,88,89,91,92,93,94,95,96,97,98,99,100,101,102,104,105,106,107,108,109,113,114,120,],[7,-61,-57,64,-23,-58,-39,83,-60,-59,-55,97,98,97,113,114,-26,-32,-31,-28,-27,-30,-29,-25,-56,-22,-53,-51,-52,-54,-34,-36,-37,-35,-38,-33,-40,-24,113,]),'MINUS':([28,31,33,35,43,45,48,49,50,53,54,55,56,57,60,61,62,63,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,81,82,84,85,86,97,99,100,101,102,116,120,],[43,43,43,-61,43,-57,43,-58,75,43,75,-60,-59,43,-55,43,43,43,43,43,43,43,43,43,75,43,43,43,43,43,43,43,43,43,43,75,75,75,-56,-53,-51,-52,-54,43,75,]),'ADDROF':([21,28,31,33,34,36,43,48,53,57,61,62,63,65,66,67,68,69,70,73,74,75,76,77,78,79,80,81,82,116,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'NOT':([28,31,48,61,62,63,65,66,67,68,69,70,77,78,79,80,81,82,],[44,44,44,44,44,44,44,44,44,44,44,44,103,103,103,103,103,103,]),'NUMBER':([28,31,33,43,48,53,57,61,62,63,65,66,67,68,69,70,73,74,75,76,77,78,79,80,81,82,116,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'OROPERATOR':([35,45,46,47,49,50,52,55,56,60,72,87,88,89,91,92,93,94,95,96,97,98,99,100,101,102,104,105,106,107,108,109,113,114,],[-61,-57,63,-23,-58,-39,63,-60,-59,-55,63,63,-26,-32,-31,-28,-27,-30,-29,-25,-56,-22,-53,-51,-52,-54,-34,-36,-37,-35,-38,-33,-40,-24,]),'IF':([8,10,11,12,14,15,16,22,23,30,39,83,90,110,111,112,117,119,121,122,123,124,126,127,128,129,130,132,],[18,-7,-8,-11,-12,-10,18,-9,-6,-48,-41,18,18,-6,-13,18,18,-21,-14,-17,18,-16,18,-18,-15,-20,18,-19,]),'LBRACE':([7,64,83,117,126,],[8,90,112,123,130,]),'LPAREN':([4,13,18,28,31,33,43,44,48,53,57,61,62,63,65,66,67,68,69,70,73,74,75,76,77,78,79,80,81,82,103,116,],[6,28,31,48,48,53,53,61,48,53,53,48,48,48,48,48,48,48,48,48,53,53,53,53,53,53,53,53,53,53,116,53,]),'GREATERTHANEQ':([35,45,46,47,49,50,51,52,55,56,60,71,72,86,87,88,89,91,92,93,94,95,96,97,98,99,100,101,102,104,105,106,107,108,109,113,114,],[-61,-57,62,-23,-58,-39,77,62,-60,-59,-55,-39,62,-39,62,-26,62,62,62,62,-30,-29,-25,-56,-22,-53,-51,-52,-54,-34,-36,-37,-35,-38,-33,-40,-24,]),'$end':([2,3,5,32,],[0,-1,-2,-3,]),'RBRACE':([8,10,11,12,14,15,16,19,22,23,29,30,39,90,110,111,112,115,118,119,121,122,123,124,125,127,128,129,130,131,132,],[-5,-7,-8,-11,-12,-10,-5,32,-9,-6,-4,-48,-41,-5,-6,-13,-5,119,124,-21,-14,-17,-5,-16,127,-18,-15,-20,-5,132,-19,]),'TIMES':([8,9,10,11,12,14,15,16,21,22,23,27,28,30,31,33,34,35,36,38,39,40,43,45,48,49,50,53,54,55,56,57,60,61,62,63,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,90,97,99,100,101,102,110,111,112,116,117,119,120,121,122,123,124,126,127,128,129,130,132,],[21,27,-7,-8,-11,-12,-10,21,36,-9,-6,27,36,-48,36,36,36,-61,36,27,-41,27,36,-57,36,-58,76,36,76,-60,-59,36,-55,36,36,36,36,36,36,36,36,36,76,36,36,36,36,36,36,36,36,36,36,21,76,76,76,21,-56,-53,76,76,-54,-6,-13,21,36,21,-21,76,-14,-17,21,-16,21,-18,-15,-20,21,-19,]),'COMMA':([24,26,41,42,],[38,40,-46,-47,]),'ANDOPERATOR':([35,45,46,47,49,50,52,55,56,60,72,87,88,89,91,92,93,94,95,96,97,98,99,100,101,102,104,105,106,107,108,109,113,114,],[-61,-57,65,-23,-58,-39,65,-60,-59,-55,65,65,-26,65,-31,-28,-27,-30,-29,-25,-56,-22,-53,-51,-52,-54,-34,-36,-37,-35,-38,-33,-40,-24,]),'LESSTHAN':([35,45,46,47,49,50,51,52,55,56,60,71,72,86,87,88,89,91,92,93,94,95,96,97,98,99,100,101,102,104,105,106,107,108,109,113,114,],[-61,-57,69,-23,-58,-39,79,69,-60,-59,-55,-39,69,-39,69,-26,69,69,69,69,-30,-29,-25,-56,-22,-53,-51,-52,-54,-34,-36,-37,-35,-38,-33,-40,-24,]),'UNEQUAL':([35,45,46,47,49,50,51,52,55,56,60,71,72,86,87,88,89,91,92,93,94,95,96,97,98,99,100,101,102,104,105,106,107,108,109,113,114,],[-61,-57,67,-23,-58,-39,80,67,-60,-59,-55,-39,67,-39,67,-26,67,67,-28,-27,-30,-29,-25,-56,-22,-53,-51,-52,-54,-34,-36,-37,-35,-38,-33,-40,-24,]),'GREATERTHAN':([35,45,46,47,49,50,51,52,55,56,60,71,72,86,87,88,89,91,92,93,94,95,96,97,98,99,100,101,102,104,105,106,107,108,109,113,114,],[-61,-57,68,-23,-58,-39,81,68,-60,-59,-55,-39,68,-39,68,-26,68,68,68,68,-30,-29,-25,-56,-22,-53,-51,-52,-54,-34,-36,-37,-35,-38,-33,-40,-24,]),'LESSTHANEQ':([35,45,46,47,49,50,51,52,55,56,60,71,72,86,87,88,89,91,92,93,94,95,96,97,98,99,100,101,102,104,105,106,107,108,109,113,114,],[-61,-57,70,-23,-58,-39,82,70,-60,-59,-55,-39,70,-39,70,-26,70,70,70,70,-30,-29,-25,-56,-22,-53,-51,-52,-54,-34,-36,-37,-35,-38,-33,-40,-24,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'ifblock':([8,16,83,90,112,117,123,126,130,],[12,12,12,12,12,12,12,12,12,]),'conditionbase':([28,31,48,61,62,63,65,66,67,68,69,70,],[47,47,47,47,47,47,47,47,47,47,47,47,]),'declaration':([8,16,83,90,112,117,123,126,130,],[22,22,22,22,22,22,22,22,22,]),'unmatchedstatement':([8,16,83,90,112,117,123,126,130,],[10,10,10,10,10,121,10,128,10,]),'assignment':([8,16,83,90,112,117,123,126,130,],[11,11,11,11,11,11,11,11,11,]),'program':([0,3,],[2,5,]),'dlist1':([9,38,40,],[25,58,59,]),'pointervar':([21,28,31,33,34,36,43,48,53,57,61,62,63,65,66,67,68,69,70,73,74,75,76,77,78,79,80,81,82,116,],[37,49,49,49,55,56,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'specialvar':([9,27,38,40,],[26,41,26,26,]),'function':([0,3,],[3,3,]),'whileblock':([8,16,83,90,112,117,123,126,130,],[15,15,15,15,15,15,15,15,15,]),'allstatement':([8,16,83,90,112,123,130,],[16,16,111,16,16,16,16,]),'CS':([28,31,48,61,62,63,65,66,67,68,69,70,77,78,79,80,81,82,],[51,51,51,51,51,51,51,51,51,51,51,51,104,105,106,107,108,109,]),'assignment_base':([8,16,83,90,112,117,123,126,130,],[17,17,17,17,17,17,17,17,17,]),'fbody':([8,16,90,112,123,130,],[19,29,115,118,125,131,]),'expression':([28,31,33,43,48,53,57,61,62,63,65,66,67,68,69,70,73,74,75,76,77,78,79,80,81,82,116,],[50,50,54,60,71,84,85,86,50,50,50,50,50,50,50,50,99,100,101,102,50,50,50,50,50,50,120,]),'conditional':([28,31,48,61,62,63,65,66,67,68,69,70,],[46,52,72,87,88,89,91,92,93,94,95,96,]),'statement':([8,16,83,90,112,117,123,126,130,],[23,23,110,23,23,122,23,129,23,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> function','program',1,'p_program','better.py',650),
  ('program -> function program','program',2,'p_program','better.py',651),
  ('function -> TYPE NAME LPAREN RPAREN LBRACE fbody RBRACE','function',7,'p_function','better.py',675),
  ('fbody -> allstatement fbody','fbody',2,'p_fbody','better.py',712),
  ('fbody -> <empty>','fbody',0,'p_fbody','better.py',713),
  ('allstatement -> statement','allstatement',1,'p_allstatement_expr','better.py',736),
  ('allstatement -> unmatchedstatement','allstatement',1,'p_allstatement_expr','better.py',737),
  ('statement -> assignment','statement',1,'p_statement_expr','better.py',743),
  ('statement -> declaration','statement',1,'p_statement_expr','better.py',744),
  ('statement -> whileblock','statement',1,'p_statement_expr','better.py',745),
  ('statement -> ifblock','statement',1,'p_statement_expr','better.py',746),
  ('statement -> SEMICOLON','statement',1,'p_empty_statement','better.py',752),
  ('unmatchedstatement -> IF LPAREN conditional RPAREN allstatement','unmatchedstatement',5,'p_unmatchedstatement_expr1','better.py',758),
  ('unmatchedstatement -> IF LPAREN conditional RPAREN statement ELSE unmatchedstatement','unmatchedstatement',7,'p_unmatchedstatement_expr1','better.py',759),
  ('unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement','unmatchedstatement',9,'p_unmatchedstatement_expr1','better.py',760),
  ('unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE','unmatchedstatement',7,'p_unmatchedstatement_expr2','better.py',771),
  ('ifblock -> IF LPAREN conditional RPAREN statement ELSE statement','ifblock',7,'p_ifblock1','better.py',777),
  ('ifblock -> IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE','ifblock',9,'p_ifblock1','better.py',778),
  ('ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE','ifblock',11,'p_ifblock1','better.py',779),
  ('ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement','ifblock',9,'p_ifblock2','better.py',790),
  ('whileblock -> WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE','whileblock',7,'p_while','better.py',795),
  ('conditional -> LPAREN conditional RPAREN','conditional',3,'p_conditional1','better.py',801),
  ('conditional -> conditionbase','conditional',1,'p_conditional','better.py',807),
  ('conditional -> NOT LPAREN conditional RPAREN','conditional',4,'p_conditional','better.py',808),
  ('conditional -> conditional LESSTHANEQ conditional','conditional',3,'p_conditional','better.py',809),
  ('conditional -> conditional GREATERTHANEQ conditional','conditional',3,'p_conditional','better.py',810),
  ('conditional -> conditional UNEQUAL conditional','conditional',3,'p_conditional','better.py',811),
  ('conditional -> conditional EQUALCHECK conditional','conditional',3,'p_conditional','better.py',812),
  ('conditional -> conditional LESSTHAN conditional','conditional',3,'p_conditional','better.py',813),
  ('conditional -> conditional GREATERTHAN conditional','conditional',3,'p_conditional','better.py',814),
  ('conditional -> conditional ANDOPERATOR conditional','conditional',3,'p_conditional','better.py',815),
  ('conditional -> conditional OROPERATOR conditional','conditional',3,'p_conditional','better.py',816),
  ('conditionbase -> CS LESSTHANEQ CS','conditionbase',3,'p_conditionbase','better.py',842),
  ('conditionbase -> CS GREATERTHANEQ CS','conditionbase',3,'p_conditionbase','better.py',843),
  ('conditionbase -> CS UNEQUAL CS','conditionbase',3,'p_conditionbase','better.py',844),
  ('conditionbase -> CS EQUALCHECK CS','conditionbase',3,'p_conditionbase','better.py',845),
  ('conditionbase -> CS LESSTHAN CS','conditionbase',3,'p_conditionbase','better.py',846),
  ('conditionbase -> CS GREATERTHAN CS','conditionbase',3,'p_conditionbase','better.py',847),
  ('CS -> expression','CS',1,'p_cs','better.py',867),
  ('CS -> NOT LPAREN expression RPAREN','CS',4,'p_cs','better.py',868),
  ('declaration -> TYPE dlist1 SEMICOLON','declaration',3,'p_declaration1','better.py',876),
  ('dlist1 -> NAME','dlist1',1,'p_dlistname','better.py',882),
  ('dlist1 -> NAME COMMA dlist1','dlist1',3,'p_dlistname','better.py',883),
  ('dlist1 -> specialvar','dlist1',1,'p_dlistpointer','better.py',890),
  ('dlist1 -> specialvar COMMA dlist1','dlist1',3,'p_dlistpointer','better.py',891),
  ('specialvar -> TIMES specialvar','specialvar',2,'p_specialvar','better.py',898),
  ('specialvar -> TIMES NAME','specialvar',2,'p_specialvar','better.py',899),
  ('assignment -> assignment_base SEMICOLON','assignment',2,'p_assignment','better.py',904),
  ('assignment_base -> TIMES pointervar EQUALS expression','assignment_base',4,'p_assignment_base_pointer','better.py',913),
  ('assignment_base -> NAME EQUALS expression','assignment_base',3,'p_assignment_base_pointer','better.py',914),
  ('expression -> expression PLUS expression','expression',3,'p_expression1','better.py',934),
  ('expression -> expression MINUS expression','expression',3,'p_expression1','better.py',935),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression1','better.py',936),
  ('expression -> expression TIMES expression','expression',3,'p_expression_mul','better.py',953),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','better.py',961),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_paren','better.py',968),
  ('expression -> NUMBER','expression',1,'p_expression_base_number','better.py',974),
  ('expression -> pointervar','expression',1,'p_expression_base_pointer','better.py',980),
  ('pointervar -> TIMES pointervar','pointervar',2,'p_pointervar1','better.py',987),
  ('pointervar -> ADDROF pointervar','pointervar',2,'p_pointervar2','better.py',993),
  ('pointervar -> NAME','pointervar',1,'p_pointervar3','better.py',1000),
]
