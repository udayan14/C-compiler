
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftOROPERATORleftANDOPERATORleftEQUALCHECKUNEQUALleftLESSTHANEQLESSTHANGREATERTHANEQGREATERTHANleftPLUSMINUSleftTIMESDIVIDErightVALOFADDROFrightNOTrightUMINUSNUMBER TYPE SEMICOLON EQUALS COMMA LPAREN RPAREN LBRACE RBRACE ANDOPERATOR OROPERATOR ADDROF NAME PLUS MINUS TIMES DIVIDE WHILE IF ELSE EQUALCHECK UNEQUAL LESSTHAN LESSTHANEQ GREATERTHAN GREATERTHANEQ NOT \n\tprogram : function \n\t\t\t\t| function program\n\t\n\tfunction : TYPE NAME LPAREN RPAREN LBRACE fbody RBRACE\n\t\n\tfbody : allstatement\n\t\t\t| allstatement fbody\n\t\t\t|\n\t\n\tallstatement : statement\n\t\t\t\t| unmatchedstatement\n\t\n\tstatement : assignment\n\t\t\t| declaration\n\t\t\t| whileblock\n\t\t\t| ifblock\n\t\n\tunmatchedstatement : IF LPAREN conditional RPAREN allstatement\n\t\t\t\t| IF LPAREN conditional RPAREN statement ELSE unmatchedstatement\n\t\t\t\t| IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement\n\t\n\tunmatchedstatement : IF LPAREN conditional RPAREN LBRACE fbody RBRACE\n\t\n\tifblock : IF LPAREN conditional RPAREN statement ELSE statement\n\t\t\t| IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE\n\t\t\t| IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE\n\t\n\tifblock : IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement\n\t\n\twhileblock : WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE\n\t\n\tconditional : conditionbase\n\t\t\t\t| conditional LESSTHANEQ conditional\n\t\t\t\t| conditional GREATERTHANEQ conditional\n\t\t\t\t| conditional UNEQUAL conditional\n\t\t\t\t| conditional EQUALCHECK conditional\n\t\t\t\t| conditional LESSTHAN conditional\n\t\t\t\t| conditional GREATERTHAN conditional\n\t\t\t\t| conditional ANDOPERATOR conditional\n\t\t\t\t| conditional OROPERATOR conditional\n\t\n\tconditionbase : CS LESSTHANEQ CS\n\t\t\t\t| CS GREATERTHANEQ CS\n\t\t\t\t| CS UNEQUAL CS\n\t\t\t\t| CS EQUALCHECK CS\n\t\t\t\t| CS LESSTHAN CS\n\t\t\t\t| CS GREATERTHAN CS\n\t\n\tCS : expression\n\t\t| NOT LPAREN expression RPAREN\n\t\n\t\tdeclaration : TYPE dlist1 SEMICOLON\n\t\n\tdlist1 : NAME  \n\t\t\t| NAME COMMA dlist1\n\t\n\tdlist1 : specialvar\n\t\t\t| specialvar  COMMA dlist1  \n\t\n\tspecialvar : TIMES specialvar %prec VALOF\n\t\t\t\t| TIMES NAME %prec VALOF\n\t\n\tassignment : assignment_base SEMICOLON\n\t \n\tassignment_base : TIMES pointervar EQUALS expression\n\t\t\t| NAME EQUALS expression \n\t \n\texpression : expression PLUS expression\n\t\t\t\t| expression MINUS expression\n\t\t\t\t| expression DIVIDE expression\n\t\n\texpression : expression TIMES expression\n\t\n\texpression : MINUS expression %prec UMINUS\n\t\n\texpression : LPAREN expression RPAREN\n\t\n\texpression : NUMBER\n\t\n\texpression : pointervar\n\t\n\tpointervar : TIMES pointervar %prec VALOF\n\t\n\tpointervar : ADDROF pointervar \n\t\n\tpointervar : NAME\n\t'
    
_lr_action_items = {'UNEQUAL':([35,42,43,44,48,49,50,51,54,55,58,82,84,85,86,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,106,],[-59,-56,-55,-22,62,71,-37,62,-57,-58,-53,-54,-23,-25,-27,-24,62,-28,62,-26,-31,-33,-35,-34,-32,-36,-49,-51,-50,-52,-38,]),'TIMES':([8,9,10,12,14,15,18,19,20,22,26,28,29,31,33,34,35,36,37,38,41,42,43,45,46,50,52,53,54,55,58,59,60,61,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,99,100,101,102,103,104,105,109,110,111,112,113,114,115,117,118,119,120,122,],[18,18,26,-12,-9,-7,33,-11,-10,-8,26,33,33,33,33,33,-59,-46,26,-39,26,-56,-55,33,33,79,79,33,-57,-58,-53,79,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,18,79,-54,79,18,79,-51,79,-52,-13,18,-7,18,-21,-16,18,-17,-14,18,18,-20,-15,-18,-19,]),'NUMBER':([28,29,31,45,46,53,60,61,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'WHILE':([8,9,12,14,15,19,20,22,36,38,80,87,103,104,105,109,110,111,112,113,114,115,117,118,119,120,122,],[11,11,-12,-9,-7,-11,-10,-8,-46,-39,11,11,-13,11,-7,11,-21,-16,11,-17,-14,11,11,-20,-15,-18,-19,]),'IF':([8,9,12,14,15,19,20,22,36,38,80,87,103,104,105,109,110,111,112,113,114,115,117,118,119,120,122,],[13,13,-12,-9,-7,-11,-10,-8,-46,-39,13,13,-13,13,-7,13,-21,-16,13,-17,-14,13,13,-20,-15,-18,-19,]),'OROPERATOR':([35,42,43,44,48,50,51,54,55,58,82,84,85,86,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,106,],[-59,-56,-55,-22,66,-37,66,-57,-58,-53,-54,-23,-25,-27,-24,-30,-28,-29,-26,-31,-33,-35,-34,-32,-36,-49,-51,-50,-52,-38,]),'GREATERTHAN':([35,42,43,44,48,49,50,51,54,55,58,82,84,85,86,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,106,],[-59,-56,-55,-22,67,75,-37,67,-57,-58,-53,-54,-23,67,-27,-24,67,-28,67,67,-31,-33,-35,-34,-32,-36,-49,-51,-50,-52,-38,]),'LBRACE':([7,64,80,109,115,],[8,87,104,112,117,]),'ADDROF':([18,28,29,31,33,34,45,46,53,60,61,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'DIVIDE':([35,42,43,50,52,54,55,58,59,81,82,83,99,100,101,102,],[-59,-56,-55,77,77,-57,-58,-53,77,77,-54,77,77,-51,77,-52,]),'SEMICOLON':([21,24,25,27,35,39,40,42,43,52,54,55,56,57,58,81,82,99,100,101,102,],[36,-42,38,-40,-59,-45,-44,-56,-55,-48,-57,-58,-43,-41,-53,-47,-54,-49,-51,-50,-52,]),'EQUALS':([17,32,35,54,55,],[31,53,-59,-57,-58,]),'LESSTHANEQ':([35,42,43,44,48,49,50,51,54,55,58,82,84,85,86,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,106,],[-59,-56,-55,-22,61,70,-37,61,-57,-58,-53,-54,-23,61,-27,-24,61,-28,61,61,-31,-33,-35,-34,-32,-36,-49,-51,-50,-52,-38,]),'LESSTHAN':([35,42,43,44,48,49,50,51,54,55,58,82,84,85,86,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,106,],[-59,-56,-55,-22,63,72,-37,63,-57,-58,-53,-54,-23,63,-27,-24,63,-28,63,63,-31,-33,-35,-34,-32,-36,-49,-51,-50,-52,-38,]),'MINUS':([28,29,31,35,42,43,45,46,50,52,53,54,55,58,59,60,61,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,82,83,99,100,101,102,],[45,45,45,-59,-56,-55,45,45,78,78,45,-57,-58,-53,78,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,78,-54,78,-49,-51,-50,-52,]),'LPAREN':([4,11,13,28,29,31,45,46,47,53,60,61,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,],[6,28,29,46,46,46,46,46,60,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'RPAREN':([6,35,42,43,44,48,50,51,54,55,58,59,82,83,84,85,86,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,106,],[7,-59,-56,-55,-22,64,-37,80,-57,-58,-53,82,-54,106,-23,-25,-27,-24,-30,-28,-29,-26,-31,-33,-35,-34,-32,-36,-49,-51,-50,-52,-38,]),'TYPE':([0,3,8,9,12,14,15,19,20,22,30,36,38,80,87,103,104,105,109,110,111,112,113,114,115,117,118,119,120,122,],[1,1,10,10,-12,-9,-7,-11,-10,-8,-3,-46,-39,10,10,-13,10,-7,10,-21,-16,10,-17,-14,10,10,-20,-15,-18,-19,]),'GREATERTHANEQ':([35,42,43,44,48,49,50,51,54,55,58,82,84,85,86,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,106,],[-59,-56,-55,-22,65,74,-37,65,-57,-58,-53,-54,-23,65,-27,-24,65,-28,65,65,-31,-33,-35,-34,-32,-36,-49,-51,-50,-52,-38,]),'COMMA':([24,27,39,40,],[37,41,-45,-44,]),'$end':([2,3,5,30,],[0,-1,-2,-3,]),'NOT':([28,29,61,62,63,65,66,67,68,69,70,71,72,73,74,75,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'ANDOPERATOR':([35,42,43,44,48,50,51,54,55,58,82,84,85,86,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,106,],[-59,-56,-55,-22,68,-37,68,-57,-58,-53,-54,-23,-25,-27,-24,68,-28,-29,-26,-31,-33,-35,-34,-32,-36,-49,-51,-50,-52,-38,]),'PLUS':([35,42,43,50,52,54,55,58,59,81,82,83,99,100,101,102,],[-59,-56,-55,76,76,-57,-58,-53,76,76,-54,76,-49,-51,-50,-52,]),'ELSE':([12,14,19,20,36,38,105,110,111,113,118,120,122,],[-12,-9,-11,-10,-46,-39,109,-21,115,-17,-20,-18,-19,]),'EQUALCHECK':([35,42,43,44,48,49,50,51,54,55,58,82,84,85,86,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,106,],[-59,-56,-55,-22,69,73,-37,69,-57,-58,-53,-54,-23,-25,-27,-24,69,-28,69,-26,-31,-33,-35,-34,-32,-36,-49,-51,-50,-52,-38,]),'NAME':([1,8,9,10,12,14,15,18,19,20,22,26,28,29,31,33,34,36,37,38,41,45,46,53,60,61,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,87,103,104,105,109,110,111,112,113,114,115,117,118,119,120,122,],[4,17,17,27,-12,-9,-7,35,-11,-10,-8,39,35,35,35,35,35,-46,27,-39,27,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,17,17,-13,17,-7,17,-21,-16,17,-17,-14,17,17,-20,-15,-18,-19,]),'RBRACE':([8,9,12,14,15,16,19,20,22,23,36,38,87,103,104,105,107,108,110,111,112,113,114,116,117,118,119,120,121,122,],[-6,-4,-12,-9,-7,30,-11,-10,-8,-5,-46,-39,-6,-13,-6,-7,110,111,-21,-16,-6,-17,-14,120,-6,-20,-15,-18,122,-19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([8,9,80,87,104,109,112,115,117,],[15,15,105,15,15,113,15,118,15,]),'pointervar':([18,28,29,31,33,34,45,46,53,60,61,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,],[32,42,42,42,54,55,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'allstatement':([8,9,80,87,104,112,117,],[9,9,103,9,9,9,9,]),'fbody':([8,9,87,104,112,117,],[16,23,107,108,116,121,]),'whileblock':([8,9,80,87,104,109,112,115,117,],[19,19,19,19,19,19,19,19,19,]),'specialvar':([10,26,37,41,],[24,40,24,24,]),'dlist1':([10,37,41,],[25,56,57,]),'program':([0,3,],[2,5,]),'function':([0,3,],[3,3,]),'ifblock':([8,9,80,87,104,109,112,115,117,],[12,12,12,12,12,12,12,12,12,]),'declaration':([8,9,80,87,104,109,112,115,117,],[20,20,20,20,20,20,20,20,20,]),'assignment':([8,9,80,87,104,109,112,115,117,],[14,14,14,14,14,14,14,14,14,]),'conditional':([28,29,61,62,63,65,66,67,68,69,],[48,51,84,85,86,88,89,90,91,92,]),'conditionbase':([28,29,61,62,63,65,66,67,68,69,],[44,44,44,44,44,44,44,44,44,44,]),'assignment_base':([8,9,80,87,104,109,112,115,117,],[21,21,21,21,21,21,21,21,21,]),'unmatchedstatement':([8,9,80,87,104,109,112,115,117,],[22,22,22,22,22,114,22,119,22,]),'expression':([28,29,31,45,46,53,60,61,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,],[50,50,52,58,59,81,83,50,50,50,50,50,50,50,50,50,50,50,50,50,50,99,100,101,102,]),'CS':([28,29,61,62,63,65,66,67,68,69,70,71,72,73,74,75,],[49,49,49,49,49,49,49,49,49,49,93,94,95,96,97,98,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> function','program',1,'p_program','better.py',524),
  ('program -> function program','program',2,'p_program','better.py',525),
  ('function -> TYPE NAME LPAREN RPAREN LBRACE fbody RBRACE','function',7,'p_function','better.py',549),
  ('fbody -> allstatement','fbody',1,'p_fbody','better.py',586),
  ('fbody -> allstatement fbody','fbody',2,'p_fbody','better.py',587),
  ('fbody -> <empty>','fbody',0,'p_fbody','better.py',588),
  ('allstatement -> statement','allstatement',1,'p_allstatement_expr','better.py',607),
  ('allstatement -> unmatchedstatement','allstatement',1,'p_allstatement_expr','better.py',608),
  ('statement -> assignment','statement',1,'p_statement_expr','better.py',614),
  ('statement -> declaration','statement',1,'p_statement_expr','better.py',615),
  ('statement -> whileblock','statement',1,'p_statement_expr','better.py',616),
  ('statement -> ifblock','statement',1,'p_statement_expr','better.py',617),
  ('unmatchedstatement -> IF LPAREN conditional RPAREN allstatement','unmatchedstatement',5,'p_unmatchedstatement_expr1','better.py',623),
  ('unmatchedstatement -> IF LPAREN conditional RPAREN statement ELSE unmatchedstatement','unmatchedstatement',7,'p_unmatchedstatement_expr1','better.py',624),
  ('unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement','unmatchedstatement',9,'p_unmatchedstatement_expr1','better.py',625),
  ('unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE','unmatchedstatement',7,'p_unmatchedstatement_expr2','better.py',636),
  ('ifblock -> IF LPAREN conditional RPAREN statement ELSE statement','ifblock',7,'p_ifblock1','better.py',642),
  ('ifblock -> IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE','ifblock',9,'p_ifblock1','better.py',643),
  ('ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE','ifblock',11,'p_ifblock1','better.py',644),
  ('ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement','ifblock',9,'p_ifblock2','better.py',655),
  ('whileblock -> WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE','whileblock',7,'p_while','better.py',660),
  ('conditional -> conditionbase','conditional',1,'p_conditional','better.py',666),
  ('conditional -> conditional LESSTHANEQ conditional','conditional',3,'p_conditional','better.py',667),
  ('conditional -> conditional GREATERTHANEQ conditional','conditional',3,'p_conditional','better.py',668),
  ('conditional -> conditional UNEQUAL conditional','conditional',3,'p_conditional','better.py',669),
  ('conditional -> conditional EQUALCHECK conditional','conditional',3,'p_conditional','better.py',670),
  ('conditional -> conditional LESSTHAN conditional','conditional',3,'p_conditional','better.py',671),
  ('conditional -> conditional GREATERTHAN conditional','conditional',3,'p_conditional','better.py',672),
  ('conditional -> conditional ANDOPERATOR conditional','conditional',3,'p_conditional','better.py',673),
  ('conditional -> conditional OROPERATOR conditional','conditional',3,'p_conditional','better.py',674),
  ('conditionbase -> CS LESSTHANEQ CS','conditionbase',3,'p_conditionbase','better.py',698),
  ('conditionbase -> CS GREATERTHANEQ CS','conditionbase',3,'p_conditionbase','better.py',699),
  ('conditionbase -> CS UNEQUAL CS','conditionbase',3,'p_conditionbase','better.py',700),
  ('conditionbase -> CS EQUALCHECK CS','conditionbase',3,'p_conditionbase','better.py',701),
  ('conditionbase -> CS LESSTHAN CS','conditionbase',3,'p_conditionbase','better.py',702),
  ('conditionbase -> CS GREATERTHAN CS','conditionbase',3,'p_conditionbase','better.py',703),
  ('CS -> expression','CS',1,'p_cs','better.py',723),
  ('CS -> NOT LPAREN expression RPAREN','CS',4,'p_cs','better.py',724),
  ('declaration -> TYPE dlist1 SEMICOLON','declaration',3,'p_declaration1','better.py',732),
  ('dlist1 -> NAME','dlist1',1,'p_dlistname','better.py',738),
  ('dlist1 -> NAME COMMA dlist1','dlist1',3,'p_dlistname','better.py',739),
  ('dlist1 -> specialvar','dlist1',1,'p_dlistpointer','better.py',746),
  ('dlist1 -> specialvar COMMA dlist1','dlist1',3,'p_dlistpointer','better.py',747),
  ('specialvar -> TIMES specialvar','specialvar',2,'p_specialvar','better.py',754),
  ('specialvar -> TIMES NAME','specialvar',2,'p_specialvar','better.py',755),
  ('assignment -> assignment_base SEMICOLON','assignment',2,'p_assignment','better.py',760),
  ('assignment_base -> TIMES pointervar EQUALS expression','assignment_base',4,'p_assignment_base_pointer','better.py',769),
  ('assignment_base -> NAME EQUALS expression','assignment_base',3,'p_assignment_base_pointer','better.py',770),
  ('expression -> expression PLUS expression','expression',3,'p_expression1','better.py',790),
  ('expression -> expression MINUS expression','expression',3,'p_expression1','better.py',791),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression1','better.py',792),
  ('expression -> expression TIMES expression','expression',3,'p_expression_mul','better.py',809),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','better.py',817),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_paren','better.py',824),
  ('expression -> NUMBER','expression',1,'p_expression_base_number','better.py',830),
  ('expression -> pointervar','expression',1,'p_expression_base_pointer','better.py',836),
  ('pointervar -> TIMES pointervar','pointervar',2,'p_pointervar1','better.py',843),
  ('pointervar -> ADDROF pointervar','pointervar',2,'p_pointervar2','better.py',849),
  ('pointervar -> NAME','pointervar',1,'p_pointervar3','better.py',856),
]
