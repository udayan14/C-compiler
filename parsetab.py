
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftOROPERATORleftANDOPERATORleftEQUALCHECKUNEQUALleftLESSTHANEQLESSTHANGREATERTHANEQGREATERTHANleftPLUSMINUSleftTIMESDIVIDErightVALOFADDROFrightNOTrightUMINUSnonassocBLANKnonassocIFXNUMBER TYPE SEMICOLON EQUALS COMMA LPAREN RPAREN LBRACE RBRACE ANDOPERATOR OROPERATOR ADDROF NAME PLUS MINUS TIMES DIVIDE WHILE IF ELSE EQUALCHECK UNEQUAL LESSTHAN LESSTHANEQ GREATERTHAN GREATERTHANEQ NOT \n\tprogram : function \n\t\t\t\t| function program\n\t\n\tfunction : TYPE NAME LPAREN RPAREN LBRACE fbody RBRACE\n\t\n\tfbody : allstatement %prec IFX\n\t\t\t| allstatement fbody %prec IFX\n\t\t\t| %prec BLANK\n\t\n\tallstatement : statement\n\t\t\t\t| unmatchedstatement\n\t\n\tstatement : assignment\n\t\t\t| declaration\n\t\t\t| whileblock\n\t\t\t| ifblock\n\t\n\tstatement : SEMICOLON\n\t\n\tunmatchedstatement : IF LPAREN conditional RPAREN allstatement\n\t\t\t\t| IF LPAREN conditional RPAREN statement ELSE unmatchedstatement\n\t\t\t\t| IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement\n\t\n\tunmatchedstatement : IF LPAREN conditional RPAREN LBRACE fbody RBRACE\n\t\n\tifblock : IF LPAREN conditional RPAREN statement ELSE statement\n\t\t\t| IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE\n\t\t\t| IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE\n\t\n\tifblock : IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement\n\t\n\twhileblock : WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE\n\t\n\tconditional : conditionbase\n\t\t\t\t| conditional LESSTHANEQ conditional\n\t\t\t\t| conditional GREATERTHANEQ conditional\n\t\t\t\t| conditional UNEQUAL conditional\n\t\t\t\t| conditional EQUALCHECK conditional\n\t\t\t\t| conditional LESSTHAN conditional\n\t\t\t\t| conditional GREATERTHAN conditional\n\t\t\t\t| conditional ANDOPERATOR conditional\n\t\t\t\t| conditional OROPERATOR conditional\n\t\n\tconditionbase : CS LESSTHANEQ CS\n\t\t\t\t| CS GREATERTHANEQ CS\n\t\t\t\t| CS UNEQUAL CS\n\t\t\t\t| CS EQUALCHECK CS\n\t\t\t\t| CS LESSTHAN CS\n\t\t\t\t| CS GREATERTHAN CS\n\t\n\tCS : expression\n\t\t| NOT LPAREN expression RPAREN\n\t\n\t\tdeclaration : TYPE dlist1 SEMICOLON\n\t\n\tdlist1 : NAME  \n\t\t\t| NAME COMMA dlist1\n\t\n\tdlist1 : specialvar\n\t\t\t| specialvar  COMMA dlist1  \n\t\n\tspecialvar : TIMES specialvar %prec VALOF\n\t\t\t\t| TIMES NAME %prec VALOF\n\t\n\tassignment : assignment_base SEMICOLON\n\t \n\tassignment_base : TIMES pointervar EQUALS expression\n\t\t\t| NAME EQUALS expression \n\t \n\texpression : expression PLUS expression\n\t\t\t\t| expression MINUS expression\n\t\t\t\t| expression DIVIDE expression\n\t\n\texpression : expression TIMES expression\n\t\n\texpression : MINUS expression %prec UMINUS\n\t\n\texpression : LPAREN expression RPAREN\n\t\n\texpression : NUMBER\n\t\n\texpression : pointervar\n\t\n\tpointervar : TIMES pointervar %prec VALOF\n\t\n\tpointervar : ADDROF pointervar \n\t\n\tpointervar : NAME\n\t'
    
_lr_action_items = {'SEMICOLON':([8,9,10,14,16,18,19,20,21,22,24,30,31,33,35,38,40,41,42,45,46,48,49,57,63,64,65,82,83,84,85,86,87,98,104,105,106,109,111,112,113,114,115,117,118,119,120,121,123,],[9,-13,-12,-9,-7,35,9,-11,-10,-8,-60,46,-43,-41,-47,-58,-59,-49,-57,-56,-40,-45,-46,-48,-54,-44,-42,9,-50,-53,-52,-51,-55,9,-14,-7,9,9,-22,-18,9,-15,-17,9,-19,-21,9,-16,-20,]),'PLUS':([24,38,40,41,42,45,53,57,62,63,83,84,85,86,87,88,],[-60,-58,-59,58,-57,-56,58,58,58,-54,-50,-53,-52,-51,-55,58,]),'$end':([2,3,5,28,],[0,-1,-2,-3,]),'TIMES':([8,9,10,11,14,15,16,19,20,21,22,24,25,27,29,32,34,35,37,38,39,40,41,42,43,44,45,46,47,50,53,57,58,59,60,61,62,63,66,67,68,69,70,71,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,98,104,105,106,109,111,112,113,114,115,117,118,119,120,121,123,],[11,-13,-12,25,-9,32,-7,11,-11,-10,-8,-60,25,25,25,32,25,-47,25,-58,25,-59,59,-57,25,25,-56,-40,32,32,59,59,25,25,25,25,59,-54,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,11,59,-53,-52,59,-55,59,11,-14,-7,11,11,-22,-18,11,-15,-17,11,-19,-21,11,-16,-20,]),'COMMA':([31,33,48,49,],[47,50,-45,-46,]),'EQUALS':([13,24,26,38,40,],[29,-60,39,-58,-59,]),'ELSE':([9,10,14,20,21,35,46,105,111,112,115,118,119,123,],[-13,-12,-9,-11,-10,-47,-40,109,-22,-18,117,-19,-21,-20,]),'LPAREN':([4,17,23,29,34,37,39,43,44,51,58,59,60,61,66,67,68,69,70,71,72,73,74,75,77,78,79,80,81,],[6,34,37,43,43,43,43,43,43,66,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'TYPE':([0,3,8,9,10,14,16,19,20,21,22,28,35,46,82,98,104,105,106,109,111,112,113,114,115,117,118,119,120,121,123,],[1,1,15,-13,-12,-9,-7,15,-11,-10,-8,-3,-47,-40,15,15,-14,-7,15,15,-22,-18,15,-15,-17,15,-19,-21,15,-16,-20,]),'UNEQUAL':([24,38,40,42,45,52,53,54,55,56,63,83,84,85,86,87,89,90,91,92,93,94,95,96,97,99,100,101,102,103,107,],[-60,-58,-59,-57,-56,67,-38,77,-23,77,-54,-50,-53,-52,-51,-55,-34,-36,-32,-33,-37,-35,-24,77,-28,-26,-25,77,-27,-29,-39,]),'LESSTHAN':([24,38,40,42,45,52,53,54,55,56,63,83,84,85,86,87,89,90,91,92,93,94,95,96,97,99,100,101,102,103,107,],[-60,-58,-59,-57,-56,68,-38,75,-23,75,-54,-50,-53,-52,-51,-55,-34,-36,-32,-33,-37,-35,-24,75,-28,75,-25,75,75,-29,-39,]),'NAME':([1,8,9,10,11,14,15,16,19,20,21,22,25,27,29,32,34,35,37,39,43,44,46,47,50,58,59,60,61,66,67,68,69,70,71,72,73,74,75,77,78,79,80,81,82,98,104,105,106,109,111,112,113,114,115,117,118,119,120,121,123,],[4,13,-13,-12,24,-9,33,-7,13,-11,-10,-8,24,24,24,49,24,-47,24,24,24,24,-40,33,33,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,13,13,-14,-7,13,13,-22,-18,13,-15,-17,13,-19,-21,13,-16,-20,]),'GREATERTHANEQ':([24,38,40,42,45,52,53,54,55,56,63,83,84,85,86,87,89,90,91,92,93,94,95,96,97,99,100,101,102,103,107,],[-60,-58,-59,-57,-56,70,-38,78,-23,78,-54,-50,-53,-52,-51,-55,-34,-36,-32,-33,-37,-35,-24,78,-28,78,-25,78,78,-29,-39,]),'ADDROF':([11,25,27,29,34,37,39,43,44,58,59,60,61,66,67,68,69,70,71,72,73,74,75,77,78,79,80,81,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'GREATERTHAN':([24,38,40,42,45,52,53,54,55,56,63,83,84,85,86,87,89,90,91,92,93,94,95,96,97,99,100,101,102,103,107,],[-60,-58,-59,-57,-56,71,-38,81,-23,81,-54,-50,-53,-52,-51,-55,-34,-36,-32,-33,-37,-35,-24,81,-28,81,-25,81,81,-29,-39,]),'RBRACE':([8,9,10,12,14,16,19,20,21,22,35,36,46,98,104,105,106,108,110,111,112,113,114,115,116,118,119,120,121,122,123,],[-6,-13,-12,28,-9,-7,-4,-11,-10,-8,-47,-5,-40,-6,-14,-7,-6,111,115,-22,-18,-6,-15,-17,118,-19,-21,-6,-16,123,-20,]),'NOT':([34,37,67,68,69,70,71,72,73,74,75,77,78,79,80,81,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'NUMBER':([29,34,37,39,43,44,58,59,60,61,66,67,68,69,70,71,72,73,74,75,77,78,79,80,81,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'WHILE':([8,9,10,14,16,19,20,21,22,35,46,82,98,104,105,106,109,111,112,113,114,115,117,118,119,120,121,123,],[17,-13,-12,-9,-7,17,-11,-10,-8,-47,-40,17,17,-14,-7,17,17,-22,-18,17,-15,-17,17,-19,-21,17,-16,-20,]),'LESSTHANEQ':([24,38,40,42,45,52,53,54,55,56,63,83,84,85,86,87,89,90,91,92,93,94,95,96,97,99,100,101,102,103,107,],[-60,-58,-59,-57,-56,69,-38,73,-23,73,-54,-50,-53,-52,-51,-55,-34,-36,-32,-33,-37,-35,-24,73,-28,73,-25,73,73,-29,-39,]),'OROPERATOR':([24,38,40,42,45,53,54,55,56,63,83,84,85,86,87,89,90,91,92,93,94,95,96,97,99,100,101,102,103,107,],[-60,-58,-59,-57,-56,-38,74,-23,74,-54,-50,-53,-52,-51,-55,-34,-36,-32,-33,-37,-35,-24,-31,-28,-26,-25,-30,-27,-29,-39,]),'RPAREN':([6,24,38,40,42,45,53,54,55,56,62,63,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,107,],[7,-60,-58,-59,-57,-56,-38,76,-23,82,87,-54,-50,-53,-52,-51,-55,107,-34,-36,-32,-33,-37,-35,-24,-31,-28,-26,-25,-30,-27,-29,-39,]),'ANDOPERATOR':([24,38,40,42,45,53,54,55,56,63,83,84,85,86,87,89,90,91,92,93,94,95,96,97,99,100,101,102,103,107,],[-60,-58,-59,-57,-56,-38,79,-23,79,-54,-50,-53,-52,-51,-55,-34,-36,-32,-33,-37,-35,-24,79,-28,-26,-25,-30,-27,-29,-39,]),'DIVIDE':([24,38,40,41,42,45,53,57,62,63,83,84,85,86,87,88,],[-60,-58,-59,60,-57,-56,60,60,60,-54,60,-53,-52,60,-55,60,]),'LBRACE':([7,76,82,109,117,],[8,98,106,113,120,]),'MINUS':([24,29,34,37,38,39,40,41,42,43,44,45,53,57,58,59,60,61,62,63,66,67,68,69,70,71,72,73,74,75,77,78,79,80,81,83,84,85,86,87,88,],[-60,44,44,44,-58,44,-59,61,-57,44,44,-56,61,61,44,44,44,44,61,-54,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-50,-53,-52,-51,-55,61,]),'EQUALCHECK':([24,38,40,42,45,52,53,54,55,56,63,83,84,85,86,87,89,90,91,92,93,94,95,96,97,99,100,101,102,103,107,],[-60,-58,-59,-57,-56,72,-38,80,-23,80,-54,-50,-53,-52,-51,-55,-34,-36,-32,-33,-37,-35,-24,80,-28,-26,-25,80,-27,-29,-39,]),'IF':([8,9,10,14,16,19,20,21,22,35,46,82,98,104,105,106,109,111,112,113,114,115,117,118,119,120,121,123,],[23,-13,-12,-9,-7,23,-11,-10,-8,-47,-40,23,23,-14,-7,23,23,-22,-18,23,-15,-17,23,-19,-21,23,-16,-20,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'ifblock':([8,19,82,98,106,109,113,117,120,],[10,10,10,10,10,10,10,10,10,]),'allstatement':([8,19,82,98,106,113,120,],[19,19,104,19,19,19,19,]),'statement':([8,19,82,98,106,109,113,117,120,],[16,16,105,16,16,112,16,119,16,]),'pointervar':([11,25,27,29,34,37,39,43,44,58,59,60,61,66,67,68,69,70,71,72,73,74,75,77,78,79,80,81,],[26,38,40,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'specialvar':([15,32,47,50,],[31,48,31,31,]),'function':([0,3,],[3,3,]),'assignment_base':([8,19,82,98,106,109,113,117,120,],[18,18,18,18,18,18,18,18,18,]),'dlist1':([15,47,50,],[30,64,65,]),'fbody':([8,19,98,106,113,120,],[12,36,108,110,116,122,]),'program':([0,3,],[2,5,]),'conditionbase':([34,37,73,74,75,77,78,79,80,81,],[55,55,55,55,55,55,55,55,55,55,]),'whileblock':([8,19,82,98,106,109,113,117,120,],[20,20,20,20,20,20,20,20,20,]),'conditional':([34,37,73,74,75,77,78,79,80,81,],[54,56,95,96,97,99,100,101,102,103,]),'declaration':([8,19,82,98,106,109,113,117,120,],[21,21,21,21,21,21,21,21,21,]),'CS':([34,37,67,68,69,70,71,72,73,74,75,77,78,79,80,81,],[52,52,89,90,91,92,93,94,52,52,52,52,52,52,52,52,]),'assignment':([8,19,82,98,106,109,113,117,120,],[14,14,14,14,14,14,14,14,14,]),'unmatchedstatement':([8,19,82,98,106,109,113,117,120,],[22,22,22,22,22,114,22,121,22,]),'expression':([29,34,37,39,43,44,58,59,60,61,66,67,68,69,70,71,72,73,74,75,77,78,79,80,81,],[41,53,53,57,62,63,83,84,85,86,88,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> function','program',1,'p_program','better.py',637),
  ('program -> function program','program',2,'p_program','better.py',638),
  ('function -> TYPE NAME LPAREN RPAREN LBRACE fbody RBRACE','function',7,'p_function','better.py',662),
  ('fbody -> allstatement','fbody',1,'p_fbody','better.py',699),
  ('fbody -> allstatement fbody','fbody',2,'p_fbody','better.py',700),
  ('fbody -> <empty>','fbody',0,'p_fbody','better.py',701),
  ('allstatement -> statement','allstatement',1,'p_allstatement_expr','better.py',720),
  ('allstatement -> unmatchedstatement','allstatement',1,'p_allstatement_expr','better.py',721),
  ('statement -> assignment','statement',1,'p_statement_expr','better.py',727),
  ('statement -> declaration','statement',1,'p_statement_expr','better.py',728),
  ('statement -> whileblock','statement',1,'p_statement_expr','better.py',729),
  ('statement -> ifblock','statement',1,'p_statement_expr','better.py',730),
  ('statement -> SEMICOLON','statement',1,'p_empty_statement','better.py',736),
  ('unmatchedstatement -> IF LPAREN conditional RPAREN allstatement','unmatchedstatement',5,'p_unmatchedstatement_expr1','better.py',742),
  ('unmatchedstatement -> IF LPAREN conditional RPAREN statement ELSE unmatchedstatement','unmatchedstatement',7,'p_unmatchedstatement_expr1','better.py',743),
  ('unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE unmatchedstatement','unmatchedstatement',9,'p_unmatchedstatement_expr1','better.py',744),
  ('unmatchedstatement -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE','unmatchedstatement',7,'p_unmatchedstatement_expr2','better.py',755),
  ('ifblock -> IF LPAREN conditional RPAREN statement ELSE statement','ifblock',7,'p_ifblock1','better.py',761),
  ('ifblock -> IF LPAREN conditional RPAREN statement ELSE LBRACE fbody RBRACE','ifblock',9,'p_ifblock1','better.py',762),
  ('ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE LBRACE fbody RBRACE','ifblock',11,'p_ifblock1','better.py',763),
  ('ifblock -> IF LPAREN conditional RPAREN LBRACE fbody RBRACE ELSE statement','ifblock',9,'p_ifblock2','better.py',774),
  ('whileblock -> WHILE LPAREN conditional RPAREN LBRACE fbody RBRACE','whileblock',7,'p_while','better.py',779),
  ('conditional -> conditionbase','conditional',1,'p_conditional','better.py',785),
  ('conditional -> conditional LESSTHANEQ conditional','conditional',3,'p_conditional','better.py',786),
  ('conditional -> conditional GREATERTHANEQ conditional','conditional',3,'p_conditional','better.py',787),
  ('conditional -> conditional UNEQUAL conditional','conditional',3,'p_conditional','better.py',788),
  ('conditional -> conditional EQUALCHECK conditional','conditional',3,'p_conditional','better.py',789),
  ('conditional -> conditional LESSTHAN conditional','conditional',3,'p_conditional','better.py',790),
  ('conditional -> conditional GREATERTHAN conditional','conditional',3,'p_conditional','better.py',791),
  ('conditional -> conditional ANDOPERATOR conditional','conditional',3,'p_conditional','better.py',792),
  ('conditional -> conditional OROPERATOR conditional','conditional',3,'p_conditional','better.py',793),
  ('conditionbase -> CS LESSTHANEQ CS','conditionbase',3,'p_conditionbase','better.py',817),
  ('conditionbase -> CS GREATERTHANEQ CS','conditionbase',3,'p_conditionbase','better.py',818),
  ('conditionbase -> CS UNEQUAL CS','conditionbase',3,'p_conditionbase','better.py',819),
  ('conditionbase -> CS EQUALCHECK CS','conditionbase',3,'p_conditionbase','better.py',820),
  ('conditionbase -> CS LESSTHAN CS','conditionbase',3,'p_conditionbase','better.py',821),
  ('conditionbase -> CS GREATERTHAN CS','conditionbase',3,'p_conditionbase','better.py',822),
  ('CS -> expression','CS',1,'p_cs','better.py',842),
  ('CS -> NOT LPAREN expression RPAREN','CS',4,'p_cs','better.py',843),
  ('declaration -> TYPE dlist1 SEMICOLON','declaration',3,'p_declaration1','better.py',851),
  ('dlist1 -> NAME','dlist1',1,'p_dlistname','better.py',857),
  ('dlist1 -> NAME COMMA dlist1','dlist1',3,'p_dlistname','better.py',858),
  ('dlist1 -> specialvar','dlist1',1,'p_dlistpointer','better.py',865),
  ('dlist1 -> specialvar COMMA dlist1','dlist1',3,'p_dlistpointer','better.py',866),
  ('specialvar -> TIMES specialvar','specialvar',2,'p_specialvar','better.py',873),
  ('specialvar -> TIMES NAME','specialvar',2,'p_specialvar','better.py',874),
  ('assignment -> assignment_base SEMICOLON','assignment',2,'p_assignment','better.py',879),
  ('assignment_base -> TIMES pointervar EQUALS expression','assignment_base',4,'p_assignment_base_pointer','better.py',888),
  ('assignment_base -> NAME EQUALS expression','assignment_base',3,'p_assignment_base_pointer','better.py',889),
  ('expression -> expression PLUS expression','expression',3,'p_expression1','better.py',909),
  ('expression -> expression MINUS expression','expression',3,'p_expression1','better.py',910),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression1','better.py',911),
  ('expression -> expression TIMES expression','expression',3,'p_expression_mul','better.py',928),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','better.py',936),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_paren','better.py',943),
  ('expression -> NUMBER','expression',1,'p_expression_base_number','better.py',949),
  ('expression -> pointervar','expression',1,'p_expression_base_pointer','better.py',955),
  ('pointervar -> TIMES pointervar','pointervar',2,'p_pointervar1','better.py',962),
  ('pointervar -> ADDROF pointervar','pointervar',2,'p_pointervar2','better.py',968),
  ('pointervar -> NAME','pointervar',1,'p_pointervar3','better.py',975),
]
